
LabaPES_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08005cbc  08005cbc  00015cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f94  08005f94  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f9c  08005f9c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08005fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200000b4  08006058  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08006058  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010903  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ce  00000000  00000000  000309e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00032cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00033a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223e0  00000000  00000000  000346d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010737  00000000  00000000  00056ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d130d  00000000  00000000  000671e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001384f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a8  00000000  00000000  00138548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005ca4 	.word	0x08005ca4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	08005ca4 	.word	0x08005ca4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <SetPTimer>:

__IO Ptimer_t Ptimer[MAX_NUMBER_OF_TIMERS] 	= {{255,0}};
__IO ptimerFlags_t ptimerFlags				= {0};

void SetPTimer(uint8_t NewNumber, uint32_t NewTime)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
	uint8_t free_timer			= 255;
 80005c4:	23ff      	movs	r3, #255	; 0xff
 80005c6:	73fb      	strb	r3, [r7, #15]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80005c8:	f3ef 8310 	mrs	r3, PRIMASK
 80005cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80005ce:	68bb      	ldr	r3, [r7, #8]
	uint8_t interrupts_enable	= ~__get_PRIMASK();
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	43db      	mvns	r3, r3
 80005d4:	737b      	strb	r3, [r7, #13]

	if (interrupts_enable) __disable_irq();
 80005d6:	7b7b      	ldrb	r3, [r7, #13]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SetPTimer+0x28>
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	bf00      	nop

	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	73bb      	strb	r3, [r7, #14]
 80005e4:	e01c      	b.n	8000620 <SetPTimer+0x68>
	{
		if (Ptimer[i].Number == NewNumber)
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <SetPTimer+0xa0>)
 80005ea:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	79fa      	ldrb	r2, [r7, #7]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d108      	bne.n	8000608 <SetPTimer+0x50>
		{
			Ptimer[i].Time = NewTime;
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	4a17      	ldr	r2, [pc, #92]	; (8000658 <SetPTimer+0xa0>)
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	4413      	add	r3, r2
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	605a      	str	r2, [r3, #4]
			free_timer = 255;
 8000602:	23ff      	movs	r3, #255	; 0xff
 8000604:	73fb      	strb	r3, [r7, #15]
			break;
 8000606:	e00e      	b.n	8000626 <SetPTimer+0x6e>
		}
		if (Ptimer[i].Number == 255)
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <SetPTimer+0xa0>)
 800060c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2bff      	cmp	r3, #255	; 0xff
 8000614:	d101      	bne.n	800061a <SetPTimer+0x62>
		{
			free_timer = i;
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b08      	cmp	r3, #8
 8000624:	d1df      	bne.n	80005e6 <SetPTimer+0x2e>
		}
	}
	if (free_timer < MAX_NUMBER_OF_TIMERS)
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b07      	cmp	r3, #7
 800062a:	d80a      	bhi.n	8000642 <SetPTimer+0x8a>
	{
		Ptimer[free_timer].Number = NewNumber;
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	490a      	ldr	r1, [pc, #40]	; (8000658 <SetPTimer+0xa0>)
 8000630:	79fa      	ldrb	r2, [r7, #7]
 8000632:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
		Ptimer[free_timer].Time = NewTime;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <SetPTimer+0xa0>)
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	4413      	add	r3, r2
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	605a      	str	r2, [r3, #4]
	}

	if (interrupts_enable) __enable_irq();
 8000642:	7b7b      	ldrb	r3, [r7, #13]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SetPTimer+0x94>
  __ASM volatile ("cpsie i" : : : "memory");
 8000648:	b662      	cpsie	i
}
 800064a:	bf00      	nop
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	20000000 	.word	0x20000000

0800065c <PTimer>:

void PTimer(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 8000662:	2300      	movs	r3, #0
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	e036      	b.n	80006d6 <PTimer+0x7a>
	{
		if (Ptimer[i].Number != 255)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <PTimer+0x90>)
 800066c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2bff      	cmp	r3, #255	; 0xff
 8000674:	d02c      	beq.n	80006d0 <PTimer+0x74>
		{
			if (Ptimer[i].Time != 0)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <PTimer+0x90>)
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	4413      	add	r3, r2
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00a      	beq.n	800069a <PTimer+0x3e>
			{
				Ptimer[i].Time--;
 8000684:	79fa      	ldrb	r2, [r7, #7]
 8000686:	4919      	ldr	r1, [pc, #100]	; (80006ec <PTimer+0x90>)
 8000688:	00d3      	lsls	r3, r2, #3
 800068a:	440b      	add	r3, r1
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	1e59      	subs	r1, r3, #1
 8000690:	4816      	ldr	r0, [pc, #88]	; (80006ec <PTimer+0x90>)
 8000692:	00d3      	lsls	r3, r2, #3
 8000694:	4403      	add	r3, r0
 8000696:	6059      	str	r1, [r3, #4]
 8000698:	e01a      	b.n	80006d0 <PTimer+0x74>
			}
			else
			{
				ptimerFlags.timer |= 1 << Ptimer[i].Number;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	4a13      	ldr	r2, [pc, #76]	; (80006ec <PTimer+0x90>)
 800069e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	2301      	movs	r3, #1
 80006a8:	fa03 f102 	lsl.w	r1, r3, r2
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <PTimer+0x94>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	b25a      	sxtb	r2, r3
 80006b4:	b24b      	sxtb	r3, r1
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	b2d9      	uxtb	r1, r3
 80006bc:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <PTimer+0x94>)
 80006be:	7813      	ldrb	r3, [r2, #0]
 80006c0:	f361 0307 	bfi	r3, r1, #0, #8
 80006c4:	7013      	strb	r3, [r2, #0]
				Ptimer[i].Number = 255;
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	4a08      	ldr	r2, [pc, #32]	; (80006ec <PTimer+0x90>)
 80006ca:	21ff      	movs	r1, #255	; 0xff
 80006cc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	3301      	adds	r3, #1
 80006d4:	71fb      	strb	r3, [r7, #7]
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b08      	cmp	r3, #8
 80006da:	d1c5      	bne.n	8000668 <PTimer+0xc>
			}
		}
	}
}
 80006dc:	bf00      	nop
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000000 	.word	0x20000000
 80006f0:	200000d0 	.word	0x200000d0

080006f4 <InitPTimer>:

void InitPTimer(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	e00d      	b.n	800071c <InitPTimer+0x28>
	{
		Ptimer[i].Number = 255;
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <InitPTimer+0x3c>)
 8000704:	21ff      	movs	r1, #255	; 0xff
 8000706:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		Ptimer[i].Time = 0;
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4a08      	ldr	r2, [pc, #32]	; (8000730 <InitPTimer+0x3c>)
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	4413      	add	r3, r2
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	3301      	adds	r3, #1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b08      	cmp	r3, #8
 8000720:	d1ee      	bne.n	8000700 <InitPTimer+0xc>
	}
}
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	20000000 	.word	0x20000000

08000734 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	2b00      	cmp	r3, #0
 8000744:	db0c      	blt.n	8000760 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f003 021f 	and.w	r2, r3, #31
 800074c:	4907      	ldr	r1, [pc, #28]	; (800076c <__NVIC_ClearPendingIRQ+0x38>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	095b      	lsrs	r3, r3, #5
 8000754:	2001      	movs	r0, #1
 8000756:	fa00 f202 	lsl.w	r2, r0, r2
 800075a:	3360      	adds	r3, #96	; 0x60
 800075c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000e100 	.word	0xe000e100

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b0ca      	sub	sp, #296	; 0x128
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t tstring[255];
	uint8_t rstring[BUFF_SIZE + 1];
	char string[10] = {0,0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	3304      	adds	r3, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 ff7c 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 fa00 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f000 fb7a 	bl	8000e84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000790:	f000 fb4e 	bl	8000e30 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000794:	f000 fa66 	bl	8000c64 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000798:	f000 fafe 	bl	8000d98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  RING_Init(&ring, buff, sizeof(buff) / sizeof(buff[0])); // Initialize UART receiver ring buffer.
 800079c:	2210      	movs	r2, #16
 800079e:	49a5      	ldr	r1, [pc, #660]	; (8000a34 <main+0x2c4>)
 80007a0:	48a5      	ldr	r0, [pc, #660]	; (8000a38 <main+0x2c8>)
 80007a2:	f000 fce8 	bl	8001176 <RING_Init>
  sprintf((char*)tstring,"\r\nEnter command:\n\r"
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	49a4      	ldr	r1, [pc, #656]	; (8000a3c <main+0x2cc>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 f987 	bl	8004ac0 <siprintf>
  		  "L=xx -- brightness for LEDs, where xx - value of brightness\n\r"
  		  "OR\n\r"
  		  "l=xx -- brightness for LEDs, where xx - value of brightness.\n\r\n\r");
  HAL_UART_Transmit(&huart2,tstring,strlen((char*)tstring), HAL_MAX_DELAY);
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd2a 	bl	8000210 <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	b29a      	uxth	r2, r3
 80007c0:	f107 0120 	add.w	r1, r7, #32
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	489d      	ldr	r0, [pc, #628]	; (8000a40 <main+0x2d0>)
 80007ca:	f003 f988 	bl	8003ade <HAL_UART_Transmit>
  // Start UART receiver in the non blocking mode
  HAL_UART_Receive_IT(&huart2,ring.buffer,1);
 80007ce:	4b9a      	ldr	r3, [pc, #616]	; (8000a38 <main+0x2c8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	489a      	ldr	r0, [pc, #616]	; (8000a40 <main+0x2d0>)
 80007d8:	f003 fa58 	bl	8003c8c <HAL_UART_Receive_IT>
  TIM1->CCR1 = brightness;
 80007dc:	4b99      	ldr	r3, [pc, #612]	; (8000a44 <main+0x2d4>)
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	4b99      	ldr	r3, [pc, #612]	; (8000a48 <main+0x2d8>)
 80007e2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = brightness;
 80007e4:	4b97      	ldr	r3, [pc, #604]	; (8000a44 <main+0x2d4>)
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	4b97      	ldr	r3, [pc, #604]	; (8000a48 <main+0x2d8>)
 80007ea:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = brightness;
 80007ec:	4b95      	ldr	r3, [pc, #596]	; (8000a44 <main+0x2d4>)
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	4b95      	ldr	r3, [pc, #596]	; (8000a48 <main+0x2d8>)
 80007f2:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007f4:	2100      	movs	r1, #0
 80007f6:	4895      	ldr	r0, [pc, #596]	; (8000a4c <main+0x2dc>)
 80007f8:	f002 f9b0 	bl	8002b5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007fc:	2104      	movs	r1, #4
 80007fe:	4893      	ldr	r0, [pc, #588]	; (8000a4c <main+0x2dc>)
 8000800:	f002 f9ac 	bl	8002b5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000804:	2108      	movs	r1, #8
 8000806:	4891      	ldr	r0, [pc, #580]	; (8000a4c <main+0x2dc>)
 8000808:	f002 f9a8 	bl	8002b5c <HAL_TIM_PWM_Start>
  InitPTimer();
 800080c:	f7ff ff72 	bl	80006f4 <InitPTimer>
  HAL_TIM_Base_Start_IT(&htim2);
 8000810:	488f      	ldr	r0, [pc, #572]	; (8000a50 <main+0x2e0>)
 8000812:	f002 f8e3 	bl	80029dc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    switch(flag_btn)
 8000816:	4b8f      	ldr	r3, [pc, #572]	; (8000a54 <main+0x2e4>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b07      	cmp	r3, #7
 800081c:	d86e      	bhi.n	80008fc <main+0x18c>
 800081e:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <main+0xb4>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	08000845 	.word	0x08000845
 8000828:	08000859 	.word	0x08000859
 800082c:	0800086f 	.word	0x0800086f
 8000830:	08000885 	.word	0x08000885
 8000834:	0800089d 	.word	0x0800089d
 8000838:	080008b3 	.word	0x080008b3
 800083c:	080008cb 	.word	0x080008cb
 8000840:	080008e3 	.word	0x080008e3
		{
			case 0:
				TIM1->CCR1 = 0;
 8000844:	4b80      	ldr	r3, [pc, #512]	; (8000a48 <main+0x2d8>)
 8000846:	2200      	movs	r2, #0
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800084a:	4b7f      	ldr	r3, [pc, #508]	; (8000a48 <main+0x2d8>)
 800084c:	2200      	movs	r2, #0
 800084e:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8000850:	4b7d      	ldr	r3, [pc, #500]	; (8000a48 <main+0x2d8>)
 8000852:	2200      	movs	r2, #0
 8000854:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000856:	e051      	b.n	80008fc <main+0x18c>
			case 1:
				TIM1->CCR1 = 0;
 8000858:	4b7b      	ldr	r3, [pc, #492]	; (8000a48 <main+0x2d8>)
 800085a:	2200      	movs	r2, #0
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800085e:	4b7a      	ldr	r3, [pc, #488]	; (8000a48 <main+0x2d8>)
 8000860:	2200      	movs	r2, #0
 8000862:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = brightness;
 8000864:	4b77      	ldr	r3, [pc, #476]	; (8000a44 <main+0x2d4>)
 8000866:	781a      	ldrb	r2, [r3, #0]
 8000868:	4b77      	ldr	r3, [pc, #476]	; (8000a48 <main+0x2d8>)
 800086a:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800086c:	e046      	b.n	80008fc <main+0x18c>
			case 2:
				TIM1->CCR1 = 0;
 800086e:	4b76      	ldr	r3, [pc, #472]	; (8000a48 <main+0x2d8>)
 8000870:	2200      	movs	r2, #0
 8000872:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = brightness;
 8000874:	4b73      	ldr	r3, [pc, #460]	; (8000a44 <main+0x2d4>)
 8000876:	781a      	ldrb	r2, [r3, #0]
 8000878:	4b73      	ldr	r3, [pc, #460]	; (8000a48 <main+0x2d8>)
 800087a:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800087c:	4b72      	ldr	r3, [pc, #456]	; (8000a48 <main+0x2d8>)
 800087e:	2200      	movs	r2, #0
 8000880:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000882:	e03b      	b.n	80008fc <main+0x18c>
			case 3:
				TIM1->CCR1 = 0;
 8000884:	4b70      	ldr	r3, [pc, #448]	; (8000a48 <main+0x2d8>)
 8000886:	2200      	movs	r2, #0
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = brightness;
 800088a:	4b6e      	ldr	r3, [pc, #440]	; (8000a44 <main+0x2d4>)
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	4b6e      	ldr	r3, [pc, #440]	; (8000a48 <main+0x2d8>)
 8000890:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = brightness;
 8000892:	4b6c      	ldr	r3, [pc, #432]	; (8000a44 <main+0x2d4>)
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	4b6c      	ldr	r3, [pc, #432]	; (8000a48 <main+0x2d8>)
 8000898:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800089a:	e02f      	b.n	80008fc <main+0x18c>
			case 4:
				TIM1->CCR1 = brightness;
 800089c:	4b69      	ldr	r3, [pc, #420]	; (8000a44 <main+0x2d4>)
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	4b69      	ldr	r3, [pc, #420]	; (8000a48 <main+0x2d8>)
 80008a2:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80008a4:	4b68      	ldr	r3, [pc, #416]	; (8000a48 <main+0x2d8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80008aa:	4b67      	ldr	r3, [pc, #412]	; (8000a48 <main+0x2d8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80008b0:	e024      	b.n	80008fc <main+0x18c>
			case 5:
				TIM1->CCR1 = brightness;
 80008b2:	4b64      	ldr	r3, [pc, #400]	; (8000a44 <main+0x2d4>)
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	4b64      	ldr	r3, [pc, #400]	; (8000a48 <main+0x2d8>)
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80008ba:	4b63      	ldr	r3, [pc, #396]	; (8000a48 <main+0x2d8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = brightness;
 80008c0:	4b60      	ldr	r3, [pc, #384]	; (8000a44 <main+0x2d4>)
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	4b60      	ldr	r3, [pc, #384]	; (8000a48 <main+0x2d8>)
 80008c6:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80008c8:	e018      	b.n	80008fc <main+0x18c>
			case 6:
				TIM1->CCR1 = brightness;
 80008ca:	4b5e      	ldr	r3, [pc, #376]	; (8000a44 <main+0x2d4>)
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	4b5e      	ldr	r3, [pc, #376]	; (8000a48 <main+0x2d8>)
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = brightness;
 80008d2:	4b5c      	ldr	r3, [pc, #368]	; (8000a44 <main+0x2d4>)
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	4b5c      	ldr	r3, [pc, #368]	; (8000a48 <main+0x2d8>)
 80008d8:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80008da:	4b5b      	ldr	r3, [pc, #364]	; (8000a48 <main+0x2d8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80008e0:	e00c      	b.n	80008fc <main+0x18c>
			case 7:
				TIM1->CCR1 = brightness;
 80008e2:	4b58      	ldr	r3, [pc, #352]	; (8000a44 <main+0x2d4>)
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	4b58      	ldr	r3, [pc, #352]	; (8000a48 <main+0x2d8>)
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = brightness;
 80008ea:	4b56      	ldr	r3, [pc, #344]	; (8000a44 <main+0x2d4>)
 80008ec:	781a      	ldrb	r2, [r3, #0]
 80008ee:	4b56      	ldr	r3, [pc, #344]	; (8000a48 <main+0x2d8>)
 80008f0:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = brightness;
 80008f2:	4b54      	ldr	r3, [pc, #336]	; (8000a44 <main+0x2d4>)
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	4b54      	ldr	r3, [pc, #336]	; (8000a48 <main+0x2d8>)
 80008f8:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80008fa:	bf00      	nop
		}

		if(ptimerFlags.timer == (1<<3))
 80008fc:	4b56      	ldr	r3, [pc, #344]	; (8000a58 <main+0x2e8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b08      	cmp	r3, #8
 8000904:	d121      	bne.n	800094a <main+0x1da>
		{
			__HAL_GPIO_EXTI_CLEAR_IT(BTN1_Pin);
 8000906:	4b55      	ldr	r3, [pc, #340]	; (8000a5c <main+0x2ec>)
 8000908:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800090c:	615a      	str	r2, [r3, #20]
			NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800090e:	2028      	movs	r0, #40	; 0x28
 8000910:	f7ff ff10 	bl	8000734 <__NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000914:	2028      	movs	r0, #40	; 0x28
 8000916:	f001 f840 	bl	800199a <HAL_NVIC_EnableIRQ>
			ptimerFlags.timer &= ~(1<<3);
 800091a:	4b4f      	ldr	r3, [pc, #316]	; (8000a58 <main+0x2e8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	f023 0308 	bic.w	r3, r3, #8
 8000924:	b2d9      	uxtb	r1, r3
 8000926:	4a4c      	ldr	r2, [pc, #304]	; (8000a58 <main+0x2e8>)
 8000928:	7813      	ldrb	r3, [r2, #0]
 800092a:	f361 0307 	bfi	r3, r1, #0, #8
 800092e:	7013      	strb	r3, [r2, #0]
			//flag_irq = 0;
			flag_btn++;
 8000930:	4b48      	ldr	r3, [pc, #288]	; (8000a54 <main+0x2e4>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b46      	ldr	r3, [pc, #280]	; (8000a54 <main+0x2e4>)
 800093a:	701a      	strb	r2, [r3, #0]
			if (flag_btn > 7) flag_btn = 0;
 800093c:	4b45      	ldr	r3, [pc, #276]	; (8000a54 <main+0x2e4>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b07      	cmp	r3, #7
 8000942:	d902      	bls.n	800094a <main+0x1da>
 8000944:	4b43      	ldr	r3, [pc, #268]	; (8000a54 <main+0x2e4>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
		}
		if (Ring_GetMessage(&ring, rstring))
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	4839      	ldr	r0, [pc, #228]	; (8000a38 <main+0x2c8>)
 8000952:	f000 fc84 	bl	800125e <Ring_GetMessage>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	f43f af5c 	beq.w	8000816 <main+0xa6>
		{
			uint8_t buf, buf_;
			sscanf((char*)rstring,"%s", string);
 800095e:	463a      	mov	r2, r7
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	493e      	ldr	r1, [pc, #248]	; (8000a60 <main+0x2f0>)
 8000966:	4618      	mov	r0, r3
 8000968:	f004 f8ca 	bl	8004b00 <siscanf>
			buf = Command_read(string[0]);
 800096c:	463b      	mov	r3, r7
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fb43 	bl	8000ffc <Command_read>
 8000976:	4603      	mov	r3, r0
 8000978:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			switch(buf)
 800097c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000980:	2b0b      	cmp	r3, #11
 8000982:	d003      	beq.n	800098c <main+0x21c>
 8000984:	2b0c      	cmp	r3, #12
 8000986:	f000 80c5 	beq.w	8000b14 <main+0x3a4>
 800098a:	e0c7      	b.n	8000b1c <main+0x3ac>
			{
			case 11:
				buf = Command_read(string[1]);
 800098c:	463b      	mov	r3, r7
 800098e:	785b      	ldrb	r3, [r3, #1]
 8000990:	4618      	mov	r0, r3
 8000992:	f000 fb33 	bl	8000ffc <Command_read>
 8000996:	4603      	mov	r3, r0
 8000998:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
				switch(buf)
 800099c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 80009a0:	2b0a      	cmp	r3, #10
 80009a2:	d003      	beq.n	80009ac <main+0x23c>
 80009a4:	2b0c      	cmp	r3, #12
 80009a6:	f000 80af 	beq.w	8000b08 <main+0x398>
						}
					}
					break;
				case 12: flag_err = 2; break;
				}
				break;
 80009aa:	e0b7      	b.n	8000b1c <main+0x3ac>
					for (int i = 0; i < 3; i++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80009b2:	e00f      	b.n	80009d4 <main+0x264>
						str[i] = string[i+2];
 80009b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009b8:	3302      	adds	r3, #2
 80009ba:	463a      	mov	r2, r7
 80009bc:	5cd1      	ldrb	r1, [r2, r3]
 80009be:	4a29      	ldr	r2, [pc, #164]	; (8000a64 <main+0x2f4>)
 80009c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009c4:	4413      	add	r3, r2
 80009c6:	460a      	mov	r2, r1
 80009c8:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 3; i++)
 80009ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009ce:	3301      	adds	r3, #1
 80009d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80009d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009d8:	2b02      	cmp	r3, #2
 80009da:	ddeb      	ble.n	80009b4 <main+0x244>
					if (str[1] == '\r' || str[1] == '\n' || str[1] == '\0')
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <main+0x2f4>)
 80009de:	785b      	ldrb	r3, [r3, #1]
 80009e0:	2b0d      	cmp	r3, #13
 80009e2:	d007      	beq.n	80009f4 <main+0x284>
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <main+0x2f4>)
 80009e6:	785b      	ldrb	r3, [r3, #1]
 80009e8:	2b0a      	cmp	r3, #10
 80009ea:	d003      	beq.n	80009f4 <main+0x284>
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <main+0x2f4>)
 80009ee:	785b      	ldrb	r3, [r3, #1]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d13b      	bne.n	8000a6c <main+0x2fc>
						buf = Command_read(str[0]);
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <main+0x2f4>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 faff 	bl	8000ffc <Command_read>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
						if ((buf != 12) && (buf != 11) && (buf != 10))
 8000a04:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000a08:	2b0c      	cmp	r3, #12
 8000a0a:	d00f      	beq.n	8000a2c <main+0x2bc>
 8000a0c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000a10:	2b0b      	cmp	r3, #11
 8000a12:	d00b      	beq.n	8000a2c <main+0x2bc>
 8000a14:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000a18:	2b0a      	cmp	r3, #10
 8000a1a:	d007      	beq.n	8000a2c <main+0x2bc>
							brightness = buf; flag_err = 1;
 8000a1c:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <main+0x2d4>)
 8000a1e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000a22:	7013      	strb	r3, [r2, #0]
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <main+0x2f8>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
						if ((buf != 12) && (buf != 11) && (buf != 10))
 8000a2a:	e06c      	b.n	8000b06 <main+0x396>
							flag_err = 2; break;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <main+0x2f8>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	e06e      	b.n	8000b12 <main+0x3a2>
 8000a34:	200000e8 	.word	0x200000e8
 8000a38:	200001cc 	.word	0x200001cc
 8000a3c:	08005cbc 	.word	0x08005cbc
 8000a40:	20000188 	.word	0x20000188
 8000a44:	20000040 	.word	0x20000040
 8000a48:	40010000 	.word	0x40010000
 8000a4c:	200000f8 	.word	0x200000f8
 8000a50:	20000140 	.word	0x20000140
 8000a54:	200000d5 	.word	0x200000d5
 8000a58:	200000d0 	.word	0x200000d0
 8000a5c:	40013c00 	.word	0x40013c00
 8000a60:	08005d50 	.word	0x08005d50
 8000a64:	200000d8 	.word	0x200000d8
 8000a68:	200000d4 	.word	0x200000d4
					else if (str[2] == '\r' || str[2] == '\n' || str[2] == '\0')
 8000a6c:	4b40      	ldr	r3, [pc, #256]	; (8000b70 <main+0x400>)
 8000a6e:	789b      	ldrb	r3, [r3, #2]
 8000a70:	2b0d      	cmp	r3, #13
 8000a72:	d007      	beq.n	8000a84 <main+0x314>
 8000a74:	4b3e      	ldr	r3, [pc, #248]	; (8000b70 <main+0x400>)
 8000a76:	789b      	ldrb	r3, [r3, #2]
 8000a78:	2b0a      	cmp	r3, #10
 8000a7a:	d003      	beq.n	8000a84 <main+0x314>
 8000a7c:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <main+0x400>)
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d145      	bne.n	8000b10 <main+0x3a0>
						buf = Command_read(str[0]);
 8000a84:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <main+0x400>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fab7 	bl	8000ffc <Command_read>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
						buf_ = buf;
 8000a94:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000a98:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
						buf = Command_read(str[1]);
 8000a9c:	4b34      	ldr	r3, [pc, #208]	; (8000b70 <main+0x400>)
 8000a9e:	785b      	ldrb	r3, [r3, #1]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 faab 	bl	8000ffc <Command_read>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
						if ((buf != 12) && (buf != 11) && (buf != 10) && (buf_ != 11) && (buf_ != 12) && (buf_ != 10))
 8000aac:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000ab0:	2b0c      	cmp	r3, #12
 8000ab2:	d024      	beq.n	8000afe <main+0x38e>
 8000ab4:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000ab8:	2b0b      	cmp	r3, #11
 8000aba:	d020      	beq.n	8000afe <main+0x38e>
 8000abc:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000ac0:	2b0a      	cmp	r3, #10
 8000ac2:	d01c      	beq.n	8000afe <main+0x38e>
 8000ac4:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8000ac8:	2b0b      	cmp	r3, #11
 8000aca:	d018      	beq.n	8000afe <main+0x38e>
 8000acc:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8000ad0:	2b0c      	cmp	r3, #12
 8000ad2:	d014      	beq.n	8000afe <main+0x38e>
 8000ad4:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8000ad8:	2b0a      	cmp	r3, #10
 8000ada:	d010      	beq.n	8000afe <main+0x38e>
							brightness = (buf_ * 10) + buf; flag_err = 1;
 8000adc:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	0092      	lsls	r2, r2, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000aee:	4413      	add	r3, r2
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <main+0x404>)
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <main+0x408>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e003      	b.n	8000b06 <main+0x396>
							flag_err = 2; break;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <main+0x408>)
 8000b00:	2202      	movs	r2, #2
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	e005      	b.n	8000b12 <main+0x3a2>
					break;
 8000b06:	e003      	b.n	8000b10 <main+0x3a0>
				case 12: flag_err = 2; break;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <main+0x408>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	e000      	b.n	8000b12 <main+0x3a2>
					break;
 8000b10:	bf00      	nop
				break;
 8000b12:	e003      	b.n	8000b1c <main+0x3ac>
			case 12: flag_err = 2; break;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <main+0x408>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	bf00      	nop
			}
			RING_Clear(&ring);
 8000b1c:	4817      	ldr	r0, [pc, #92]	; (8000b7c <main+0x40c>)
 8000b1e:	f000 fb45 	bl	80011ac <RING_Clear>
			switch(flag_err)
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <main+0x408>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d002      	beq.n	8000b30 <main+0x3c0>
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d008      	beq.n	8000b40 <main+0x3d0>
 8000b2e:	e00e      	b.n	8000b4e <main+0x3de>
			{
			case 1:
				sprintf((char*)tstring,"\n\rEcho: %s\n\r"
 8000b30:	463a      	mov	r2, r7
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	4912      	ldr	r1, [pc, #72]	; (8000b80 <main+0x410>)
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 ffc1 	bl	8004ac0 <siprintf>
							  "Enter command 'L=xx' or 'l=xx'\r\n",string);
				break;
 8000b3e:	e006      	b.n	8000b4e <main+0x3de>
			case 2:
				sprintf((char*)tstring,"\n\rEcho: Wrong command!!!\r\n"
 8000b40:	f107 0320 	add.w	r3, r7, #32
 8000b44:	490f      	ldr	r1, [pc, #60]	; (8000b84 <main+0x414>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 ffba 	bl	8004ac0 <siprintf>
							  "Enter command 'L=xx' or 'l=xx'\r\n");
				break;
 8000b4c:	bf00      	nop
			}
			HAL_UART_Transmit_IT(&huart2,tstring,strlen((char*)tstring));
 8000b4e:	f107 0320 	add.w	r3, r7, #32
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fb5c 	bl	8000210 <strlen>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	f107 0320 	add.w	r3, r7, #32
 8000b60:	4619      	mov	r1, r3
 8000b62:	4809      	ldr	r0, [pc, #36]	; (8000b88 <main+0x418>)
 8000b64:	f003 f84d 	bl	8003c02 <HAL_UART_Transmit_IT>
			flag_err = 0;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <main+0x408>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
	    switch(flag_btn)
 8000b6e:	e652      	b.n	8000816 <main+0xa6>
 8000b70:	200000d8 	.word	0x200000d8
 8000b74:	20000040 	.word	0x20000040
 8000b78:	200000d4 	.word	0x200000d4
 8000b7c:	200001cc 	.word	0x200001cc
 8000b80:	08005d54 	.word	0x08005d54
 8000b84:	08005d84 	.word	0x08005d84
 8000b88:	20000188 	.word	0x20000188

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b094      	sub	sp, #80	; 0x50
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	2234      	movs	r2, #52	; 0x34
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 ff88 	bl	8004ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <SystemClock_Config+0xd0>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <SystemClock_Config+0xd0>)
 8000bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <SystemClock_Config+0xd0>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bcc:	2300      	movs	r3, #0
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <SystemClock_Config+0xd4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bd8:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <SystemClock_Config+0xd4>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <SystemClock_Config+0xd4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c04:	2348      	movs	r3, #72	; 0x48
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fbf1 	bl	8002400 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c24:	f000 faa2 	bl	800116c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2102      	movs	r1, #2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 f90f 	bl	8001e68 <HAL_RCC_ClockConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c50:	f000 fa8c 	bl	800116c <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	3750      	adds	r7, #80	; 0x50
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b092      	sub	sp, #72	; 0x48
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 ff0e 	bl	8004ab0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c94:	4b3e      	ldr	r3, [pc, #248]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000c96:	4a3f      	ldr	r2, [pc, #252]	; (8000d94 <MX_TIM1_Init+0x130>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000c9a:	4b3d      	ldr	r3, [pc, #244]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000c9c:	2247      	movs	r2, #71	; 0x47
 8000c9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000ca6:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000ca8:	2263      	movs	r2, #99	; 0x63
 8000caa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cb2:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cbe:	4834      	ldr	r0, [pc, #208]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000cc0:	f001 fefc 	bl	8002abc <HAL_TIM_PWM_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000cca:	f000 fa4f 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cda:	4619      	mov	r1, r3
 8000cdc:	482c      	ldr	r0, [pc, #176]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000cde:	f002 fdcf 	bl	8003880 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000ce8:	f000 fa40 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cec:	2360      	movs	r3, #96	; 0x60
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4619      	mov	r1, r3
 8000d10:	481f      	ldr	r0, [pc, #124]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000d12:	f002 f8f3 	bl	8002efc <HAL_TIM_PWM_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000d1c:	f000 fa26 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	2204      	movs	r2, #4
 8000d26:	4619      	mov	r1, r3
 8000d28:	4819      	ldr	r0, [pc, #100]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000d2a:	f002 f8e7 	bl	8002efc <HAL_TIM_PWM_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000d34:	f000 fa1a 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	2208      	movs	r2, #8
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4813      	ldr	r0, [pc, #76]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000d42:	f002 f8db 	bl	8002efc <HAL_TIM_PWM_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000d4c:	f000 fa0e 	bl	800116c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4807      	ldr	r0, [pc, #28]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000d74:	f002 fe00 	bl	8003978 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000d7e:	f000 f9f5 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d82:	4803      	ldr	r0, [pc, #12]	; (8000d90 <MX_TIM1_Init+0x12c>)
 8000d84:	f000 fb3a 	bl	80013fc <HAL_TIM_MspPostInit>

}
 8000d88:	bf00      	nop
 8000d8a:	3748      	adds	r7, #72	; 0x48
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200000f8 	.word	0x200000f8
 8000d94:	40010000 	.word	0x40010000

08000d98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	463b      	mov	r3, r7
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dbe:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000dc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dcc:	2209      	movs	r2, #9
 8000dce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dde:	f001 fdad 	bl	800293c <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000de8:	f000 f9c0 	bl	800116c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dfa:	f002 f941 	bl	8003080 <HAL_TIM_ConfigClockSource>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e04:	f000 f9b2 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000e16:	f002 fd33 	bl	8003880 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e20:	f000 f9a4 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000140 	.word	0x20000140

08000e30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <MX_USART2_UART_Init+0x50>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_USART2_UART_Init+0x4c>)
 8000e68:	f002 fdec 	bl	8003a44 <HAL_UART_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e72:	f000 f97b 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000188 	.word	0x20000188
 8000e80:	40004400 	.word	0x40004400

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <MX_GPIO_Init+0xa0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <MX_GPIO_Init+0xa0>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <MX_GPIO_Init+0xa0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <MX_GPIO_Init+0xa0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <MX_GPIO_Init+0xa0>)
 8000ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_GPIO_Init+0xa0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <MX_GPIO_Init+0xa0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <MX_GPIO_Init+0xa0>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_GPIO_Init+0xa0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000efa:	2302      	movs	r3, #2
 8000efc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	4619      	mov	r1, r3
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <MX_GPIO_Init+0xa4>)
 8000f06:	f000 fe03 	bl	8001b10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2028      	movs	r0, #40	; 0x28
 8000f10:	f000 fd27 	bl	8001962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f14:	2028      	movs	r0, #40	; 0x28
 8000f16:	f000 fd40 	bl	800199a <HAL_NVIC_EnableIRQ>

}
 8000f1a:	bf00      	nop
 8000f1c:	3720      	adds	r7, #32
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020800 	.word	0x40020800

08000f2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	// Check that interrupt caused by UART2
	if (huart == &huart2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a1d      	ldr	r2, [pc, #116]	; (8000fac <HAL_UART_RxCpltCallback+0x80>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d133      	bne.n	8000fa4 <HAL_UART_RxCpltCallback+0x78>
	{
		// Put new character from the UART receiver data register (DR) to the ring buffer
		RING_Put(huart->Instance->DR, &ring);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	491a      	ldr	r1, [pc, #104]	; (8000fb0 <HAL_UART_RxCpltCallback+0x84>)
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f94a 	bl	80011e0 <RING_Put>
		// Set the overrun flag if the message is longer than ring buffer can hold
		if (ring.idxOut == ring.idxIn) ring.flag.BufferOverrun = 1;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_UART_RxCpltCallback+0x84>)
 8000f4e:	88da      	ldrh	r2, [r3, #6]
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_UART_RxCpltCallback+0x84>)
 8000f52:	889b      	ldrh	r3, [r3, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d104      	bne.n	8000f62 <HAL_UART_RxCpltCallback+0x36>
 8000f58:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <HAL_UART_RxCpltCallback+0x84>)
 8000f5a:	7b13      	ldrb	r3, [r2, #12]
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	7313      	strb	r3, [r2, #12]
		// Set the message ready flag if the end of line character has been received
		if ((ring.buffer[ring.idxOut -1] == '\r') || (ring.buffer[ring.idxOut -1] == '\n'))
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_UART_RxCpltCallback+0x84>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_UART_RxCpltCallback+0x84>)
 8000f68:	88db      	ldrh	r3, [r3, #6]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b0d      	cmp	r3, #13
 8000f72:	d008      	beq.n	8000f86 <HAL_UART_RxCpltCallback+0x5a>
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_UART_RxCpltCallback+0x84>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_UART_RxCpltCallback+0x84>)
 8000f7a:	88db      	ldrh	r3, [r3, #6]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b0a      	cmp	r3, #10
 8000f84:	d104      	bne.n	8000f90 <HAL_UART_RxCpltCallback+0x64>
			ring.flag.MessageReady = 1;
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_UART_RxCpltCallback+0x84>)
 8000f88:	7b13      	ldrb	r3, [r2, #12]
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	7313      	strb	r3, [r2, #12]
		// Receive the next character from UART in non blocking mode
		HAL_UART_Receive_IT(&huart2,&ring.buffer[ring.idxOut],1);
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <HAL_UART_RxCpltCallback+0x84>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_UART_RxCpltCallback+0x84>)
 8000f96:	88d2      	ldrh	r2, [r2, #6]
 8000f98:	4413      	add	r3, r2
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <HAL_UART_RxCpltCallback+0x80>)
 8000fa0:	f002 fe74 	bl	8003c8c <HAL_UART_Receive_IT>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000188 	.word	0x20000188
 8000fb0:	200001cc 	.word	0x200001cc

08000fb4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN1_Pin)
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fc4:	d106      	bne.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x20>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000fc6:	2028      	movs	r0, #40	; 0x28
 8000fc8:	f000 fcf5 	bl	80019b6 <HAL_NVIC_DisableIRQ>
		//flag_irq = 1;
		//time_irq = HAL_GetTick();
		SetPTimer(3, 200);
 8000fcc:	21c8      	movs	r1, #200	; 0xc8
 8000fce:	2003      	movs	r0, #3
 8000fd0:	f7ff faf2 	bl	80005b8 <SetPTimer>
		if (flag_btn > 7) flag_btn = 0;
		__HAL_GPIO_EXTI_CLEAR_IT(BTN1_Pin);
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);*/
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		PTimer();
 8000fec:	f7ff fb36 	bl	800065c <PTimer>
	}
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000140 	.word	0x20000140

08000ffc <Command_read>:

uint8_t Command_read(char str)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 12;
 8001006:	230c      	movs	r3, #12
 8001008:	73fb      	strb	r3, [r7, #15]
	switch(str)
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	3b30      	subs	r3, #48	; 0x30
 800100e:	2b3c      	cmp	r3, #60	; 0x3c
 8001010:	f200 80a5 	bhi.w	800115e <Command_read+0x162>
 8001014:	a201      	add	r2, pc, #4	; (adr r2, 800101c <Command_read+0x20>)
 8001016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101a:	bf00      	nop
 800101c:	08001123 	.word	0x08001123
 8001020:	08001129 	.word	0x08001129
 8001024:	0800112f 	.word	0x0800112f
 8001028:	08001135 	.word	0x08001135
 800102c:	0800113b 	.word	0x0800113b
 8001030:	08001141 	.word	0x08001141
 8001034:	08001147 	.word	0x08001147
 8001038:	0800114d 	.word	0x0800114d
 800103c:	08001153 	.word	0x08001153
 8001040:	08001159 	.word	0x08001159
 8001044:	0800115f 	.word	0x0800115f
 8001048:	0800115f 	.word	0x0800115f
 800104c:	0800115f 	.word	0x0800115f
 8001050:	0800111d 	.word	0x0800111d
 8001054:	0800115f 	.word	0x0800115f
 8001058:	0800115f 	.word	0x0800115f
 800105c:	0800115f 	.word	0x0800115f
 8001060:	0800115f 	.word	0x0800115f
 8001064:	0800115f 	.word	0x0800115f
 8001068:	0800115f 	.word	0x0800115f
 800106c:	0800115f 	.word	0x0800115f
 8001070:	0800115f 	.word	0x0800115f
 8001074:	0800115f 	.word	0x0800115f
 8001078:	0800115f 	.word	0x0800115f
 800107c:	0800115f 	.word	0x0800115f
 8001080:	0800115f 	.word	0x0800115f
 8001084:	0800115f 	.word	0x0800115f
 8001088:	0800115f 	.word	0x0800115f
 800108c:	08001111 	.word	0x08001111
 8001090:	0800115f 	.word	0x0800115f
 8001094:	0800115f 	.word	0x0800115f
 8001098:	0800115f 	.word	0x0800115f
 800109c:	0800115f 	.word	0x0800115f
 80010a0:	0800115f 	.word	0x0800115f
 80010a4:	0800115f 	.word	0x0800115f
 80010a8:	0800115f 	.word	0x0800115f
 80010ac:	0800115f 	.word	0x0800115f
 80010b0:	0800115f 	.word	0x0800115f
 80010b4:	0800115f 	.word	0x0800115f
 80010b8:	0800115f 	.word	0x0800115f
 80010bc:	0800115f 	.word	0x0800115f
 80010c0:	0800115f 	.word	0x0800115f
 80010c4:	0800115f 	.word	0x0800115f
 80010c8:	0800115f 	.word	0x0800115f
 80010cc:	0800115f 	.word	0x0800115f
 80010d0:	0800115f 	.word	0x0800115f
 80010d4:	0800115f 	.word	0x0800115f
 80010d8:	0800115f 	.word	0x0800115f
 80010dc:	0800115f 	.word	0x0800115f
 80010e0:	0800115f 	.word	0x0800115f
 80010e4:	0800115f 	.word	0x0800115f
 80010e8:	0800115f 	.word	0x0800115f
 80010ec:	0800115f 	.word	0x0800115f
 80010f0:	0800115f 	.word	0x0800115f
 80010f4:	0800115f 	.word	0x0800115f
 80010f8:	0800115f 	.word	0x0800115f
 80010fc:	0800115f 	.word	0x0800115f
 8001100:	0800115f 	.word	0x0800115f
 8001104:	0800115f 	.word	0x0800115f
 8001108:	0800115f 	.word	0x0800115f
 800110c:	08001117 	.word	0x08001117
	{
		case 'L':	ret = 11; break;
 8001110:	230b      	movs	r3, #11
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e023      	b.n	800115e <Command_read+0x162>
		case 'l':	ret = 11; break;
 8001116:	230b      	movs	r3, #11
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	e020      	b.n	800115e <Command_read+0x162>
		case '=':	ret = 10; break;
 800111c:	230a      	movs	r3, #10
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e01d      	b.n	800115e <Command_read+0x162>
		case '0':	ret = 0; break;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e01a      	b.n	800115e <Command_read+0x162>
		case '1':	ret = 1; break;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e017      	b.n	800115e <Command_read+0x162>
		case '2':	ret = 2; break;
 800112e:	2302      	movs	r3, #2
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	e014      	b.n	800115e <Command_read+0x162>
		case '3':	ret = 3; break;
 8001134:	2303      	movs	r3, #3
 8001136:	73fb      	strb	r3, [r7, #15]
 8001138:	e011      	b.n	800115e <Command_read+0x162>
		case '4':	ret = 4; break;
 800113a:	2304      	movs	r3, #4
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e00e      	b.n	800115e <Command_read+0x162>
		case '5':	ret = 5; break;
 8001140:	2305      	movs	r3, #5
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e00b      	b.n	800115e <Command_read+0x162>
		case '6':	ret = 6; break;
 8001146:	2306      	movs	r3, #6
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e008      	b.n	800115e <Command_read+0x162>
		case '7':	ret = 7; break;
 800114c:	2307      	movs	r3, #7
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e005      	b.n	800115e <Command_read+0x162>
		case '8':	ret = 8; break;
 8001152:	2308      	movs	r3, #8
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e002      	b.n	800115e <Command_read+0x162>
		case '9':	ret = 9; break;
 8001158:	2309      	movs	r3, #9
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	bf00      	nop
	}
	return ret;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>

08001176 <RING_Init>:
@param uint8_t *buf − Указатель на буфер хранения.
@param uint16_t size − Сколько элементов в буфере.
@return RING_ErrorStatus_t Результат инициализации @ref RING_ErrorStatus_t
 */
RING_ErrorStatus_t RING_Init(RING_buffer_t *ring, uint8_t *buf, uint16_t size)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	4613      	mov	r3, r2
 8001182:	80fb      	strh	r3, [r7, #6]
    ring->size = size;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	88fa      	ldrh	r2, [r7, #6]
 8001188:	811a      	strh	r2, [r3, #8]
    ring->buffer = buf;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	601a      	str	r2, [r3, #0]
    RING_Clear( ring );
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 f80b 	bl	80011ac <RING_Clear>

    return ( ring->buffer ? RING_SUCCESS : RING_ERROR ) ;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	bf14      	ite	ne
 800119e:	2301      	movne	r3, #1
 80011a0:	2300      	moveq	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <RING_Clear>:
/**
@function RING_Clear − Очищает буфер.
@param RING_buffer_t *buf − Указатель на кольцевой буфер.
 */
void RING_Clear(RING_buffer_t* buf)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    buf->idxIn = 0;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	809a      	strh	r2, [r3, #4]
    buf->idxOut = 0;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	80da      	strh	r2, [r3, #6]
	buf->flag.BufferOverrun = 0;
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	7b13      	ldrb	r3, [r2, #12]
 80011c4:	f36f 0341 	bfc	r3, #1, #1
 80011c8:	7313      	strb	r3, [r2, #12]
	buf->flag.MessageReady = 0;
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	7b13      	ldrb	r3, [r2, #12]
 80011ce:	f36f 0300 	bfc	r3, #0, #1
 80011d2:	7313      	strb	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <RING_Put>:
@function RING_Put − Загружает элемент в буфер.
@param uint8_t symbol − Элемент для загрузки в буфер.
@param RING_buffer_t *buf − Указатель на кольцевой буфер.
 */
void RING_Put(uint8_t symbol, RING_buffer_t* buf)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
    buf->buffer[buf->idxOut++] = symbol;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	88db      	ldrh	r3, [r3, #6]
 80011f4:	1c59      	adds	r1, r3, #1
 80011f6:	b288      	uxth	r0, r1
 80011f8:	6839      	ldr	r1, [r7, #0]
 80011fa:	80c8      	strh	r0, [r1, #6]
 80011fc:	4413      	add	r3, r2
 80011fe:	79fa      	ldrb	r2, [r7, #7]
 8001200:	701a      	strb	r2, [r3, #0]
    if (buf->idxOut >= buf->size) buf->idxOut = 0;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	88da      	ldrh	r2, [r3, #6]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	891b      	ldrh	r3, [r3, #8]
 800120a:	429a      	cmp	r2, r3
 800120c:	d302      	bcc.n	8001214 <RING_Put+0x34>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	2200      	movs	r2, #0
 8001212:	80da      	strh	r2, [r3, #6]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <RING_Pop>:
@function RING_Pop − Получает из буфера байт.
@param RING_buffer_t *buf − Указатель на кольцевой буфер.
@return uint8_t Значение полученого элемента.
 */
uint8_t RING_Pop(RING_buffer_t *buf)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    uint8_t retval = buf->buffer[buf->idxIn++];
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	889b      	ldrh	r3, [r3, #4]
 8001230:	1c59      	adds	r1, r3, #1
 8001232:	b288      	uxth	r0, r1
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	8088      	strh	r0, [r1, #4]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	73fb      	strb	r3, [r7, #15]
    if (buf->idxIn >= buf->size) buf->idxIn = 0;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	889a      	ldrh	r2, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	891b      	ldrh	r3, [r3, #8]
 8001246:	429a      	cmp	r2, r3
 8001248:	d302      	bcc.n	8001250 <RING_Pop+0x30>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	809a      	strh	r2, [r3, #4]
    return retval;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <Ring_GetMessage>:
@function Ring_GetMessage − Reads full message from the ring buffer and clears appropriate flags.
@param RING_buffer_t *ringbuf − Указатель на кольцевой буфер.
@param uint8_t *string − Указатель на строчку.
 */
uint8_t Ring_GetMessage(RING_buffer_t *ringbuf, uint8_t * string)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
	uint16_t char_count = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	81fb      	strh	r3, [r7, #14]
	// Check if the message has been received
	if (ringbuf->flag.MessageReady)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7b1b      	ldrb	r3, [r3, #12]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d049      	beq.n	800130e <Ring_GetMessage+0xb0>
		{
			if (ringbuf->flag.BufferOverrun)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7b1b      	ldrb	r3, [r3, #12]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d016      	beq.n	80012b6 <Ring_GetMessage+0x58>
				{
				ringbuf->idxIn = ringbuf->idxOut;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	88da      	ldrh	r2, [r3, #6]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	809a      	strh	r2, [r3, #4]
				ringbuf->flag.BufferOverrun = 0;
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	7b13      	ldrb	r3, [r2, #12]
 8001294:	f36f 0341 	bfc	r3, #1, #1
 8001298:	7313      	strb	r3, [r2, #12]
				}
			while ((ringbuf->buffer[ringbuf->idxIn] != '\r') &&
 800129a:	e00c      	b.n	80012b6 <Ring_GetMessage+0x58>
						 (ringbuf->buffer[ringbuf->idxIn] != '\n') &&
						 (ringbuf->size != char_count - 1))
				{
					*string =  RING_Pop(ringbuf);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ffbf 	bl	8001220 <RING_Pop>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	701a      	strb	r2, [r3, #0]
					string++;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	603b      	str	r3, [r7, #0]
					char_count++;
 80012b0:	89fb      	ldrh	r3, [r7, #14]
 80012b2:	3301      	adds	r3, #1
 80012b4:	81fb      	strh	r3, [r7, #14]
			while ((ringbuf->buffer[ringbuf->idxIn] != '\r') &&
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	8892      	ldrh	r2, [r2, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b0d      	cmp	r3, #13
 80012c4:	d00e      	beq.n	80012e4 <Ring_GetMessage+0x86>
						 (ringbuf->buffer[ringbuf->idxIn] != '\n') &&
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	8892      	ldrh	r2, [r2, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
			while ((ringbuf->buffer[ringbuf->idxIn] != '\r') &&
 80012d2:	2b0a      	cmp	r3, #10
 80012d4:	d006      	beq.n	80012e4 <Ring_GetMessage+0x86>
						 (ringbuf->size != char_count - 1))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	891b      	ldrh	r3, [r3, #8]
 80012da:	461a      	mov	r2, r3
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	3b01      	subs	r3, #1
						 (ringbuf->buffer[ringbuf->idxIn] != '\n') &&
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d1db      	bne.n	800129c <Ring_GetMessage+0x3e>
				}
			*string =  RING_Pop(ringbuf);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff9b 	bl	8001220 <RING_Pop>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	701a      	strb	r2, [r3, #0]
			string++;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	603b      	str	r3, [r7, #0]
			char_count++;
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	3301      	adds	r3, #1
 80012fc:	81fb      	strh	r3, [r7, #14]
			*string = '\0';
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
			ringbuf->flag.MessageReady = 0;
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	7b13      	ldrb	r3, [r2, #12]
 8001308:	f36f 0300 	bfc	r3, #0, #1
 800130c:	7313      	strb	r3, [r2, #12]
		}
	return char_count;
 800130e:	89fb      	ldrh	r3, [r7, #14]
 8001310:	b2db      	uxtb	r3, r3
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <HAL_MspInit+0x4c>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_MspInit+0x4c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_MspInit+0x4c>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_MspInit+0x4c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135a:	2007      	movs	r0, #7
 800135c:	f000 faf6 	bl	800194c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d10d      	bne.n	800139a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_TIM_PWM_MspInit+0x40>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <HAL_TIM_PWM_MspInit+0x40>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <HAL_TIM_PWM_MspInit+0x40>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40010000 	.word	0x40010000
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c0:	d115      	bne.n	80013ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_TIM_Base_MspInit+0x48>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_TIM_Base_MspInit+0x48>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_TIM_Base_MspInit+0x48>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	201c      	movs	r0, #28
 80013e4:	f000 fabd 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013e8:	201c      	movs	r0, #28
 80013ea:	f000 fad6 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_TIM_MspPostInit+0x68>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d11e      	bne.n	800145c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_TIM_MspPostInit+0x6c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_TIM_MspPostInit+0x6c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_TIM_MspPostInit+0x6c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800143a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800143e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800144c:	2301      	movs	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4619      	mov	r1, r3
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_TIM_MspPostInit+0x70>)
 8001458:	f000 fb5a 	bl	8001b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40010000 	.word	0x40010000
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <HAL_UART_MspInit+0x94>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d133      	bne.n	80014fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <HAL_UART_MspInit+0x98>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <HAL_UART_MspInit+0x98>)
 800149c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_UART_MspInit+0x98>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_UART_MspInit+0x98>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <HAL_UART_MspInit+0x98>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_UART_MspInit+0x98>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ca:	230c      	movs	r3, #12
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014da:	2307      	movs	r3, #7
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <HAL_UART_MspInit+0x9c>)
 80014e6:	f000 fb13 	bl	8001b10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2026      	movs	r0, #38	; 0x26
 80014f0:	f000 fa37 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014f4:	2026      	movs	r0, #38	; 0x26
 80014f6:	f000 fa50 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	; 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40004400 	.word	0x40004400
 8001508:	40023800 	.word	0x40023800
 800150c:	40020000 	.word	0x40020000

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <NMI_Handler+0x4>

08001516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <HardFault_Handler+0x4>

0800151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <MemManage_Handler+0x4>

08001522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler+0x4>

08001528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <UsageFault_Handler+0x4>

0800152e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f000 f8e2 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <TIM2_IRQHandler+0x10>)
 800156a:	f001 fbbf 	bl	8002cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000140 	.word	0x20000140

08001578 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <USART2_IRQHandler+0x10>)
 800157e:	f002 fbb5 	bl	8003cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000188 	.word	0x20000188

0800158c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8001590:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001594:	f000 fc50 	bl	8001e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f003 fa46 	bl	8004a5c <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20020000 	.word	0x20020000
 80015fc:	00000400 	.word	0x00000400
 8001600:	200000dc 	.word	0x200000dc
 8001604:	200001f0 	.word	0x200001f0

08001608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001656:	f7ff ffd7 	bl	8001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f003 fa05 	bl	8004a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7ff f887 	bl	8000770 <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001670:	08005fa4 	.word	0x08005fa4
  ldr r2, =_sbss
 8001674:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001678:	200001f0 	.word	0x200001f0

0800167c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>
	...

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <HAL_Init+0x40>)
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_Init+0x40>)
 8001696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_Init+0x40>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f94f 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 f808 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff fe32 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023c00 	.word	0x40023c00

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f975 	bl	80019d2 <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 f92f 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000044 	.word	0x20000044
 800171c:	2000004c 	.word	0x2000004c
 8001720:	20000048 	.word	0x20000048

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	2000004c 	.word	0x2000004c
 8001748:	200001dc 	.word	0x200001dc

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	200001dc 	.word	0x200001dc

08001764 <__NVIC_SetPriorityGrouping>:
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_DisableIRQ>:
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db12      	blt.n	800183c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	490a      	ldr	r1, [pc, #40]	; (8001848 <__NVIC_DisableIRQ+0x44>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	3320      	adds	r3, #32
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001830:	f3bf 8f4f 	dsb	sy
}
 8001834:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001836:	f3bf 8f6f 	isb	sy
}
 800183a:	bf00      	nop
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff05 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff1a 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff0d 	bl	80017c8 <__NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff1d 	bl	8001804 <__NVIC_DisableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ff94 	bl	8001908 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019f8:	f7ff fea8 	bl	800174c <HAL_GetTick>
 80019fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d008      	beq.n	8001a1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e052      	b.n	8001ac2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0216 	bic.w	r2, r2, #22
 8001a2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d103      	bne.n	8001a4c <HAL_DMA_Abort+0x62>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d007      	beq.n	8001a5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0208 	bic.w	r2, r2, #8
 8001a5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6c:	e013      	b.n	8001a96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a6e:	f7ff fe6d 	bl	800174c <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d90c      	bls.n	8001a96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2203      	movs	r2, #3
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e015      	b.n	8001ac2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e4      	bne.n	8001a6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa8:	223f      	movs	r2, #63	; 0x3f
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d004      	beq.n	8001ae8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e00c      	b.n	8001b02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2205      	movs	r2, #5
 8001aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	e165      	b.n	8001df8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	f040 8154 	bne.w	8001df2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d005      	beq.n	8001b62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d130      	bne.n	8001bc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b98:	2201      	movs	r2, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 0201 	and.w	r2, r3, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d017      	beq.n	8001c00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d123      	bne.n	8001c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	08da      	lsrs	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3208      	adds	r2, #8
 8001c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3208      	adds	r2, #8
 8001c4e:	69b9      	ldr	r1, [r7, #24]
 8001c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0203 	and.w	r2, r3, #3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80ae 	beq.w	8001df2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_GPIO_Init+0x300>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	4a5c      	ldr	r2, [pc, #368]	; (8001e10 <HAL_GPIO_Init+0x300>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	; (8001e10 <HAL_GPIO_Init+0x300>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb2:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <HAL_GPIO_Init+0x304>)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	220f      	movs	r2, #15
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4f      	ldr	r2, [pc, #316]	; (8001e18 <HAL_GPIO_Init+0x308>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d025      	beq.n	8001d2a <HAL_GPIO_Init+0x21a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4e      	ldr	r2, [pc, #312]	; (8001e1c <HAL_GPIO_Init+0x30c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d01f      	beq.n	8001d26 <HAL_GPIO_Init+0x216>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4d      	ldr	r2, [pc, #308]	; (8001e20 <HAL_GPIO_Init+0x310>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d019      	beq.n	8001d22 <HAL_GPIO_Init+0x212>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4c      	ldr	r2, [pc, #304]	; (8001e24 <HAL_GPIO_Init+0x314>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <HAL_GPIO_Init+0x20e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4b      	ldr	r2, [pc, #300]	; (8001e28 <HAL_GPIO_Init+0x318>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00d      	beq.n	8001d1a <HAL_GPIO_Init+0x20a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4a      	ldr	r2, [pc, #296]	; (8001e2c <HAL_GPIO_Init+0x31c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d007      	beq.n	8001d16 <HAL_GPIO_Init+0x206>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a49      	ldr	r2, [pc, #292]	; (8001e30 <HAL_GPIO_Init+0x320>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_GPIO_Init+0x202>
 8001d0e:	2306      	movs	r3, #6
 8001d10:	e00c      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d12:	2307      	movs	r3, #7
 8001d14:	e00a      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d16:	2305      	movs	r3, #5
 8001d18:	e008      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e004      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f002 0203 	and.w	r2, r2, #3
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	4093      	lsls	r3, r2
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d3c:	4935      	ldr	r1, [pc, #212]	; (8001e14 <HAL_GPIO_Init+0x304>)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <HAL_GPIO_Init+0x324>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d6e:	4a31      	ldr	r2, [pc, #196]	; (8001e34 <HAL_GPIO_Init+0x324>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d74:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <HAL_GPIO_Init+0x324>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d98:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <HAL_GPIO_Init+0x324>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9e:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <HAL_GPIO_Init+0x324>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <HAL_GPIO_Init+0x324>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_GPIO_Init+0x324>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dec:	4a11      	ldr	r2, [pc, #68]	; (8001e34 <HAL_GPIO_Init+0x324>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	f67f ae96 	bls.w	8001b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3724      	adds	r7, #36	; 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40013800 	.word	0x40013800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020c00 	.word	0x40020c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40021400 	.word	0x40021400
 8001e30:	40021800 	.word	0x40021800
 8001e34:	40013c00 	.word	0x40013c00

08001e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f8ac 	bl	8000fb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0cc      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b68      	ldr	r3, [pc, #416]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d90c      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b65      	ldr	r3, [pc, #404]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b63      	ldr	r3, [pc, #396]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0b8      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ebc:	4b59      	ldr	r3, [pc, #356]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a58      	ldr	r2, [pc, #352]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed4:	4b53      	ldr	r3, [pc, #332]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4b50      	ldr	r3, [pc, #320]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	494d      	ldr	r1, [pc, #308]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d044      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d119      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e07f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d003      	beq.n	8001f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f26:	4b3f      	ldr	r3, [pc, #252]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e06f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e067      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f46:	4b37      	ldr	r3, [pc, #220]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f023 0203 	bic.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4934      	ldr	r1, [pc, #208]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f58:	f7ff fbf8 	bl	800174c <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7ff fbf4 	bl	800174c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e04f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 020c 	and.w	r2, r3, #12
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1eb      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d20c      	bcs.n	8001fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e032      	b.n	8002016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4916      	ldr	r1, [pc, #88]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	490e      	ldr	r1, [pc, #56]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fee:	f000 f855 	bl	800209c <HAL_RCC_GetSysClockFreq>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	490a      	ldr	r1, [pc, #40]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	5ccb      	ldrb	r3, [r1, r3]
 8002002:	fa22 f303 	lsr.w	r3, r2, r3
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fb58 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023c00 	.word	0x40023c00
 8002024:	40023800 	.word	0x40023800
 8002028:	08005dcc 	.word	0x08005dcc
 800202c:	20000044 	.word	0x20000044
 8002030:	20000048 	.word	0x20000048

08002034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_RCC_GetHCLKFreq+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000044 	.word	0x20000044

0800204c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002050:	f7ff fff0 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0a9b      	lsrs	r3, r3, #10
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	4903      	ldr	r1, [pc, #12]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002062:	5ccb      	ldrb	r3, [r1, r3]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	08005ddc 	.word	0x08005ddc

08002074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002078:	f7ff ffdc 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	0b5b      	lsrs	r3, r3, #13
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	4903      	ldr	r1, [pc, #12]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	08005ddc 	.word	0x08005ddc

0800209c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800209c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a0:	b088      	sub	sp, #32
 80020a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b8:	4bce      	ldr	r3, [pc, #824]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x358>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b0c      	cmp	r3, #12
 80020c2:	f200 818d 	bhi.w	80023e0 <HAL_RCC_GetSysClockFreq+0x344>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <HAL_RCC_GetSysClockFreq+0x30>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	08002101 	.word	0x08002101
 80020d0:	080023e1 	.word	0x080023e1
 80020d4:	080023e1 	.word	0x080023e1
 80020d8:	080023e1 	.word	0x080023e1
 80020dc:	08002107 	.word	0x08002107
 80020e0:	080023e1 	.word	0x080023e1
 80020e4:	080023e1 	.word	0x080023e1
 80020e8:	080023e1 	.word	0x080023e1
 80020ec:	0800210d 	.word	0x0800210d
 80020f0:	080023e1 	.word	0x080023e1
 80020f4:	080023e1 	.word	0x080023e1
 80020f8:	080023e1 	.word	0x080023e1
 80020fc:	08002281 	.word	0x08002281
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4bbd      	ldr	r3, [pc, #756]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002102:	61bb      	str	r3, [r7, #24]
       break;
 8002104:	e16f      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002106:	4bbd      	ldr	r3, [pc, #756]	; (80023fc <HAL_RCC_GetSysClockFreq+0x360>)
 8002108:	61bb      	str	r3, [r7, #24]
      break;
 800210a:	e16c      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800210c:	4bb9      	ldr	r3, [pc, #740]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002114:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002116:	4bb7      	ldr	r3, [pc, #732]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d053      	beq.n	80021ca <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002122:	4bb4      	ldr	r3, [pc, #720]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	461a      	mov	r2, r3
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002132:	f04f 0100 	mov.w	r1, #0
 8002136:	ea02 0400 	and.w	r4, r2, r0
 800213a:	603c      	str	r4, [r7, #0]
 800213c:	400b      	ands	r3, r1
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002144:	4620      	mov	r0, r4
 8002146:	4629      	mov	r1, r5
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	014b      	lsls	r3, r1, #5
 8002152:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002156:	0142      	lsls	r2, r0, #5
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	4623      	mov	r3, r4
 800215e:	1ac0      	subs	r0, r0, r3
 8002160:	462b      	mov	r3, r5
 8002162:	eb61 0103 	sbc.w	r1, r1, r3
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	018b      	lsls	r3, r1, #6
 8002170:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002174:	0182      	lsls	r2, r0, #6
 8002176:	1a12      	subs	r2, r2, r0
 8002178:	eb63 0301 	sbc.w	r3, r3, r1
 800217c:	f04f 0000 	mov.w	r0, #0
 8002180:	f04f 0100 	mov.w	r1, #0
 8002184:	00d9      	lsls	r1, r3, #3
 8002186:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800218a:	00d0      	lsls	r0, r2, #3
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4621      	mov	r1, r4
 8002192:	1852      	adds	r2, r2, r1
 8002194:	4629      	mov	r1, r5
 8002196:	eb43 0101 	adc.w	r1, r3, r1
 800219a:	460b      	mov	r3, r1
 800219c:	f04f 0000 	mov.w	r0, #0
 80021a0:	f04f 0100 	mov.w	r1, #0
 80021a4:	0259      	lsls	r1, r3, #9
 80021a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80021aa:	0250      	lsls	r0, r2, #9
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	461a      	mov	r2, r3
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	f7fe f880 	bl	80002c0 <__aeabi_uldivmod>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4613      	mov	r3, r2
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	e04c      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ca:	4b8a      	ldr	r3, [pc, #552]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x358>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	099b      	lsrs	r3, r3, #6
 80021d0:	461a      	mov	r2, r3
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021da:	f04f 0100 	mov.w	r1, #0
 80021de:	ea02 0a00 	and.w	sl, r2, r0
 80021e2:	ea03 0b01 	and.w	fp, r3, r1
 80021e6:	4650      	mov	r0, sl
 80021e8:	4659      	mov	r1, fp
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	014b      	lsls	r3, r1, #5
 80021f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021f8:	0142      	lsls	r2, r0, #5
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	ebb0 000a 	subs.w	r0, r0, sl
 8002202:	eb61 010b 	sbc.w	r1, r1, fp
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	018b      	lsls	r3, r1, #6
 8002210:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002214:	0182      	lsls	r2, r0, #6
 8002216:	1a12      	subs	r2, r2, r0
 8002218:	eb63 0301 	sbc.w	r3, r3, r1
 800221c:	f04f 0000 	mov.w	r0, #0
 8002220:	f04f 0100 	mov.w	r1, #0
 8002224:	00d9      	lsls	r1, r3, #3
 8002226:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800222a:	00d0      	lsls	r0, r2, #3
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	eb12 020a 	adds.w	r2, r2, sl
 8002234:	eb43 030b 	adc.w	r3, r3, fp
 8002238:	f04f 0000 	mov.w	r0, #0
 800223c:	f04f 0100 	mov.w	r1, #0
 8002240:	0299      	lsls	r1, r3, #10
 8002242:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002246:	0290      	lsls	r0, r2, #10
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	461a      	mov	r2, r3
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	f7fe f832 	bl	80002c0 <__aeabi_uldivmod>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4613      	mov	r3, r2
 8002262:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002264:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	3301      	adds	r3, #1
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	61bb      	str	r3, [r7, #24]
      break;
 800227e:	e0b2      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002280:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002288:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800228a:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d04d      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002296:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	461a      	mov	r2, r3
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022a6:	f04f 0100 	mov.w	r1, #0
 80022aa:	ea02 0800 	and.w	r8, r2, r0
 80022ae:	ea03 0901 	and.w	r9, r3, r1
 80022b2:	4640      	mov	r0, r8
 80022b4:	4649      	mov	r1, r9
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	014b      	lsls	r3, r1, #5
 80022c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022c4:	0142      	lsls	r2, r0, #5
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	ebb0 0008 	subs.w	r0, r0, r8
 80022ce:	eb61 0109 	sbc.w	r1, r1, r9
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	018b      	lsls	r3, r1, #6
 80022dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022e0:	0182      	lsls	r2, r0, #6
 80022e2:	1a12      	subs	r2, r2, r0
 80022e4:	eb63 0301 	sbc.w	r3, r3, r1
 80022e8:	f04f 0000 	mov.w	r0, #0
 80022ec:	f04f 0100 	mov.w	r1, #0
 80022f0:	00d9      	lsls	r1, r3, #3
 80022f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022f6:	00d0      	lsls	r0, r2, #3
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	eb12 0208 	adds.w	r2, r2, r8
 8002300:	eb43 0309 	adc.w	r3, r3, r9
 8002304:	f04f 0000 	mov.w	r0, #0
 8002308:	f04f 0100 	mov.w	r1, #0
 800230c:	0259      	lsls	r1, r3, #9
 800230e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002312:	0250      	lsls	r0, r2, #9
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	461a      	mov	r2, r3
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	f7fd ffcc 	bl	80002c0 <__aeabi_uldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4613      	mov	r3, r2
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	e04a      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	461a      	mov	r2, r3
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002342:	f04f 0100 	mov.w	r1, #0
 8002346:	ea02 0400 	and.w	r4, r2, r0
 800234a:	ea03 0501 	and.w	r5, r3, r1
 800234e:	4620      	mov	r0, r4
 8002350:	4629      	mov	r1, r5
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	014b      	lsls	r3, r1, #5
 800235c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002360:	0142      	lsls	r2, r0, #5
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	1b00      	subs	r0, r0, r4
 8002368:	eb61 0105 	sbc.w	r1, r1, r5
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	018b      	lsls	r3, r1, #6
 8002376:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800237a:	0182      	lsls	r2, r0, #6
 800237c:	1a12      	subs	r2, r2, r0
 800237e:	eb63 0301 	sbc.w	r3, r3, r1
 8002382:	f04f 0000 	mov.w	r0, #0
 8002386:	f04f 0100 	mov.w	r1, #0
 800238a:	00d9      	lsls	r1, r3, #3
 800238c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002390:	00d0      	lsls	r0, r2, #3
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	1912      	adds	r2, r2, r4
 8002398:	eb45 0303 	adc.w	r3, r5, r3
 800239c:	f04f 0000 	mov.w	r0, #0
 80023a0:	f04f 0100 	mov.w	r1, #0
 80023a4:	0299      	lsls	r1, r3, #10
 80023a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80023aa:	0290      	lsls	r0, r2, #10
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	f7fd ff80 	bl	80002c0 <__aeabi_uldivmod>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4613      	mov	r3, r2
 80023c6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x358>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	0f1b      	lsrs	r3, r3, #28
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	61bb      	str	r3, [r7, #24]
      break;
 80023de:	e002      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023e2:	61bb      	str	r3, [r7, #24]
      break;
 80023e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e6:	69bb      	ldr	r3, [r7, #24]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	00f42400 	.word	0x00f42400
 80023fc:	007a1200 	.word	0x007a1200

08002400 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e28d      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8083 	beq.w	8002526 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002420:	4b94      	ldr	r3, [pc, #592]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b04      	cmp	r3, #4
 800242a:	d019      	beq.n	8002460 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800242c:	4b91      	ldr	r3, [pc, #580]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002434:	2b08      	cmp	r3, #8
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002438:	4b8e      	ldr	r3, [pc, #568]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002444:	d00c      	beq.n	8002460 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b8b      	ldr	r3, [pc, #556]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d112      	bne.n	8002478 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b88      	ldr	r3, [pc, #544]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245e:	d10b      	bne.n	8002478 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	4b84      	ldr	r3, [pc, #528]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d05b      	beq.n	8002524 <HAL_RCC_OscConfig+0x124>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d157      	bne.n	8002524 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e25a      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d106      	bne.n	8002490 <HAL_RCC_OscConfig+0x90>
 8002482:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7b      	ldr	r2, [pc, #492]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0xcc>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0xb4>
 800249a:	4b76      	ldr	r3, [pc, #472]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a75      	ldr	r2, [pc, #468]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b73      	ldr	r3, [pc, #460]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a72      	ldr	r2, [pc, #456]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0xcc>
 80024b4:	4b6f      	ldr	r3, [pc, #444]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a6e      	ldr	r2, [pc, #440]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b6c      	ldr	r3, [pc, #432]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6b      	ldr	r2, [pc, #428]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7ff f93a 	bl	800174c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff f936 	bl	800174c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e21f      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b61      	ldr	r3, [pc, #388]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0xdc>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7ff f926 	bl	800174c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff f922 	bl	800174c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e20b      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	4b57      	ldr	r3, [pc, #348]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x104>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d06f      	beq.n	8002612 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002532:	4b50      	ldr	r3, [pc, #320]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b00      	cmp	r3, #0
 800253c:	d017      	beq.n	800256e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800253e:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002546:	2b08      	cmp	r3, #8
 8002548:	d105      	bne.n	8002556 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b44      	ldr	r3, [pc, #272]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x186>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1d3      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4937      	ldr	r1, [pc, #220]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b34      	ldr	r3, [pc, #208]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7ff f8cf 	bl	800174c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff f8cb 	bl	800174c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1b4      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b28      	ldr	r3, [pc, #160]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4925      	ldr	r1, [pc, #148]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff f8ae 	bl	800174c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff f8aa 	bl	800174c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e193      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d036      	beq.n	800268c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_RCC_OscConfig+0x27c>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7ff f88e 	bl	800174c <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff f88a 	bl	800174c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e173      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x234>
 8002652:	e01b      	b.n	800268c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_RCC_OscConfig+0x27c>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7ff f877 	bl	800174c <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	e00e      	b.n	8002680 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002662:	f7ff f873 	bl	800174c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d907      	bls.n	8002680 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e15c      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
 8002674:	40023800 	.word	0x40023800
 8002678:	42470000 	.word	0x42470000
 800267c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	4b8a      	ldr	r3, [pc, #552]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ea      	bne.n	8002662 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8097 	beq.w	80027c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269e:	4b83      	ldr	r3, [pc, #524]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10f      	bne.n	80026ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	4b7f      	ldr	r3, [pc, #508]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a7e      	ldr	r2, [pc, #504]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b7c      	ldr	r3, [pc, #496]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b79      	ldr	r3, [pc, #484]	; (80028b0 <HAL_RCC_OscConfig+0x4b0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x4b0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <HAL_RCC_OscConfig+0x4b0>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e2:	f7ff f833 	bl	800174c <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ea:	f7ff f82f 	bl	800174c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e118      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	4b6c      	ldr	r3, [pc, #432]	; (80028b0 <HAL_RCC_OscConfig+0x4b0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x31e>
 8002710:	4b66      	ldr	r3, [pc, #408]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a65      	ldr	r2, [pc, #404]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
 800271c:	e01c      	b.n	8002758 <HAL_RCC_OscConfig+0x358>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b05      	cmp	r3, #5
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x340>
 8002726:	4b61      	ldr	r3, [pc, #388]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a60      	ldr	r2, [pc, #384]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	4b5e      	ldr	r3, [pc, #376]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a5d      	ldr	r2, [pc, #372]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0x358>
 8002740:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a59      	ldr	r2, [pc, #356]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
 800274c:	4b57      	ldr	r3, [pc, #348]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a56      	ldr	r2, [pc, #344]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002752:	f023 0304 	bic.w	r3, r3, #4
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe fff4 	bl	800174c <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	e00a      	b.n	800277e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7fe fff0 	bl	800174c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0d7      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277e:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ee      	beq.n	8002768 <HAL_RCC_OscConfig+0x368>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7fe ffde 	bl	800174c <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7fe ffda 	bl	800174c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0c1      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027aa:	4b40      	ldr	r3, [pc, #256]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ee      	bne.n	8002794 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027bc:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	4a3a      	ldr	r2, [pc, #232]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80027c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80ad 	beq.w	800292c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d2:	4b36      	ldr	r3, [pc, #216]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d060      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d145      	bne.n	8002872 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <HAL_RCC_OscConfig+0x4b4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe ffae 	bl	800174c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe ffaa 	bl	800174c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e093      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	3b01      	subs	r3, #1
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	071b      	lsls	r3, r3, #28
 800283e:	491b      	ldr	r1, [pc, #108]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x4b4>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fe ff7f 	bl	800174c <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe ff7b 	bl	800174c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e064      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x452>
 8002870:	e05c      	b.n	800292c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_RCC_OscConfig+0x4b4>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe ff68 	bl	800174c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe ff64 	bl	800174c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e04d      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x480>
 800289e:	e045      	b.n	800292c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e040      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40007000 	.word	0x40007000
 80028b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <HAL_RCC_OscConfig+0x538>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d030      	beq.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d129      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d122      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d119      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	3b01      	subs	r3, #1
 8002902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d10f      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d107      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e041      	b.n	80029d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fd24 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3304      	adds	r3, #4
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f000 fc70 	bl	8003260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d001      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e04e      	b.n	8002a92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a23      	ldr	r2, [pc, #140]	; (8002aa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d022      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1e:	d01d      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1f      	ldr	r2, [pc, #124]	; (8002aa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d018      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d013      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1c      	ldr	r2, [pc, #112]	; (8002aac <HAL_TIM_Base_Start_IT+0xd0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00e      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d009      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a19      	ldr	r2, [pc, #100]	; (8002ab4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x80>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d111      	bne.n	8002a80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d010      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7e:	e007      	b.n	8002a90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800
 8002aac:	40000c00 	.word	0x40000c00
 8002ab0:	40010400 	.word	0x40010400
 8002ab4:	40014000 	.word	0x40014000
 8002ab8:	40001800 	.word	0x40001800

08002abc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e041      	b.n	8002b52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe fc42 	bl	800136c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f000 fbb0 	bl	8003260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_TIM_PWM_Start+0x24>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e022      	b.n	8002bc6 <HAL_TIM_PWM_Start+0x6a>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d109      	bne.n	8002b9a <HAL_TIM_PWM_Start+0x3e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e015      	b.n	8002bc6 <HAL_TIM_PWM_Start+0x6a>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d109      	bne.n	8002bb4 <HAL_TIM_PWM_Start+0x58>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e008      	b.n	8002bc6 <HAL_TIM_PWM_Start+0x6a>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e07c      	b.n	8002cc8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d104      	bne.n	8002bde <HAL_TIM_PWM_Start+0x82>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bdc:	e013      	b.n	8002c06 <HAL_TIM_PWM_Start+0xaa>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d104      	bne.n	8002bee <HAL_TIM_PWM_Start+0x92>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bec:	e00b      	b.n	8002c06 <HAL_TIM_PWM_Start+0xaa>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d104      	bne.n	8002bfe <HAL_TIM_PWM_Start+0xa2>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bfc:	e003      	b.n	8002c06 <HAL_TIM_PWM_Start+0xaa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	6839      	ldr	r1, [r7, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fe10 	bl	8003834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2d      	ldr	r2, [pc, #180]	; (8002cd0 <HAL_TIM_PWM_Start+0x174>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <HAL_TIM_PWM_Start+0xcc>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <HAL_TIM_PWM_Start+0x178>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_TIM_PWM_Start+0xd0>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_TIM_PWM_Start+0xd2>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <HAL_TIM_PWM_Start+0x174>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x136>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c54:	d01d      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x136>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <HAL_TIM_PWM_Start+0x17c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x136>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <HAL_TIM_PWM_Start+0x180>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x136>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <HAL_TIM_PWM_Start+0x184>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x136>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <HAL_TIM_PWM_Start+0x178>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x136>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <HAL_TIM_PWM_Start+0x188>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x136>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <HAL_TIM_PWM_Start+0x18c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d111      	bne.n	8002cb6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b06      	cmp	r3, #6
 8002ca2:	d010      	beq.n	8002cc6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb4:	e007      	b.n	8002cc6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0201 	orr.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40010000 	.word	0x40010000
 8002cd4:	40010400 	.word	0x40010400
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40000800 	.word	0x40000800
 8002ce0:	40000c00 	.word	0x40000c00
 8002ce4:	40014000 	.word	0x40014000
 8002ce8:	40001800 	.word	0x40001800

08002cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d122      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d11b      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0202 	mvn.w	r2, #2
 8002d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fa77 	bl	8003222 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa69 	bl	800320e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fa7a 	bl	8003236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d122      	bne.n	8002d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d11b      	bne.n	8002d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0204 	mvn.w	r2, #4
 8002d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2202      	movs	r2, #2
 8002d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa4d 	bl	8003222 <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa3f 	bl	800320e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fa50 	bl	8003236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d122      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d11b      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0208 	mvn.w	r2, #8
 8002dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa23 	bl	8003222 <HAL_TIM_IC_CaptureCallback>
 8002ddc:	e005      	b.n	8002dea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fa15 	bl	800320e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fa26 	bl	8003236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	d122      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d11b      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0210 	mvn.w	r2, #16
 8002e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f9f9 	bl	8003222 <HAL_TIM_IC_CaptureCallback>
 8002e30:	e005      	b.n	8002e3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f9eb 	bl	800320e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f9fc 	bl	8003236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0201 	mvn.w	r2, #1
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe f8b6 	bl	8000fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	2b80      	cmp	r3, #128	; 0x80
 8002e7c:	d10e      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e88:	2b80      	cmp	r3, #128	; 0x80
 8002e8a:	d107      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fdca 	bl	8003a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d107      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f9c1 	bl	800324a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d107      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0220 	mvn.w	r2, #32
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fd94 	bl	8003a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e0ae      	b.n	8003078 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b0c      	cmp	r3, #12
 8002f26:	f200 809f 	bhi.w	8003068 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f2a:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	08002f65 	.word	0x08002f65
 8002f34:	08003069 	.word	0x08003069
 8002f38:	08003069 	.word	0x08003069
 8002f3c:	08003069 	.word	0x08003069
 8002f40:	08002fa5 	.word	0x08002fa5
 8002f44:	08003069 	.word	0x08003069
 8002f48:	08003069 	.word	0x08003069
 8002f4c:	08003069 	.word	0x08003069
 8002f50:	08002fe7 	.word	0x08002fe7
 8002f54:	08003069 	.word	0x08003069
 8002f58:	08003069 	.word	0x08003069
 8002f5c:	08003069 	.word	0x08003069
 8002f60:	08003027 	.word	0x08003027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fa18 	bl	80033a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0208 	orr.w	r2, r2, #8
 8002f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0204 	bic.w	r2, r2, #4
 8002f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6999      	ldr	r1, [r3, #24]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	619a      	str	r2, [r3, #24]
      break;
 8002fa2:	e064      	b.n	800306e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fa68 	bl	8003480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6999      	ldr	r1, [r3, #24]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	021a      	lsls	r2, r3, #8
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	619a      	str	r2, [r3, #24]
      break;
 8002fe4:	e043      	b.n	800306e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fabd 	bl	800356c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0208 	orr.w	r2, r2, #8
 8003000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69da      	ldr	r2, [r3, #28]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0204 	bic.w	r2, r2, #4
 8003010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69d9      	ldr	r1, [r3, #28]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	61da      	str	r2, [r3, #28]
      break;
 8003024:	e023      	b.n	800306e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fb11 	bl	8003654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69d9      	ldr	r1, [r3, #28]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	021a      	lsls	r2, r3, #8
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	61da      	str	r2, [r3, #28]
      break;
 8003066:	e002      	b.n	800306e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	75fb      	strb	r3, [r7, #23]
      break;
 800306c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003076:	7dfb      	ldrb	r3, [r7, #23]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_TIM_ConfigClockSource+0x1c>
 8003098:	2302      	movs	r3, #2
 800309a:	e0b4      	b.n	8003206 <HAL_TIM_ConfigClockSource+0x186>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d4:	d03e      	beq.n	8003154 <HAL_TIM_ConfigClockSource+0xd4>
 80030d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030da:	f200 8087 	bhi.w	80031ec <HAL_TIM_ConfigClockSource+0x16c>
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	f000 8086 	beq.w	80031f2 <HAL_TIM_ConfigClockSource+0x172>
 80030e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ea:	d87f      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b70      	cmp	r3, #112	; 0x70
 80030ee:	d01a      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0xa6>
 80030f0:	2b70      	cmp	r3, #112	; 0x70
 80030f2:	d87b      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b60      	cmp	r3, #96	; 0x60
 80030f6:	d050      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x11a>
 80030f8:	2b60      	cmp	r3, #96	; 0x60
 80030fa:	d877      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b50      	cmp	r3, #80	; 0x50
 80030fe:	d03c      	beq.n	800317a <HAL_TIM_ConfigClockSource+0xfa>
 8003100:	2b50      	cmp	r3, #80	; 0x50
 8003102:	d873      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b40      	cmp	r3, #64	; 0x40
 8003106:	d058      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x13a>
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d86f      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b30      	cmp	r3, #48	; 0x30
 800310e:	d064      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x15a>
 8003110:	2b30      	cmp	r3, #48	; 0x30
 8003112:	d86b      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b20      	cmp	r3, #32
 8003116:	d060      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x15a>
 8003118:	2b20      	cmp	r3, #32
 800311a:	d867      	bhi.n	80031ec <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d05c      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x15a>
 8003120:	2b10      	cmp	r3, #16
 8003122:	d05a      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x15a>
 8003124:	e062      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6899      	ldr	r1, [r3, #8]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f000 fb5d 	bl	80037f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	609a      	str	r2, [r3, #8]
      break;
 8003152:	e04f      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6899      	ldr	r1, [r3, #8]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f000 fb46 	bl	80037f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003176:	609a      	str	r2, [r3, #8]
      break;
 8003178:	e03c      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	461a      	mov	r2, r3
 8003188:	f000 faba 	bl	8003700 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2150      	movs	r1, #80	; 0x50
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fb13 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 8003198:	e02c      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f000 fad9 	bl	800375e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2160      	movs	r1, #96	; 0x60
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fb03 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 80031b8:	e01c      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f000 fa9a 	bl	8003700 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2140      	movs	r1, #64	; 0x40
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 faf3 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 80031d8:	e00c      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4619      	mov	r1, r3
 80031e4:	4610      	mov	r0, r2
 80031e6:	f000 faea 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 80031ea:	e003      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      break;
 80031f0:	e000      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a40      	ldr	r2, [pc, #256]	; (8003374 <TIM_Base_SetConfig+0x114>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327e:	d00f      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a3d      	ldr	r2, [pc, #244]	; (8003378 <TIM_Base_SetConfig+0x118>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00b      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a3c      	ldr	r2, [pc, #240]	; (800337c <TIM_Base_SetConfig+0x11c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d007      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3b      	ldr	r2, [pc, #236]	; (8003380 <TIM_Base_SetConfig+0x120>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d003      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3a      	ldr	r2, [pc, #232]	; (8003384 <TIM_Base_SetConfig+0x124>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d108      	bne.n	80032b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2f      	ldr	r2, [pc, #188]	; (8003374 <TIM_Base_SetConfig+0x114>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d02b      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c0:	d027      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2c      	ldr	r2, [pc, #176]	; (8003378 <TIM_Base_SetConfig+0x118>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d023      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2b      	ldr	r2, [pc, #172]	; (800337c <TIM_Base_SetConfig+0x11c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01f      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a2a      	ldr	r2, [pc, #168]	; (8003380 <TIM_Base_SetConfig+0x120>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01b      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a29      	ldr	r2, [pc, #164]	; (8003384 <TIM_Base_SetConfig+0x124>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d017      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a28      	ldr	r2, [pc, #160]	; (8003388 <TIM_Base_SetConfig+0x128>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a27      	ldr	r2, [pc, #156]	; (800338c <TIM_Base_SetConfig+0x12c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00f      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a26      	ldr	r2, [pc, #152]	; (8003390 <TIM_Base_SetConfig+0x130>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00b      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a25      	ldr	r2, [pc, #148]	; (8003394 <TIM_Base_SetConfig+0x134>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a24      	ldr	r2, [pc, #144]	; (8003398 <TIM_Base_SetConfig+0x138>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a23      	ldr	r2, [pc, #140]	; (800339c <TIM_Base_SetConfig+0x13c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d108      	bne.n	8003324 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <TIM_Base_SetConfig+0x114>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_Base_SetConfig+0xf8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a0c      	ldr	r2, [pc, #48]	; (8003384 <TIM_Base_SetConfig+0x124>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d103      	bne.n	8003360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	615a      	str	r2, [r3, #20]
}
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40010400 	.word	0x40010400
 8003388:	40014000 	.word	0x40014000
 800338c:	40014400 	.word	0x40014400
 8003390:	40014800 	.word	0x40014800
 8003394:	40001800 	.word	0x40001800
 8003398:	40001c00 	.word	0x40001c00
 800339c:	40002000 	.word	0x40002000

080033a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0303 	bic.w	r3, r3, #3
 80033d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 0302 	bic.w	r3, r3, #2
 80033e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a20      	ldr	r2, [pc, #128]	; (8003478 <TIM_OC1_SetConfig+0xd8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d003      	beq.n	8003404 <TIM_OC1_SetConfig+0x64>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <TIM_OC1_SetConfig+0xdc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10c      	bne.n	800341e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0308 	bic.w	r3, r3, #8
 800340a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f023 0304 	bic.w	r3, r3, #4
 800341c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a15      	ldr	r2, [pc, #84]	; (8003478 <TIM_OC1_SetConfig+0xd8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d003      	beq.n	800342e <TIM_OC1_SetConfig+0x8e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a14      	ldr	r2, [pc, #80]	; (800347c <TIM_OC1_SetConfig+0xdc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d111      	bne.n	8003452 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800343c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	621a      	str	r2, [r3, #32]
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	40010000 	.word	0x40010000
 800347c:	40010400 	.word	0x40010400

08003480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f023 0210 	bic.w	r2, r3, #16
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f023 0320 	bic.w	r3, r3, #32
 80034ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a22      	ldr	r2, [pc, #136]	; (8003564 <TIM_OC2_SetConfig+0xe4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d003      	beq.n	80034e8 <TIM_OC2_SetConfig+0x68>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a21      	ldr	r2, [pc, #132]	; (8003568 <TIM_OC2_SetConfig+0xe8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d10d      	bne.n	8003504 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a17      	ldr	r2, [pc, #92]	; (8003564 <TIM_OC2_SetConfig+0xe4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d003      	beq.n	8003514 <TIM_OC2_SetConfig+0x94>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a16      	ldr	r2, [pc, #88]	; (8003568 <TIM_OC2_SetConfig+0xe8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d113      	bne.n	800353c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800351a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	621a      	str	r2, [r3, #32]
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40010000 	.word	0x40010000
 8003568:	40010400 	.word	0x40010400

0800356c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a21      	ldr	r2, [pc, #132]	; (800364c <TIM_OC3_SetConfig+0xe0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d003      	beq.n	80035d2 <TIM_OC3_SetConfig+0x66>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a20      	ldr	r2, [pc, #128]	; (8003650 <TIM_OC3_SetConfig+0xe4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d10d      	bne.n	80035ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a16      	ldr	r2, [pc, #88]	; (800364c <TIM_OC3_SetConfig+0xe0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d003      	beq.n	80035fe <TIM_OC3_SetConfig+0x92>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a15      	ldr	r2, [pc, #84]	; (8003650 <TIM_OC3_SetConfig+0xe4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d113      	bne.n	8003626 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800360c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	621a      	str	r2, [r3, #32]
}
 8003640:	bf00      	nop
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	40010000 	.word	0x40010000
 8003650:	40010400 	.word	0x40010400

08003654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800369e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	031b      	lsls	r3, r3, #12
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <TIM_OC4_SetConfig+0xa4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <TIM_OC4_SetConfig+0x68>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a11      	ldr	r2, [pc, #68]	; (80036fc <TIM_OC4_SetConfig+0xa8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d109      	bne.n	80036d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	019b      	lsls	r3, r3, #6
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40010400 	.word	0x40010400

08003700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0201 	bic.w	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f023 030a 	bic.w	r3, r3, #10
 800373c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800375e:	b480      	push	{r7}
 8003760:	b087      	sub	sp, #28
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f023 0210 	bic.w	r2, r3, #16
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	031b      	lsls	r3, r3, #12
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800379a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	621a      	str	r2, [r3, #32]
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	f043 0307 	orr.w	r3, r3, #7
 80037e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800380e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	021a      	lsls	r2, r3, #8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	431a      	orrs	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	609a      	str	r2, [r3, #8]
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	2201      	movs	r2, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a1a      	ldr	r2, [r3, #32]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	43db      	mvns	r3, r3
 8003856:	401a      	ands	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a1a      	ldr	r2, [r3, #32]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	fa01 f303 	lsl.w	r3, r1, r3
 800386c:	431a      	orrs	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003894:	2302      	movs	r3, #2
 8003896:	e05a      	b.n	800394e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a21      	ldr	r2, [pc, #132]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d01d      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d018      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a18      	ldr	r2, [pc, #96]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a17      	ldr	r2, [pc, #92]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a15      	ldr	r2, [pc, #84]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d10c      	bne.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	4313      	orrs	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40010000 	.word	0x40010000
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800
 8003968:	40000c00 	.word	0x40000c00
 800396c:	40010400 	.word	0x40010400
 8003970:	40014000 	.word	0x40014000
 8003974:	40001800 	.word	0x40001800

08003978 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003990:	2302      	movs	r3, #2
 8003992:	e03d      	b.n	8003a10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e03f      	b.n	8003ad6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd fd00 	bl	8001470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	; 0x24
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fe1f 	bl	80046cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b08a      	sub	sp, #40	; 0x28
 8003ae2:	af02      	add	r7, sp, #8
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d17c      	bne.n	8003bf8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_UART_Transmit+0x2c>
 8003b04:	88fb      	ldrh	r3, [r7, #6]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e075      	b.n	8003bfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_UART_Transmit+0x3e>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e06e      	b.n	8003bfa <HAL_UART_Transmit+0x11c>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2221      	movs	r2, #33	; 0x21
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b32:	f7fd fe0b 	bl	800174c <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4c:	d108      	bne.n	8003b60 <HAL_UART_Transmit+0x82>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e003      	b.n	8003b68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b70:	e02a      	b.n	8003bc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2180      	movs	r1, #128	; 0x80
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fb63 	bl	8004248 <UART_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e036      	b.n	8003bfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10b      	bne.n	8003baa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	e007      	b.n	8003bba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1cf      	bne.n	8003b72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2140      	movs	r1, #64	; 0x40
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fb33 	bl	8004248 <UART_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e006      	b.n	8003bfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	e000      	b.n	8003bfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bf8:	2302      	movs	r3, #2
  }
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d130      	bne.n	8003c7e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_UART_Transmit_IT+0x26>
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e029      	b.n	8003c80 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_UART_Transmit_IT+0x38>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e022      	b.n	8003c80 <HAL_UART_Transmit_IT+0x7e>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2221      	movs	r2, #33	; 0x21
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c78:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003c7e:	2302      	movs	r3, #2
  }
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	4613      	mov	r3, r2
 8003c98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d11d      	bne.n	8003ce2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_UART_Receive_IT+0x26>
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e016      	b.n	8003ce4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UART_Receive_IT+0x38>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e00f      	b.n	8003ce4 <HAL_UART_Receive_IT+0x58>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fb23 	bl	8004324 <UART_Start_Receive_IT>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	e000      	b.n	8003ce4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
  }
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b0ba      	sub	sp, #232	; 0xe8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <HAL_UART_IRQHandler+0x66>
 8003d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fc03 	bl	8004556 <UART_Receive_IT>
      return;
 8003d50:	e256      	b.n	8004200 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80de 	beq.w	8003f18 <HAL_UART_IRQHandler+0x22c>
 8003d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80d1 	beq.w	8003f18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_UART_IRQHandler+0xae>
 8003d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_UART_IRQHandler+0xd2>
 8003da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f043 0202 	orr.w	r2, r3, #2
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_UART_IRQHandler+0xf6>
 8003dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f043 0204 	orr.w	r2, r3, #4
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d011      	beq.n	8003e12 <HAL_UART_IRQHandler+0x126>
 8003dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d105      	bne.n	8003e06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f043 0208 	orr.w	r2, r3, #8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 81ed 	beq.w	80041f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_UART_IRQHandler+0x14e>
 8003e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fb8e 	bl	8004556 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	2b40      	cmp	r3, #64	; 0x40
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d103      	bne.n	8003e66 <HAL_UART_IRQHandler+0x17a>
 8003e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d04f      	beq.n	8003f06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa96 	bl	8004398 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d141      	bne.n	8003efe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3314      	adds	r3, #20
 8003e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3314      	adds	r3, #20
 8003ea2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ea6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1d9      	bne.n	8003e7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d013      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	4a7d      	ldr	r2, [pc, #500]	; (80040c8 <HAL_UART_IRQHandler+0x3dc>)
 8003ed4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fd fdf5 	bl	8001aca <HAL_DMA_Abort_IT>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	e00e      	b.n	8003f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f990 	bl	800421c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efc:	e00a      	b.n	8003f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f98c 	bl	800421c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	e006      	b.n	8003f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f988 	bl	800421c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f12:	e170      	b.n	80041f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	bf00      	nop
    return;
 8003f16:	e16e      	b.n	80041f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	f040 814a 	bne.w	80041b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 8143 	beq.w	80041b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 813c 	beq.w	80041b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	f040 80b4 	bne.w	80040cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8140 	beq.w	80041fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f82:	429a      	cmp	r2, r3
 8003f84:	f080 8139 	bcs.w	80041fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9a:	f000 8088 	beq.w	80040ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1d9      	bne.n	8003f9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3314      	adds	r3, #20
 8003ff0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800400e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004012:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004016:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e1      	bne.n	8003fea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3314      	adds	r3, #20
 800402c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800403c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3314      	adds	r3, #20
 8004046:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800404a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800404c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004050:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1e3      	bne.n	8004026 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800407c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407e:	f023 0310 	bic.w	r3, r3, #16
 8004082:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004090:	65ba      	str	r2, [r7, #88]	; 0x58
 8004092:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004096:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800409e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e3      	bne.n	800406c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fd fc9e 	bl	80019ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8b6 	bl	8004230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040c4:	e099      	b.n	80041fa <HAL_UART_IRQHandler+0x50e>
 80040c6:	bf00      	nop
 80040c8:	0800445f 	.word	0x0800445f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 808b 	beq.w	80041fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8086 	beq.w	80041fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004108:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004116:	647a      	str	r2, [r7, #68]	; 0x44
 8004118:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800411c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e3      	bne.n	80040f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3314      	adds	r3, #20
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	623b      	str	r3, [r7, #32]
   return(result);
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3314      	adds	r3, #20
 800414a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800414e:	633a      	str	r2, [r7, #48]	; 0x30
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e3      	bne.n	800412a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	330c      	adds	r3, #12
 8004176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0310 	bic.w	r3, r3, #16
 8004186:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004194:	61fa      	str	r2, [r7, #28]
 8004196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	69b9      	ldr	r1, [r7, #24]
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	617b      	str	r3, [r7, #20]
   return(result);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e3      	bne.n	8004170 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041ac:	4619      	mov	r1, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f83e 	bl	8004230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041b4:	e023      	b.n	80041fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <HAL_UART_IRQHandler+0x4ea>
 80041c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f959 	bl	8004486 <UART_Transmit_IT>
    return;
 80041d4:	e014      	b.n	8004200 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00e      	beq.n	8004200 <HAL_UART_IRQHandler+0x514>
 80041e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f999 	bl	8004526 <UART_EndTransmit_IT>
    return;
 80041f4:	e004      	b.n	8004200 <HAL_UART_IRQHandler+0x514>
    return;
 80041f6:	bf00      	nop
 80041f8:	e002      	b.n	8004200 <HAL_UART_IRQHandler+0x514>
      return;
 80041fa:	bf00      	nop
 80041fc:	e000      	b.n	8004200 <HAL_UART_IRQHandler+0x514>
      return;
 80041fe:	bf00      	nop
  }
}
 8004200:	37e8      	adds	r7, #232	; 0xe8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop

08004208 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b090      	sub	sp, #64	; 0x40
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004258:	e050      	b.n	80042fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d04c      	beq.n	80042fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <UART_WaitOnFlagUntilTimeout+0x30>
 8004268:	f7fd fa70 	bl	800174c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004274:	429a      	cmp	r2, r3
 8004276:	d241      	bcs.n	80042fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004298:	637a      	str	r2, [r7, #52]	; 0x34
 800429a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800429e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3314      	adds	r3, #20
 80042b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	613b      	str	r3, [r7, #16]
   return(result);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3314      	adds	r3, #20
 80042ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042cc:	623a      	str	r2, [r7, #32]
 80042ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	69f9      	ldr	r1, [r7, #28]
 80042d2:	6a3a      	ldr	r2, [r7, #32]
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e5      	bne.n	80042ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e00f      	b.n	800431c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4013      	ands	r3, r2
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	429a      	cmp	r2, r3
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	429a      	cmp	r2, r3
 8004318:	d09f      	beq.n	800425a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3740      	adds	r7, #64	; 0x40
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	4613      	mov	r3, r2
 8004330:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	88fa      	ldrh	r2, [r7, #6]
 8004342:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2222      	movs	r2, #34	; 0x22
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004368:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0220 	orr.w	r2, r2, #32
 8004388:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b095      	sub	sp, #84	; 0x54
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	330c      	adds	r3, #12
 80043a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043c0:	643a      	str	r2, [r7, #64]	; 0x40
 80043c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e5      	bne.n	80043a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3314      	adds	r3, #20
 80043da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f023 0301 	bic.w	r3, r3, #1
 80043ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3314      	adds	r3, #20
 80043f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e5      	bne.n	80043d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	2b01      	cmp	r3, #1
 800440e:	d119      	bne.n	8004444 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f023 0310 	bic.w	r3, r3, #16
 8004426:	647b      	str	r3, [r7, #68]	; 0x44
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004430:	61ba      	str	r2, [r7, #24]
 8004432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6979      	ldr	r1, [r7, #20]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	613b      	str	r3, [r7, #16]
   return(result);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004452:	bf00      	nop
 8004454:	3754      	adds	r7, #84	; 0x54
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff fecf 	bl	800421c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b21      	cmp	r3, #33	; 0x21
 8004498:	d13e      	bne.n	8004518 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a2:	d114      	bne.n	80044ce <UART_Transmit_IT+0x48>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d110      	bne.n	80044ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	1c9a      	adds	r2, r3, #2
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	621a      	str	r2, [r3, #32]
 80044cc:	e008      	b.n	80044e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	1c59      	adds	r1, r3, #1
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6211      	str	r1, [r2, #32]
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	4619      	mov	r1, r3
 80044ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10f      	bne.n	8004514 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004502:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004512:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff fe5e 	bl	8004208 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b08c      	sub	sp, #48	; 0x30
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b22      	cmp	r3, #34	; 0x22
 8004568:	f040 80ab 	bne.w	80046c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004574:	d117      	bne.n	80045a6 <UART_Receive_IT+0x50>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d113      	bne.n	80045a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800457e:	2300      	movs	r3, #0
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004594:	b29a      	uxth	r2, r3
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	1c9a      	adds	r2, r3, #2
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
 80045a4:	e026      	b.n	80045f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b8:	d007      	beq.n	80045ca <UART_Receive_IT+0x74>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <UART_Receive_IT+0x82>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	e008      	b.n	80045ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4619      	mov	r1, r3
 8004602:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004604:	2b00      	cmp	r3, #0
 8004606:	d15a      	bne.n	80046be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0220 	bic.w	r2, r2, #32
 8004616:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004626:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	2b01      	cmp	r3, #1
 8004646:	d135      	bne.n	80046b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	613b      	str	r3, [r7, #16]
   return(result);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f023 0310 	bic.w	r3, r3, #16
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466e:	623a      	str	r2, [r7, #32]
 8004670:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	69f9      	ldr	r1, [r7, #28]
 8004674:	6a3a      	ldr	r2, [r7, #32]
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	61bb      	str	r3, [r7, #24]
   return(result);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e5      	bne.n	800464e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b10      	cmp	r3, #16
 800468e:	d10a      	bne.n	80046a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046aa:	4619      	mov	r1, r3
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff fdbf 	bl	8004230 <HAL_UARTEx_RxEventCallback>
 80046b2:	e002      	b.n	80046ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fc fc39 	bl	8000f2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e002      	b.n	80046c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3730      	adds	r7, #48	; 0x30
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d0:	b09f      	sub	sp, #124	; 0x7c
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e2:	68d9      	ldr	r1, [r3, #12]
 80046e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	ea40 0301 	orr.w	r3, r0, r1
 80046ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	4313      	orrs	r3, r2
 8004704:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004710:	f021 010c 	bic.w	r1, r1, #12
 8004714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800471a:	430b      	orrs	r3, r1
 800471c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800471e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472a:	6999      	ldr	r1, [r3, #24]
 800472c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	ea40 0301 	orr.w	r3, r0, r1
 8004734:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4bc5      	ldr	r3, [pc, #788]	; (8004a50 <UART_SetConfig+0x384>)
 800473c:	429a      	cmp	r2, r3
 800473e:	d004      	beq.n	800474a <UART_SetConfig+0x7e>
 8004740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4bc3      	ldr	r3, [pc, #780]	; (8004a54 <UART_SetConfig+0x388>)
 8004746:	429a      	cmp	r2, r3
 8004748:	d103      	bne.n	8004752 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800474a:	f7fd fc93 	bl	8002074 <HAL_RCC_GetPCLK2Freq>
 800474e:	6778      	str	r0, [r7, #116]	; 0x74
 8004750:	e002      	b.n	8004758 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004752:	f7fd fc7b 	bl	800204c <HAL_RCC_GetPCLK1Freq>
 8004756:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004760:	f040 80b6 	bne.w	80048d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004766:	461c      	mov	r4, r3
 8004768:	f04f 0500 	mov.w	r5, #0
 800476c:	4622      	mov	r2, r4
 800476e:	462b      	mov	r3, r5
 8004770:	1891      	adds	r1, r2, r2
 8004772:	6439      	str	r1, [r7, #64]	; 0x40
 8004774:	415b      	adcs	r3, r3
 8004776:	647b      	str	r3, [r7, #68]	; 0x44
 8004778:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800477c:	1912      	adds	r2, r2, r4
 800477e:	eb45 0303 	adc.w	r3, r5, r3
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f04f 0100 	mov.w	r1, #0
 800478a:	00d9      	lsls	r1, r3, #3
 800478c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004790:	00d0      	lsls	r0, r2, #3
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	1911      	adds	r1, r2, r4
 8004798:	6639      	str	r1, [r7, #96]	; 0x60
 800479a:	416b      	adcs	r3, r5
 800479c:	667b      	str	r3, [r7, #100]	; 0x64
 800479e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	1891      	adds	r1, r2, r2
 80047aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80047ac:	415b      	adcs	r3, r3
 80047ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80047b8:	f7fb fd82 	bl	80002c0 <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4ba5      	ldr	r3, [pc, #660]	; (8004a58 <UART_SetConfig+0x38c>)
 80047c2:	fba3 2302 	umull	r2, r3, r3, r2
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	011e      	lsls	r6, r3, #4
 80047ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047cc:	461c      	mov	r4, r3
 80047ce:	f04f 0500 	mov.w	r5, #0
 80047d2:	4622      	mov	r2, r4
 80047d4:	462b      	mov	r3, r5
 80047d6:	1891      	adds	r1, r2, r2
 80047d8:	6339      	str	r1, [r7, #48]	; 0x30
 80047da:	415b      	adcs	r3, r3
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
 80047de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047e2:	1912      	adds	r2, r2, r4
 80047e4:	eb45 0303 	adc.w	r3, r5, r3
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	00d9      	lsls	r1, r3, #3
 80047f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047f6:	00d0      	lsls	r0, r2, #3
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	1911      	adds	r1, r2, r4
 80047fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8004800:	416b      	adcs	r3, r5
 8004802:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	461a      	mov	r2, r3
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	1891      	adds	r1, r2, r2
 8004810:	62b9      	str	r1, [r7, #40]	; 0x28
 8004812:	415b      	adcs	r3, r3
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800481a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800481e:	f7fb fd4f 	bl	80002c0 <__aeabi_uldivmod>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4b8c      	ldr	r3, [pc, #560]	; (8004a58 <UART_SetConfig+0x38c>)
 8004828:	fba3 1302 	umull	r1, r3, r3, r2
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	2164      	movs	r1, #100	; 0x64
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	3332      	adds	r3, #50	; 0x32
 800483a:	4a87      	ldr	r2, [pc, #540]	; (8004a58 <UART_SetConfig+0x38c>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004848:	441e      	add	r6, r3
 800484a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800484c:	4618      	mov	r0, r3
 800484e:	f04f 0100 	mov.w	r1, #0
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	1894      	adds	r4, r2, r2
 8004858:	623c      	str	r4, [r7, #32]
 800485a:	415b      	adcs	r3, r3
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
 800485e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004862:	1812      	adds	r2, r2, r0
 8004864:	eb41 0303 	adc.w	r3, r1, r3
 8004868:	f04f 0400 	mov.w	r4, #0
 800486c:	f04f 0500 	mov.w	r5, #0
 8004870:	00dd      	lsls	r5, r3, #3
 8004872:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004876:	00d4      	lsls	r4, r2, #3
 8004878:	4622      	mov	r2, r4
 800487a:	462b      	mov	r3, r5
 800487c:	1814      	adds	r4, r2, r0
 800487e:	653c      	str	r4, [r7, #80]	; 0x50
 8004880:	414b      	adcs	r3, r1
 8004882:	657b      	str	r3, [r7, #84]	; 0x54
 8004884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	461a      	mov	r2, r3
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	1891      	adds	r1, r2, r2
 8004890:	61b9      	str	r1, [r7, #24]
 8004892:	415b      	adcs	r3, r3
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800489a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800489e:	f7fb fd0f 	bl	80002c0 <__aeabi_uldivmod>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4b6c      	ldr	r3, [pc, #432]	; (8004a58 <UART_SetConfig+0x38c>)
 80048a8:	fba3 1302 	umull	r1, r3, r3, r2
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	2164      	movs	r1, #100	; 0x64
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	3332      	adds	r3, #50	; 0x32
 80048ba:	4a67      	ldr	r2, [pc, #412]	; (8004a58 <UART_SetConfig+0x38c>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	f003 0207 	and.w	r2, r3, #7
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4432      	add	r2, r6
 80048cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048ce:	e0b9      	b.n	8004a44 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d2:	461c      	mov	r4, r3
 80048d4:	f04f 0500 	mov.w	r5, #0
 80048d8:	4622      	mov	r2, r4
 80048da:	462b      	mov	r3, r5
 80048dc:	1891      	adds	r1, r2, r2
 80048de:	6139      	str	r1, [r7, #16]
 80048e0:	415b      	adcs	r3, r3
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048e8:	1912      	adds	r2, r2, r4
 80048ea:	eb45 0303 	adc.w	r3, r5, r3
 80048ee:	f04f 0000 	mov.w	r0, #0
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	00d9      	lsls	r1, r3, #3
 80048f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048fc:	00d0      	lsls	r0, r2, #3
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	eb12 0804 	adds.w	r8, r2, r4
 8004906:	eb43 0905 	adc.w	r9, r3, r5
 800490a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4618      	mov	r0, r3
 8004910:	f04f 0100 	mov.w	r1, #0
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	008b      	lsls	r3, r1, #2
 800491e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004922:	0082      	lsls	r2, r0, #2
 8004924:	4640      	mov	r0, r8
 8004926:	4649      	mov	r1, r9
 8004928:	f7fb fcca 	bl	80002c0 <__aeabi_uldivmod>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4b49      	ldr	r3, [pc, #292]	; (8004a58 <UART_SetConfig+0x38c>)
 8004932:	fba3 2302 	umull	r2, r3, r3, r2
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	011e      	lsls	r6, r3, #4
 800493a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800493c:	4618      	mov	r0, r3
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	1894      	adds	r4, r2, r2
 8004948:	60bc      	str	r4, [r7, #8]
 800494a:	415b      	adcs	r3, r3
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004952:	1812      	adds	r2, r2, r0
 8004954:	eb41 0303 	adc.w	r3, r1, r3
 8004958:	f04f 0400 	mov.w	r4, #0
 800495c:	f04f 0500 	mov.w	r5, #0
 8004960:	00dd      	lsls	r5, r3, #3
 8004962:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004966:	00d4      	lsls	r4, r2, #3
 8004968:	4622      	mov	r2, r4
 800496a:	462b      	mov	r3, r5
 800496c:	1814      	adds	r4, r2, r0
 800496e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004970:	414b      	adcs	r3, r1
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	4618      	mov	r0, r3
 800497a:	f04f 0100 	mov.w	r1, #0
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	008b      	lsls	r3, r1, #2
 8004988:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800498c:	0082      	lsls	r2, r0, #2
 800498e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004992:	f7fb fc95 	bl	80002c0 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4b2f      	ldr	r3, [pc, #188]	; (8004a58 <UART_SetConfig+0x38c>)
 800499c:	fba3 1302 	umull	r1, r3, r3, r2
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	2164      	movs	r1, #100	; 0x64
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	3332      	adds	r3, #50	; 0x32
 80049ae:	4a2a      	ldr	r2, [pc, #168]	; (8004a58 <UART_SetConfig+0x38c>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ba:	441e      	add	r6, r3
 80049bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049be:	4618      	mov	r0, r3
 80049c0:	f04f 0100 	mov.w	r1, #0
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	1894      	adds	r4, r2, r2
 80049ca:	603c      	str	r4, [r7, #0]
 80049cc:	415b      	adcs	r3, r3
 80049ce:	607b      	str	r3, [r7, #4]
 80049d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049d4:	1812      	adds	r2, r2, r0
 80049d6:	eb41 0303 	adc.w	r3, r1, r3
 80049da:	f04f 0400 	mov.w	r4, #0
 80049de:	f04f 0500 	mov.w	r5, #0
 80049e2:	00dd      	lsls	r5, r3, #3
 80049e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049e8:	00d4      	lsls	r4, r2, #3
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	eb12 0a00 	adds.w	sl, r2, r0
 80049f2:	eb43 0b01 	adc.w	fp, r3, r1
 80049f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f04f 0100 	mov.w	r1, #0
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	008b      	lsls	r3, r1, #2
 8004a0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a0e:	0082      	lsls	r2, r0, #2
 8004a10:	4650      	mov	r0, sl
 8004a12:	4659      	mov	r1, fp
 8004a14:	f7fb fc54 	bl	80002c0 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <UART_SetConfig+0x38c>)
 8004a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	2164      	movs	r1, #100	; 0x64
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	3332      	adds	r3, #50	; 0x32
 8004a30:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <UART_SetConfig+0x38c>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	f003 020f 	and.w	r2, r3, #15
 8004a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4432      	add	r2, r6
 8004a42:	609a      	str	r2, [r3, #8]
}
 8004a44:	bf00      	nop
 8004a46:	377c      	adds	r7, #124	; 0x7c
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4e:	bf00      	nop
 8004a50:	40011000 	.word	0x40011000
 8004a54:	40011400 	.word	0x40011400
 8004a58:	51eb851f 	.word	0x51eb851f

08004a5c <__errno>:
 8004a5c:	4b01      	ldr	r3, [pc, #4]	; (8004a64 <__errno+0x8>)
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000050 	.word	0x20000050

08004a68 <__libc_init_array>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	4d0d      	ldr	r5, [pc, #52]	; (8004aa0 <__libc_init_array+0x38>)
 8004a6c:	4c0d      	ldr	r4, [pc, #52]	; (8004aa4 <__libc_init_array+0x3c>)
 8004a6e:	1b64      	subs	r4, r4, r5
 8004a70:	10a4      	asrs	r4, r4, #2
 8004a72:	2600      	movs	r6, #0
 8004a74:	42a6      	cmp	r6, r4
 8004a76:	d109      	bne.n	8004a8c <__libc_init_array+0x24>
 8004a78:	4d0b      	ldr	r5, [pc, #44]	; (8004aa8 <__libc_init_array+0x40>)
 8004a7a:	4c0c      	ldr	r4, [pc, #48]	; (8004aac <__libc_init_array+0x44>)
 8004a7c:	f001 f912 	bl	8005ca4 <_init>
 8004a80:	1b64      	subs	r4, r4, r5
 8004a82:	10a4      	asrs	r4, r4, #2
 8004a84:	2600      	movs	r6, #0
 8004a86:	42a6      	cmp	r6, r4
 8004a88:	d105      	bne.n	8004a96 <__libc_init_array+0x2e>
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a90:	4798      	blx	r3
 8004a92:	3601      	adds	r6, #1
 8004a94:	e7ee      	b.n	8004a74 <__libc_init_array+0xc>
 8004a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9a:	4798      	blx	r3
 8004a9c:	3601      	adds	r6, #1
 8004a9e:	e7f2      	b.n	8004a86 <__libc_init_array+0x1e>
 8004aa0:	08005f9c 	.word	0x08005f9c
 8004aa4:	08005f9c 	.word	0x08005f9c
 8004aa8:	08005f9c 	.word	0x08005f9c
 8004aac:	08005fa0 	.word	0x08005fa0

08004ab0 <memset>:
 8004ab0:	4402      	add	r2, r0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d100      	bne.n	8004aba <memset+0xa>
 8004ab8:	4770      	bx	lr
 8004aba:	f803 1b01 	strb.w	r1, [r3], #1
 8004abe:	e7f9      	b.n	8004ab4 <memset+0x4>

08004ac0 <siprintf>:
 8004ac0:	b40e      	push	{r1, r2, r3}
 8004ac2:	b500      	push	{lr}
 8004ac4:	b09c      	sub	sp, #112	; 0x70
 8004ac6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ac8:	9002      	str	r0, [sp, #8]
 8004aca:	9006      	str	r0, [sp, #24]
 8004acc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ad0:	4809      	ldr	r0, [pc, #36]	; (8004af8 <siprintf+0x38>)
 8004ad2:	9107      	str	r1, [sp, #28]
 8004ad4:	9104      	str	r1, [sp, #16]
 8004ad6:	4909      	ldr	r1, [pc, #36]	; (8004afc <siprintf+0x3c>)
 8004ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004adc:	9105      	str	r1, [sp, #20]
 8004ade:	6800      	ldr	r0, [r0, #0]
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	a902      	add	r1, sp, #8
 8004ae4:	f000 f896 	bl	8004c14 <_svfiprintf_r>
 8004ae8:	9b02      	ldr	r3, [sp, #8]
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	b01c      	add	sp, #112	; 0x70
 8004af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004af4:	b003      	add	sp, #12
 8004af6:	4770      	bx	lr
 8004af8:	20000050 	.word	0x20000050
 8004afc:	ffff0208 	.word	0xffff0208

08004b00 <siscanf>:
 8004b00:	b40e      	push	{r1, r2, r3}
 8004b02:	b510      	push	{r4, lr}
 8004b04:	b09f      	sub	sp, #124	; 0x7c
 8004b06:	ac21      	add	r4, sp, #132	; 0x84
 8004b08:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004b0c:	f854 2b04 	ldr.w	r2, [r4], #4
 8004b10:	9201      	str	r2, [sp, #4]
 8004b12:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004b16:	9004      	str	r0, [sp, #16]
 8004b18:	9008      	str	r0, [sp, #32]
 8004b1a:	f7fb fb79 	bl	8000210 <strlen>
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <siscanf+0x50>)
 8004b20:	9005      	str	r0, [sp, #20]
 8004b22:	9009      	str	r0, [sp, #36]	; 0x24
 8004b24:	930d      	str	r3, [sp, #52]	; 0x34
 8004b26:	480b      	ldr	r0, [pc, #44]	; (8004b54 <siscanf+0x54>)
 8004b28:	9a01      	ldr	r2, [sp, #4]
 8004b2a:	6800      	ldr	r0, [r0, #0]
 8004b2c:	9403      	str	r4, [sp, #12]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	9311      	str	r3, [sp, #68]	; 0x44
 8004b32:	9316      	str	r3, [sp, #88]	; 0x58
 8004b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b38:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004b3c:	a904      	add	r1, sp, #16
 8004b3e:	4623      	mov	r3, r4
 8004b40:	f000 f9c2 	bl	8004ec8 <__ssvfiscanf_r>
 8004b44:	b01f      	add	sp, #124	; 0x7c
 8004b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b4a:	b003      	add	sp, #12
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	08004b59 	.word	0x08004b59
 8004b54:	20000050 	.word	0x20000050

08004b58 <__seofread>:
 8004b58:	2000      	movs	r0, #0
 8004b5a:	4770      	bx	lr

08004b5c <__ssputs_r>:
 8004b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b60:	688e      	ldr	r6, [r1, #8]
 8004b62:	429e      	cmp	r6, r3
 8004b64:	4682      	mov	sl, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	4690      	mov	r8, r2
 8004b6a:	461f      	mov	r7, r3
 8004b6c:	d838      	bhi.n	8004be0 <__ssputs_r+0x84>
 8004b6e:	898a      	ldrh	r2, [r1, #12]
 8004b70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b74:	d032      	beq.n	8004bdc <__ssputs_r+0x80>
 8004b76:	6825      	ldr	r5, [r4, #0]
 8004b78:	6909      	ldr	r1, [r1, #16]
 8004b7a:	eba5 0901 	sub.w	r9, r5, r1
 8004b7e:	6965      	ldr	r5, [r4, #20]
 8004b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b88:	3301      	adds	r3, #1
 8004b8a:	444b      	add	r3, r9
 8004b8c:	106d      	asrs	r5, r5, #1
 8004b8e:	429d      	cmp	r5, r3
 8004b90:	bf38      	it	cc
 8004b92:	461d      	movcc	r5, r3
 8004b94:	0553      	lsls	r3, r2, #21
 8004b96:	d531      	bpl.n	8004bfc <__ssputs_r+0xa0>
 8004b98:	4629      	mov	r1, r5
 8004b9a:	f000 ffdf 	bl	8005b5c <_malloc_r>
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	b950      	cbnz	r0, 8004bb8 <__ssputs_r+0x5c>
 8004ba2:	230c      	movs	r3, #12
 8004ba4:	f8ca 3000 	str.w	r3, [sl]
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bae:	81a3      	strh	r3, [r4, #12]
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb8:	6921      	ldr	r1, [r4, #16]
 8004bba:	464a      	mov	r2, r9
 8004bbc:	f000 ff56 	bl	8005a6c <memcpy>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bca:	81a3      	strh	r3, [r4, #12]
 8004bcc:	6126      	str	r6, [r4, #16]
 8004bce:	6165      	str	r5, [r4, #20]
 8004bd0:	444e      	add	r6, r9
 8004bd2:	eba5 0509 	sub.w	r5, r5, r9
 8004bd6:	6026      	str	r6, [r4, #0]
 8004bd8:	60a5      	str	r5, [r4, #8]
 8004bda:	463e      	mov	r6, r7
 8004bdc:	42be      	cmp	r6, r7
 8004bde:	d900      	bls.n	8004be2 <__ssputs_r+0x86>
 8004be0:	463e      	mov	r6, r7
 8004be2:	4632      	mov	r2, r6
 8004be4:	6820      	ldr	r0, [r4, #0]
 8004be6:	4641      	mov	r1, r8
 8004be8:	f000 ff4e 	bl	8005a88 <memmove>
 8004bec:	68a3      	ldr	r3, [r4, #8]
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	1b9b      	subs	r3, r3, r6
 8004bf2:	4432      	add	r2, r6
 8004bf4:	60a3      	str	r3, [r4, #8]
 8004bf6:	6022      	str	r2, [r4, #0]
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	e7db      	b.n	8004bb4 <__ssputs_r+0x58>
 8004bfc:	462a      	mov	r2, r5
 8004bfe:	f001 f807 	bl	8005c10 <_realloc_r>
 8004c02:	4606      	mov	r6, r0
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d1e1      	bne.n	8004bcc <__ssputs_r+0x70>
 8004c08:	6921      	ldr	r1, [r4, #16]
 8004c0a:	4650      	mov	r0, sl
 8004c0c:	f000 ff56 	bl	8005abc <_free_r>
 8004c10:	e7c7      	b.n	8004ba2 <__ssputs_r+0x46>
	...

08004c14 <_svfiprintf_r>:
 8004c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c18:	4698      	mov	r8, r3
 8004c1a:	898b      	ldrh	r3, [r1, #12]
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	b09d      	sub	sp, #116	; 0x74
 8004c20:	4607      	mov	r7, r0
 8004c22:	460d      	mov	r5, r1
 8004c24:	4614      	mov	r4, r2
 8004c26:	d50e      	bpl.n	8004c46 <_svfiprintf_r+0x32>
 8004c28:	690b      	ldr	r3, [r1, #16]
 8004c2a:	b963      	cbnz	r3, 8004c46 <_svfiprintf_r+0x32>
 8004c2c:	2140      	movs	r1, #64	; 0x40
 8004c2e:	f000 ff95 	bl	8005b5c <_malloc_r>
 8004c32:	6028      	str	r0, [r5, #0]
 8004c34:	6128      	str	r0, [r5, #16]
 8004c36:	b920      	cbnz	r0, 8004c42 <_svfiprintf_r+0x2e>
 8004c38:	230c      	movs	r3, #12
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	e0d1      	b.n	8004de6 <_svfiprintf_r+0x1d2>
 8004c42:	2340      	movs	r3, #64	; 0x40
 8004c44:	616b      	str	r3, [r5, #20]
 8004c46:	2300      	movs	r3, #0
 8004c48:	9309      	str	r3, [sp, #36]	; 0x24
 8004c4a:	2320      	movs	r3, #32
 8004c4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c54:	2330      	movs	r3, #48	; 0x30
 8004c56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e00 <_svfiprintf_r+0x1ec>
 8004c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c5e:	f04f 0901 	mov.w	r9, #1
 8004c62:	4623      	mov	r3, r4
 8004c64:	469a      	mov	sl, r3
 8004c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c6a:	b10a      	cbz	r2, 8004c70 <_svfiprintf_r+0x5c>
 8004c6c:	2a25      	cmp	r2, #37	; 0x25
 8004c6e:	d1f9      	bne.n	8004c64 <_svfiprintf_r+0x50>
 8004c70:	ebba 0b04 	subs.w	fp, sl, r4
 8004c74:	d00b      	beq.n	8004c8e <_svfiprintf_r+0x7a>
 8004c76:	465b      	mov	r3, fp
 8004c78:	4622      	mov	r2, r4
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f7ff ff6d 	bl	8004b5c <__ssputs_r>
 8004c82:	3001      	adds	r0, #1
 8004c84:	f000 80aa 	beq.w	8004ddc <_svfiprintf_r+0x1c8>
 8004c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c8a:	445a      	add	r2, fp
 8004c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80a2 	beq.w	8004ddc <_svfiprintf_r+0x1c8>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ca2:	f10a 0a01 	add.w	sl, sl, #1
 8004ca6:	9304      	str	r3, [sp, #16]
 8004ca8:	9307      	str	r3, [sp, #28]
 8004caa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cae:	931a      	str	r3, [sp, #104]	; 0x68
 8004cb0:	4654      	mov	r4, sl
 8004cb2:	2205      	movs	r2, #5
 8004cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb8:	4851      	ldr	r0, [pc, #324]	; (8004e00 <_svfiprintf_r+0x1ec>)
 8004cba:	f7fb fab1 	bl	8000220 <memchr>
 8004cbe:	9a04      	ldr	r2, [sp, #16]
 8004cc0:	b9d8      	cbnz	r0, 8004cfa <_svfiprintf_r+0xe6>
 8004cc2:	06d0      	lsls	r0, r2, #27
 8004cc4:	bf44      	itt	mi
 8004cc6:	2320      	movmi	r3, #32
 8004cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ccc:	0711      	lsls	r1, r2, #28
 8004cce:	bf44      	itt	mi
 8004cd0:	232b      	movmi	r3, #43	; 0x2b
 8004cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cda:	2b2a      	cmp	r3, #42	; 0x2a
 8004cdc:	d015      	beq.n	8004d0a <_svfiprintf_r+0xf6>
 8004cde:	9a07      	ldr	r2, [sp, #28]
 8004ce0:	4654      	mov	r4, sl
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	f04f 0c0a 	mov.w	ip, #10
 8004ce8:	4621      	mov	r1, r4
 8004cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cee:	3b30      	subs	r3, #48	; 0x30
 8004cf0:	2b09      	cmp	r3, #9
 8004cf2:	d94e      	bls.n	8004d92 <_svfiprintf_r+0x17e>
 8004cf4:	b1b0      	cbz	r0, 8004d24 <_svfiprintf_r+0x110>
 8004cf6:	9207      	str	r2, [sp, #28]
 8004cf8:	e014      	b.n	8004d24 <_svfiprintf_r+0x110>
 8004cfa:	eba0 0308 	sub.w	r3, r0, r8
 8004cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8004d02:	4313      	orrs	r3, r2
 8004d04:	9304      	str	r3, [sp, #16]
 8004d06:	46a2      	mov	sl, r4
 8004d08:	e7d2      	b.n	8004cb0 <_svfiprintf_r+0x9c>
 8004d0a:	9b03      	ldr	r3, [sp, #12]
 8004d0c:	1d19      	adds	r1, r3, #4
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	9103      	str	r1, [sp, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bfbb      	ittet	lt
 8004d16:	425b      	neglt	r3, r3
 8004d18:	f042 0202 	orrlt.w	r2, r2, #2
 8004d1c:	9307      	strge	r3, [sp, #28]
 8004d1e:	9307      	strlt	r3, [sp, #28]
 8004d20:	bfb8      	it	lt
 8004d22:	9204      	strlt	r2, [sp, #16]
 8004d24:	7823      	ldrb	r3, [r4, #0]
 8004d26:	2b2e      	cmp	r3, #46	; 0x2e
 8004d28:	d10c      	bne.n	8004d44 <_svfiprintf_r+0x130>
 8004d2a:	7863      	ldrb	r3, [r4, #1]
 8004d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d2e:	d135      	bne.n	8004d9c <_svfiprintf_r+0x188>
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	1d1a      	adds	r2, r3, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	9203      	str	r2, [sp, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bfb8      	it	lt
 8004d3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d40:	3402      	adds	r4, #2
 8004d42:	9305      	str	r3, [sp, #20]
 8004d44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e10 <_svfiprintf_r+0x1fc>
 8004d48:	7821      	ldrb	r1, [r4, #0]
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	4650      	mov	r0, sl
 8004d4e:	f7fb fa67 	bl	8000220 <memchr>
 8004d52:	b140      	cbz	r0, 8004d66 <_svfiprintf_r+0x152>
 8004d54:	2340      	movs	r3, #64	; 0x40
 8004d56:	eba0 000a 	sub.w	r0, r0, sl
 8004d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d5e:	9b04      	ldr	r3, [sp, #16]
 8004d60:	4303      	orrs	r3, r0
 8004d62:	3401      	adds	r4, #1
 8004d64:	9304      	str	r3, [sp, #16]
 8004d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d6a:	4826      	ldr	r0, [pc, #152]	; (8004e04 <_svfiprintf_r+0x1f0>)
 8004d6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d70:	2206      	movs	r2, #6
 8004d72:	f7fb fa55 	bl	8000220 <memchr>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d038      	beq.n	8004dec <_svfiprintf_r+0x1d8>
 8004d7a:	4b23      	ldr	r3, [pc, #140]	; (8004e08 <_svfiprintf_r+0x1f4>)
 8004d7c:	bb1b      	cbnz	r3, 8004dc6 <_svfiprintf_r+0x1b2>
 8004d7e:	9b03      	ldr	r3, [sp, #12]
 8004d80:	3307      	adds	r3, #7
 8004d82:	f023 0307 	bic.w	r3, r3, #7
 8004d86:	3308      	adds	r3, #8
 8004d88:	9303      	str	r3, [sp, #12]
 8004d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d8c:	4433      	add	r3, r6
 8004d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d90:	e767      	b.n	8004c62 <_svfiprintf_r+0x4e>
 8004d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d96:	460c      	mov	r4, r1
 8004d98:	2001      	movs	r0, #1
 8004d9a:	e7a5      	b.n	8004ce8 <_svfiprintf_r+0xd4>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	3401      	adds	r4, #1
 8004da0:	9305      	str	r3, [sp, #20]
 8004da2:	4619      	mov	r1, r3
 8004da4:	f04f 0c0a 	mov.w	ip, #10
 8004da8:	4620      	mov	r0, r4
 8004daa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dae:	3a30      	subs	r2, #48	; 0x30
 8004db0:	2a09      	cmp	r2, #9
 8004db2:	d903      	bls.n	8004dbc <_svfiprintf_r+0x1a8>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0c5      	beq.n	8004d44 <_svfiprintf_r+0x130>
 8004db8:	9105      	str	r1, [sp, #20]
 8004dba:	e7c3      	b.n	8004d44 <_svfiprintf_r+0x130>
 8004dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e7f0      	b.n	8004da8 <_svfiprintf_r+0x194>
 8004dc6:	ab03      	add	r3, sp, #12
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	462a      	mov	r2, r5
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <_svfiprintf_r+0x1f8>)
 8004dce:	a904      	add	r1, sp, #16
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	f3af 8000 	nop.w
 8004dd6:	1c42      	adds	r2, r0, #1
 8004dd8:	4606      	mov	r6, r0
 8004dda:	d1d6      	bne.n	8004d8a <_svfiprintf_r+0x176>
 8004ddc:	89ab      	ldrh	r3, [r5, #12]
 8004dde:	065b      	lsls	r3, r3, #25
 8004de0:	f53f af2c 	bmi.w	8004c3c <_svfiprintf_r+0x28>
 8004de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de6:	b01d      	add	sp, #116	; 0x74
 8004de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dec:	ab03      	add	r3, sp, #12
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	462a      	mov	r2, r5
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <_svfiprintf_r+0x1f8>)
 8004df4:	a904      	add	r1, sp, #16
 8004df6:	4638      	mov	r0, r7
 8004df8:	f000 fa4c 	bl	8005294 <_printf_i>
 8004dfc:	e7eb      	b.n	8004dd6 <_svfiprintf_r+0x1c2>
 8004dfe:	bf00      	nop
 8004e00:	08005de4 	.word	0x08005de4
 8004e04:	08005dee 	.word	0x08005dee
 8004e08:	00000000 	.word	0x00000000
 8004e0c:	08004b5d 	.word	0x08004b5d
 8004e10:	08005dea 	.word	0x08005dea

08004e14 <_sungetc_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	1c4b      	adds	r3, r1, #1
 8004e18:	4614      	mov	r4, r2
 8004e1a:	d103      	bne.n	8004e24 <_sungetc_r+0x10>
 8004e1c:	f04f 35ff 	mov.w	r5, #4294967295
 8004e20:	4628      	mov	r0, r5
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	8993      	ldrh	r3, [r2, #12]
 8004e26:	f023 0320 	bic.w	r3, r3, #32
 8004e2a:	8193      	strh	r3, [r2, #12]
 8004e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e2e:	6852      	ldr	r2, [r2, #4]
 8004e30:	b2cd      	uxtb	r5, r1
 8004e32:	b18b      	cbz	r3, 8004e58 <_sungetc_r+0x44>
 8004e34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e36:	4293      	cmp	r3, r2
 8004e38:	dd08      	ble.n	8004e4c <_sungetc_r+0x38>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	1e5a      	subs	r2, r3, #1
 8004e3e:	6022      	str	r2, [r4, #0]
 8004e40:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004e44:	6863      	ldr	r3, [r4, #4]
 8004e46:	3301      	adds	r3, #1
 8004e48:	6063      	str	r3, [r4, #4]
 8004e4a:	e7e9      	b.n	8004e20 <_sungetc_r+0xc>
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	f000 fdd1 	bl	80059f4 <__submore>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0f1      	beq.n	8004e3a <_sungetc_r+0x26>
 8004e56:	e7e1      	b.n	8004e1c <_sungetc_r+0x8>
 8004e58:	6921      	ldr	r1, [r4, #16]
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	b151      	cbz	r1, 8004e74 <_sungetc_r+0x60>
 8004e5e:	4299      	cmp	r1, r3
 8004e60:	d208      	bcs.n	8004e74 <_sungetc_r+0x60>
 8004e62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004e66:	42a9      	cmp	r1, r5
 8004e68:	d104      	bne.n	8004e74 <_sungetc_r+0x60>
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	3201      	adds	r2, #1
 8004e6e:	6023      	str	r3, [r4, #0]
 8004e70:	6062      	str	r2, [r4, #4]
 8004e72:	e7d5      	b.n	8004e20 <_sungetc_r+0xc>
 8004e74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8004e7e:	2303      	movs	r3, #3
 8004e80:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e82:	4623      	mov	r3, r4
 8004e84:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e7dc      	b.n	8004e48 <_sungetc_r+0x34>

08004e8e <__ssrefill_r>:
 8004e8e:	b510      	push	{r4, lr}
 8004e90:	460c      	mov	r4, r1
 8004e92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004e94:	b169      	cbz	r1, 8004eb2 <__ssrefill_r+0x24>
 8004e96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	d001      	beq.n	8004ea2 <__ssrefill_r+0x14>
 8004e9e:	f000 fe0d 	bl	8005abc <_free_r>
 8004ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ea4:	6063      	str	r3, [r4, #4]
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	6360      	str	r0, [r4, #52]	; 0x34
 8004eaa:	b113      	cbz	r3, 8004eb2 <__ssrefill_r+0x24>
 8004eac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004eae:	6023      	str	r3, [r4, #0]
 8004eb0:	bd10      	pop	{r4, pc}
 8004eb2:	6923      	ldr	r3, [r4, #16]
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	6063      	str	r3, [r4, #4]
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	f043 0320 	orr.w	r3, r3, #32
 8004ec0:	81a3      	strh	r3, [r4, #12]
 8004ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec6:	e7f3      	b.n	8004eb0 <__ssrefill_r+0x22>

08004ec8 <__ssvfiscanf_r>:
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	460c      	mov	r4, r1
 8004ece:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004ed8:	49b2      	ldr	r1, [pc, #712]	; (80051a4 <__ssvfiscanf_r+0x2dc>)
 8004eda:	91a0      	str	r1, [sp, #640]	; 0x280
 8004edc:	f10d 0804 	add.w	r8, sp, #4
 8004ee0:	49b1      	ldr	r1, [pc, #708]	; (80051a8 <__ssvfiscanf_r+0x2e0>)
 8004ee2:	4fb2      	ldr	r7, [pc, #712]	; (80051ac <__ssvfiscanf_r+0x2e4>)
 8004ee4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80051b0 <__ssvfiscanf_r+0x2e8>
 8004ee8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004eec:	4606      	mov	r6, r0
 8004eee:	91a1      	str	r1, [sp, #644]	; 0x284
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	f892 a000 	ldrb.w	sl, [r2]
 8004ef6:	f1ba 0f00 	cmp.w	sl, #0
 8004efa:	f000 8151 	beq.w	80051a0 <__ssvfiscanf_r+0x2d8>
 8004efe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8004f02:	f013 0308 	ands.w	r3, r3, #8
 8004f06:	f102 0501 	add.w	r5, r2, #1
 8004f0a:	d019      	beq.n	8004f40 <__ssvfiscanf_r+0x78>
 8004f0c:	6863      	ldr	r3, [r4, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	dd0f      	ble.n	8004f32 <__ssvfiscanf_r+0x6a>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	5cba      	ldrb	r2, [r7, r2]
 8004f18:	0712      	lsls	r2, r2, #28
 8004f1a:	d401      	bmi.n	8004f20 <__ssvfiscanf_r+0x58>
 8004f1c:	462a      	mov	r2, r5
 8004f1e:	e7e8      	b.n	8004ef2 <__ssvfiscanf_r+0x2a>
 8004f20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004f22:	3201      	adds	r2, #1
 8004f24:	9245      	str	r2, [sp, #276]	; 0x114
 8004f26:	6862      	ldr	r2, [r4, #4]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	3a01      	subs	r2, #1
 8004f2c:	6062      	str	r2, [r4, #4]
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	e7ec      	b.n	8004f0c <__ssvfiscanf_r+0x44>
 8004f32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004f34:	4621      	mov	r1, r4
 8004f36:	4630      	mov	r0, r6
 8004f38:	4798      	blx	r3
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d0e9      	beq.n	8004f12 <__ssvfiscanf_r+0x4a>
 8004f3e:	e7ed      	b.n	8004f1c <__ssvfiscanf_r+0x54>
 8004f40:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8004f44:	f040 8083 	bne.w	800504e <__ssvfiscanf_r+0x186>
 8004f48:	9341      	str	r3, [sp, #260]	; 0x104
 8004f4a:	9343      	str	r3, [sp, #268]	; 0x10c
 8004f4c:	7853      	ldrb	r3, [r2, #1]
 8004f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f50:	bf02      	ittt	eq
 8004f52:	2310      	moveq	r3, #16
 8004f54:	1c95      	addeq	r5, r2, #2
 8004f56:	9341      	streq	r3, [sp, #260]	; 0x104
 8004f58:	220a      	movs	r2, #10
 8004f5a:	46ab      	mov	fp, r5
 8004f5c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8004f60:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004f64:	2b09      	cmp	r3, #9
 8004f66:	d91d      	bls.n	8004fa4 <__ssvfiscanf_r+0xdc>
 8004f68:	4891      	ldr	r0, [pc, #580]	; (80051b0 <__ssvfiscanf_r+0x2e8>)
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	f7fb f958 	bl	8000220 <memchr>
 8004f70:	b140      	cbz	r0, 8004f84 <__ssvfiscanf_r+0xbc>
 8004f72:	2301      	movs	r3, #1
 8004f74:	eba0 0009 	sub.w	r0, r0, r9
 8004f78:	fa03 f000 	lsl.w	r0, r3, r0
 8004f7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004f7e:	4318      	orrs	r0, r3
 8004f80:	9041      	str	r0, [sp, #260]	; 0x104
 8004f82:	465d      	mov	r5, fp
 8004f84:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f88:	2b78      	cmp	r3, #120	; 0x78
 8004f8a:	d806      	bhi.n	8004f9a <__ssvfiscanf_r+0xd2>
 8004f8c:	2b57      	cmp	r3, #87	; 0x57
 8004f8e:	d810      	bhi.n	8004fb2 <__ssvfiscanf_r+0xea>
 8004f90:	2b25      	cmp	r3, #37	; 0x25
 8004f92:	d05c      	beq.n	800504e <__ssvfiscanf_r+0x186>
 8004f94:	d856      	bhi.n	8005044 <__ssvfiscanf_r+0x17c>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d074      	beq.n	8005084 <__ssvfiscanf_r+0x1bc>
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	9347      	str	r3, [sp, #284]	; 0x11c
 8004f9e:	230a      	movs	r3, #10
 8004fa0:	9342      	str	r3, [sp, #264]	; 0x108
 8004fa2:	e081      	b.n	80050a8 <__ssvfiscanf_r+0x1e0>
 8004fa4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004fa6:	fb02 1303 	mla	r3, r2, r3, r1
 8004faa:	3b30      	subs	r3, #48	; 0x30
 8004fac:	9343      	str	r3, [sp, #268]	; 0x10c
 8004fae:	465d      	mov	r5, fp
 8004fb0:	e7d3      	b.n	8004f5a <__ssvfiscanf_r+0x92>
 8004fb2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004fb6:	2a20      	cmp	r2, #32
 8004fb8:	d8ef      	bhi.n	8004f9a <__ssvfiscanf_r+0xd2>
 8004fba:	a101      	add	r1, pc, #4	; (adr r1, 8004fc0 <__ssvfiscanf_r+0xf8>)
 8004fbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004fc0:	08005093 	.word	0x08005093
 8004fc4:	08004f9b 	.word	0x08004f9b
 8004fc8:	08004f9b 	.word	0x08004f9b
 8004fcc:	080050f1 	.word	0x080050f1
 8004fd0:	08004f9b 	.word	0x08004f9b
 8004fd4:	08004f9b 	.word	0x08004f9b
 8004fd8:	08004f9b 	.word	0x08004f9b
 8004fdc:	08004f9b 	.word	0x08004f9b
 8004fe0:	08004f9b 	.word	0x08004f9b
 8004fe4:	08004f9b 	.word	0x08004f9b
 8004fe8:	08004f9b 	.word	0x08004f9b
 8004fec:	08005107 	.word	0x08005107
 8004ff0:	080050dd 	.word	0x080050dd
 8004ff4:	0800504b 	.word	0x0800504b
 8004ff8:	0800504b 	.word	0x0800504b
 8004ffc:	0800504b 	.word	0x0800504b
 8005000:	08004f9b 	.word	0x08004f9b
 8005004:	080050e1 	.word	0x080050e1
 8005008:	08004f9b 	.word	0x08004f9b
 800500c:	08004f9b 	.word	0x08004f9b
 8005010:	08004f9b 	.word	0x08004f9b
 8005014:	08004f9b 	.word	0x08004f9b
 8005018:	08005117 	.word	0x08005117
 800501c:	080050e9 	.word	0x080050e9
 8005020:	0800508b 	.word	0x0800508b
 8005024:	08004f9b 	.word	0x08004f9b
 8005028:	08004f9b 	.word	0x08004f9b
 800502c:	08005113 	.word	0x08005113
 8005030:	08004f9b 	.word	0x08004f9b
 8005034:	080050dd 	.word	0x080050dd
 8005038:	08004f9b 	.word	0x08004f9b
 800503c:	08004f9b 	.word	0x08004f9b
 8005040:	08005093 	.word	0x08005093
 8005044:	3b45      	subs	r3, #69	; 0x45
 8005046:	2b02      	cmp	r3, #2
 8005048:	d8a7      	bhi.n	8004f9a <__ssvfiscanf_r+0xd2>
 800504a:	2305      	movs	r3, #5
 800504c:	e02b      	b.n	80050a6 <__ssvfiscanf_r+0x1de>
 800504e:	6863      	ldr	r3, [r4, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	dd0d      	ble.n	8005070 <__ssvfiscanf_r+0x1a8>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	781a      	ldrb	r2, [r3, #0]
 8005058:	4552      	cmp	r2, sl
 800505a:	f040 80a1 	bne.w	80051a0 <__ssvfiscanf_r+0x2d8>
 800505e:	3301      	adds	r3, #1
 8005060:	6862      	ldr	r2, [r4, #4]
 8005062:	6023      	str	r3, [r4, #0]
 8005064:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005066:	3a01      	subs	r2, #1
 8005068:	3301      	adds	r3, #1
 800506a:	6062      	str	r2, [r4, #4]
 800506c:	9345      	str	r3, [sp, #276]	; 0x114
 800506e:	e755      	b.n	8004f1c <__ssvfiscanf_r+0x54>
 8005070:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005072:	4621      	mov	r1, r4
 8005074:	4630      	mov	r0, r6
 8005076:	4798      	blx	r3
 8005078:	2800      	cmp	r0, #0
 800507a:	d0eb      	beq.n	8005054 <__ssvfiscanf_r+0x18c>
 800507c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800507e:	2800      	cmp	r0, #0
 8005080:	f040 8084 	bne.w	800518c <__ssvfiscanf_r+0x2c4>
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	e086      	b.n	8005198 <__ssvfiscanf_r+0x2d0>
 800508a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800508c:	f042 0220 	orr.w	r2, r2, #32
 8005090:	9241      	str	r2, [sp, #260]	; 0x104
 8005092:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005098:	9241      	str	r2, [sp, #260]	; 0x104
 800509a:	2210      	movs	r2, #16
 800509c:	2b6f      	cmp	r3, #111	; 0x6f
 800509e:	9242      	str	r2, [sp, #264]	; 0x108
 80050a0:	bf34      	ite	cc
 80050a2:	2303      	movcc	r3, #3
 80050a4:	2304      	movcs	r3, #4
 80050a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80050a8:	6863      	ldr	r3, [r4, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	dd41      	ble.n	8005132 <__ssvfiscanf_r+0x26a>
 80050ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80050b0:	0659      	lsls	r1, r3, #25
 80050b2:	d404      	bmi.n	80050be <__ssvfiscanf_r+0x1f6>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	781a      	ldrb	r2, [r3, #0]
 80050b8:	5cba      	ldrb	r2, [r7, r2]
 80050ba:	0712      	lsls	r2, r2, #28
 80050bc:	d440      	bmi.n	8005140 <__ssvfiscanf_r+0x278>
 80050be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	dc4f      	bgt.n	8005164 <__ssvfiscanf_r+0x29c>
 80050c4:	466b      	mov	r3, sp
 80050c6:	4622      	mov	r2, r4
 80050c8:	a941      	add	r1, sp, #260	; 0x104
 80050ca:	4630      	mov	r0, r6
 80050cc:	f000 fa08 	bl	80054e0 <_scanf_chars>
 80050d0:	2801      	cmp	r0, #1
 80050d2:	d065      	beq.n	80051a0 <__ssvfiscanf_r+0x2d8>
 80050d4:	2802      	cmp	r0, #2
 80050d6:	f47f af21 	bne.w	8004f1c <__ssvfiscanf_r+0x54>
 80050da:	e7cf      	b.n	800507c <__ssvfiscanf_r+0x1b4>
 80050dc:	220a      	movs	r2, #10
 80050de:	e7dd      	b.n	800509c <__ssvfiscanf_r+0x1d4>
 80050e0:	2300      	movs	r3, #0
 80050e2:	9342      	str	r3, [sp, #264]	; 0x108
 80050e4:	2303      	movs	r3, #3
 80050e6:	e7de      	b.n	80050a6 <__ssvfiscanf_r+0x1de>
 80050e8:	2308      	movs	r3, #8
 80050ea:	9342      	str	r3, [sp, #264]	; 0x108
 80050ec:	2304      	movs	r3, #4
 80050ee:	e7da      	b.n	80050a6 <__ssvfiscanf_r+0x1de>
 80050f0:	4629      	mov	r1, r5
 80050f2:	4640      	mov	r0, r8
 80050f4:	f000 fb40 	bl	8005778 <__sccl>
 80050f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80050fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050fe:	9341      	str	r3, [sp, #260]	; 0x104
 8005100:	4605      	mov	r5, r0
 8005102:	2301      	movs	r3, #1
 8005104:	e7cf      	b.n	80050a6 <__ssvfiscanf_r+0x1de>
 8005106:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510c:	9341      	str	r3, [sp, #260]	; 0x104
 800510e:	2300      	movs	r3, #0
 8005110:	e7c9      	b.n	80050a6 <__ssvfiscanf_r+0x1de>
 8005112:	2302      	movs	r3, #2
 8005114:	e7c7      	b.n	80050a6 <__ssvfiscanf_r+0x1de>
 8005116:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005118:	06c3      	lsls	r3, r0, #27
 800511a:	f53f aeff 	bmi.w	8004f1c <__ssvfiscanf_r+0x54>
 800511e:	9b00      	ldr	r3, [sp, #0]
 8005120:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005122:	1d19      	adds	r1, r3, #4
 8005124:	9100      	str	r1, [sp, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	07c0      	lsls	r0, r0, #31
 800512a:	bf4c      	ite	mi
 800512c:	801a      	strhmi	r2, [r3, #0]
 800512e:	601a      	strpl	r2, [r3, #0]
 8005130:	e6f4      	b.n	8004f1c <__ssvfiscanf_r+0x54>
 8005132:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005134:	4621      	mov	r1, r4
 8005136:	4630      	mov	r0, r6
 8005138:	4798      	blx	r3
 800513a:	2800      	cmp	r0, #0
 800513c:	d0b7      	beq.n	80050ae <__ssvfiscanf_r+0x1e6>
 800513e:	e79d      	b.n	800507c <__ssvfiscanf_r+0x1b4>
 8005140:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005142:	3201      	adds	r2, #1
 8005144:	9245      	str	r2, [sp, #276]	; 0x114
 8005146:	6862      	ldr	r2, [r4, #4]
 8005148:	3a01      	subs	r2, #1
 800514a:	2a00      	cmp	r2, #0
 800514c:	6062      	str	r2, [r4, #4]
 800514e:	dd02      	ble.n	8005156 <__ssvfiscanf_r+0x28e>
 8005150:	3301      	adds	r3, #1
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	e7ae      	b.n	80050b4 <__ssvfiscanf_r+0x1ec>
 8005156:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005158:	4621      	mov	r1, r4
 800515a:	4630      	mov	r0, r6
 800515c:	4798      	blx	r3
 800515e:	2800      	cmp	r0, #0
 8005160:	d0a8      	beq.n	80050b4 <__ssvfiscanf_r+0x1ec>
 8005162:	e78b      	b.n	800507c <__ssvfiscanf_r+0x1b4>
 8005164:	2b04      	cmp	r3, #4
 8005166:	dc06      	bgt.n	8005176 <__ssvfiscanf_r+0x2ae>
 8005168:	466b      	mov	r3, sp
 800516a:	4622      	mov	r2, r4
 800516c:	a941      	add	r1, sp, #260	; 0x104
 800516e:	4630      	mov	r0, r6
 8005170:	f000 fa0e 	bl	8005590 <_scanf_i>
 8005174:	e7ac      	b.n	80050d0 <__ssvfiscanf_r+0x208>
 8005176:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <__ssvfiscanf_r+0x2ec>)
 8005178:	2b00      	cmp	r3, #0
 800517a:	f43f aecf 	beq.w	8004f1c <__ssvfiscanf_r+0x54>
 800517e:	466b      	mov	r3, sp
 8005180:	4622      	mov	r2, r4
 8005182:	a941      	add	r1, sp, #260	; 0x104
 8005184:	4630      	mov	r0, r6
 8005186:	f3af 8000 	nop.w
 800518a:	e7a1      	b.n	80050d0 <__ssvfiscanf_r+0x208>
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005192:	bf18      	it	ne
 8005194:	f04f 30ff 	movne.w	r0, #4294967295
 8005198:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800519c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80051a2:	e7f9      	b.n	8005198 <__ssvfiscanf_r+0x2d0>
 80051a4:	08004e15 	.word	0x08004e15
 80051a8:	08004e8f 	.word	0x08004e8f
 80051ac:	08005e33 	.word	0x08005e33
 80051b0:	08005dea 	.word	0x08005dea
 80051b4:	00000000 	.word	0x00000000

080051b8 <_printf_common>:
 80051b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051bc:	4616      	mov	r6, r2
 80051be:	4699      	mov	r9, r3
 80051c0:	688a      	ldr	r2, [r1, #8]
 80051c2:	690b      	ldr	r3, [r1, #16]
 80051c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051c8:	4293      	cmp	r3, r2
 80051ca:	bfb8      	it	lt
 80051cc:	4613      	movlt	r3, r2
 80051ce:	6033      	str	r3, [r6, #0]
 80051d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051d4:	4607      	mov	r7, r0
 80051d6:	460c      	mov	r4, r1
 80051d8:	b10a      	cbz	r2, 80051de <_printf_common+0x26>
 80051da:	3301      	adds	r3, #1
 80051dc:	6033      	str	r3, [r6, #0]
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	0699      	lsls	r1, r3, #26
 80051e2:	bf42      	ittt	mi
 80051e4:	6833      	ldrmi	r3, [r6, #0]
 80051e6:	3302      	addmi	r3, #2
 80051e8:	6033      	strmi	r3, [r6, #0]
 80051ea:	6825      	ldr	r5, [r4, #0]
 80051ec:	f015 0506 	ands.w	r5, r5, #6
 80051f0:	d106      	bne.n	8005200 <_printf_common+0x48>
 80051f2:	f104 0a19 	add.w	sl, r4, #25
 80051f6:	68e3      	ldr	r3, [r4, #12]
 80051f8:	6832      	ldr	r2, [r6, #0]
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	42ab      	cmp	r3, r5
 80051fe:	dc26      	bgt.n	800524e <_printf_common+0x96>
 8005200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005204:	1e13      	subs	r3, r2, #0
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	bf18      	it	ne
 800520a:	2301      	movne	r3, #1
 800520c:	0692      	lsls	r2, r2, #26
 800520e:	d42b      	bmi.n	8005268 <_printf_common+0xb0>
 8005210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005214:	4649      	mov	r1, r9
 8005216:	4638      	mov	r0, r7
 8005218:	47c0      	blx	r8
 800521a:	3001      	adds	r0, #1
 800521c:	d01e      	beq.n	800525c <_printf_common+0xa4>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	68e5      	ldr	r5, [r4, #12]
 8005222:	6832      	ldr	r2, [r6, #0]
 8005224:	f003 0306 	and.w	r3, r3, #6
 8005228:	2b04      	cmp	r3, #4
 800522a:	bf08      	it	eq
 800522c:	1aad      	subeq	r5, r5, r2
 800522e:	68a3      	ldr	r3, [r4, #8]
 8005230:	6922      	ldr	r2, [r4, #16]
 8005232:	bf0c      	ite	eq
 8005234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005238:	2500      	movne	r5, #0
 800523a:	4293      	cmp	r3, r2
 800523c:	bfc4      	itt	gt
 800523e:	1a9b      	subgt	r3, r3, r2
 8005240:	18ed      	addgt	r5, r5, r3
 8005242:	2600      	movs	r6, #0
 8005244:	341a      	adds	r4, #26
 8005246:	42b5      	cmp	r5, r6
 8005248:	d11a      	bne.n	8005280 <_printf_common+0xc8>
 800524a:	2000      	movs	r0, #0
 800524c:	e008      	b.n	8005260 <_printf_common+0xa8>
 800524e:	2301      	movs	r3, #1
 8005250:	4652      	mov	r2, sl
 8005252:	4649      	mov	r1, r9
 8005254:	4638      	mov	r0, r7
 8005256:	47c0      	blx	r8
 8005258:	3001      	adds	r0, #1
 800525a:	d103      	bne.n	8005264 <_printf_common+0xac>
 800525c:	f04f 30ff 	mov.w	r0, #4294967295
 8005260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005264:	3501      	adds	r5, #1
 8005266:	e7c6      	b.n	80051f6 <_printf_common+0x3e>
 8005268:	18e1      	adds	r1, r4, r3
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	2030      	movs	r0, #48	; 0x30
 800526e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005272:	4422      	add	r2, r4
 8005274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800527c:	3302      	adds	r3, #2
 800527e:	e7c7      	b.n	8005210 <_printf_common+0x58>
 8005280:	2301      	movs	r3, #1
 8005282:	4622      	mov	r2, r4
 8005284:	4649      	mov	r1, r9
 8005286:	4638      	mov	r0, r7
 8005288:	47c0      	blx	r8
 800528a:	3001      	adds	r0, #1
 800528c:	d0e6      	beq.n	800525c <_printf_common+0xa4>
 800528e:	3601      	adds	r6, #1
 8005290:	e7d9      	b.n	8005246 <_printf_common+0x8e>
	...

08005294 <_printf_i>:
 8005294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005298:	460c      	mov	r4, r1
 800529a:	4691      	mov	r9, r2
 800529c:	7e27      	ldrb	r7, [r4, #24]
 800529e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052a0:	2f78      	cmp	r7, #120	; 0x78
 80052a2:	4680      	mov	r8, r0
 80052a4:	469a      	mov	sl, r3
 80052a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052aa:	d807      	bhi.n	80052bc <_printf_i+0x28>
 80052ac:	2f62      	cmp	r7, #98	; 0x62
 80052ae:	d80a      	bhi.n	80052c6 <_printf_i+0x32>
 80052b0:	2f00      	cmp	r7, #0
 80052b2:	f000 80d8 	beq.w	8005466 <_printf_i+0x1d2>
 80052b6:	2f58      	cmp	r7, #88	; 0x58
 80052b8:	f000 80a3 	beq.w	8005402 <_printf_i+0x16e>
 80052bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052c4:	e03a      	b.n	800533c <_printf_i+0xa8>
 80052c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052ca:	2b15      	cmp	r3, #21
 80052cc:	d8f6      	bhi.n	80052bc <_printf_i+0x28>
 80052ce:	a001      	add	r0, pc, #4	; (adr r0, 80052d4 <_printf_i+0x40>)
 80052d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052d4:	0800532d 	.word	0x0800532d
 80052d8:	08005341 	.word	0x08005341
 80052dc:	080052bd 	.word	0x080052bd
 80052e0:	080052bd 	.word	0x080052bd
 80052e4:	080052bd 	.word	0x080052bd
 80052e8:	080052bd 	.word	0x080052bd
 80052ec:	08005341 	.word	0x08005341
 80052f0:	080052bd 	.word	0x080052bd
 80052f4:	080052bd 	.word	0x080052bd
 80052f8:	080052bd 	.word	0x080052bd
 80052fc:	080052bd 	.word	0x080052bd
 8005300:	0800544d 	.word	0x0800544d
 8005304:	08005371 	.word	0x08005371
 8005308:	0800542f 	.word	0x0800542f
 800530c:	080052bd 	.word	0x080052bd
 8005310:	080052bd 	.word	0x080052bd
 8005314:	0800546f 	.word	0x0800546f
 8005318:	080052bd 	.word	0x080052bd
 800531c:	08005371 	.word	0x08005371
 8005320:	080052bd 	.word	0x080052bd
 8005324:	080052bd 	.word	0x080052bd
 8005328:	08005437 	.word	0x08005437
 800532c:	680b      	ldr	r3, [r1, #0]
 800532e:	1d1a      	adds	r2, r3, #4
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	600a      	str	r2, [r1, #0]
 8005334:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800533c:	2301      	movs	r3, #1
 800533e:	e0a3      	b.n	8005488 <_printf_i+0x1f4>
 8005340:	6825      	ldr	r5, [r4, #0]
 8005342:	6808      	ldr	r0, [r1, #0]
 8005344:	062e      	lsls	r6, r5, #24
 8005346:	f100 0304 	add.w	r3, r0, #4
 800534a:	d50a      	bpl.n	8005362 <_printf_i+0xce>
 800534c:	6805      	ldr	r5, [r0, #0]
 800534e:	600b      	str	r3, [r1, #0]
 8005350:	2d00      	cmp	r5, #0
 8005352:	da03      	bge.n	800535c <_printf_i+0xc8>
 8005354:	232d      	movs	r3, #45	; 0x2d
 8005356:	426d      	negs	r5, r5
 8005358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800535c:	485e      	ldr	r0, [pc, #376]	; (80054d8 <_printf_i+0x244>)
 800535e:	230a      	movs	r3, #10
 8005360:	e019      	b.n	8005396 <_printf_i+0x102>
 8005362:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005366:	6805      	ldr	r5, [r0, #0]
 8005368:	600b      	str	r3, [r1, #0]
 800536a:	bf18      	it	ne
 800536c:	b22d      	sxthne	r5, r5
 800536e:	e7ef      	b.n	8005350 <_printf_i+0xbc>
 8005370:	680b      	ldr	r3, [r1, #0]
 8005372:	6825      	ldr	r5, [r4, #0]
 8005374:	1d18      	adds	r0, r3, #4
 8005376:	6008      	str	r0, [r1, #0]
 8005378:	0628      	lsls	r0, r5, #24
 800537a:	d501      	bpl.n	8005380 <_printf_i+0xec>
 800537c:	681d      	ldr	r5, [r3, #0]
 800537e:	e002      	b.n	8005386 <_printf_i+0xf2>
 8005380:	0669      	lsls	r1, r5, #25
 8005382:	d5fb      	bpl.n	800537c <_printf_i+0xe8>
 8005384:	881d      	ldrh	r5, [r3, #0]
 8005386:	4854      	ldr	r0, [pc, #336]	; (80054d8 <_printf_i+0x244>)
 8005388:	2f6f      	cmp	r7, #111	; 0x6f
 800538a:	bf0c      	ite	eq
 800538c:	2308      	moveq	r3, #8
 800538e:	230a      	movne	r3, #10
 8005390:	2100      	movs	r1, #0
 8005392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005396:	6866      	ldr	r6, [r4, #4]
 8005398:	60a6      	str	r6, [r4, #8]
 800539a:	2e00      	cmp	r6, #0
 800539c:	bfa2      	ittt	ge
 800539e:	6821      	ldrge	r1, [r4, #0]
 80053a0:	f021 0104 	bicge.w	r1, r1, #4
 80053a4:	6021      	strge	r1, [r4, #0]
 80053a6:	b90d      	cbnz	r5, 80053ac <_printf_i+0x118>
 80053a8:	2e00      	cmp	r6, #0
 80053aa:	d04d      	beq.n	8005448 <_printf_i+0x1b4>
 80053ac:	4616      	mov	r6, r2
 80053ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80053b2:	fb03 5711 	mls	r7, r3, r1, r5
 80053b6:	5dc7      	ldrb	r7, [r0, r7]
 80053b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053bc:	462f      	mov	r7, r5
 80053be:	42bb      	cmp	r3, r7
 80053c0:	460d      	mov	r5, r1
 80053c2:	d9f4      	bls.n	80053ae <_printf_i+0x11a>
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d10b      	bne.n	80053e0 <_printf_i+0x14c>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	07df      	lsls	r7, r3, #31
 80053cc:	d508      	bpl.n	80053e0 <_printf_i+0x14c>
 80053ce:	6923      	ldr	r3, [r4, #16]
 80053d0:	6861      	ldr	r1, [r4, #4]
 80053d2:	4299      	cmp	r1, r3
 80053d4:	bfde      	ittt	le
 80053d6:	2330      	movle	r3, #48	; 0x30
 80053d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053e0:	1b92      	subs	r2, r2, r6
 80053e2:	6122      	str	r2, [r4, #16]
 80053e4:	f8cd a000 	str.w	sl, [sp]
 80053e8:	464b      	mov	r3, r9
 80053ea:	aa03      	add	r2, sp, #12
 80053ec:	4621      	mov	r1, r4
 80053ee:	4640      	mov	r0, r8
 80053f0:	f7ff fee2 	bl	80051b8 <_printf_common>
 80053f4:	3001      	adds	r0, #1
 80053f6:	d14c      	bne.n	8005492 <_printf_i+0x1fe>
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295
 80053fc:	b004      	add	sp, #16
 80053fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005402:	4835      	ldr	r0, [pc, #212]	; (80054d8 <_printf_i+0x244>)
 8005404:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	680e      	ldr	r6, [r1, #0]
 800540c:	061f      	lsls	r7, r3, #24
 800540e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005412:	600e      	str	r6, [r1, #0]
 8005414:	d514      	bpl.n	8005440 <_printf_i+0x1ac>
 8005416:	07d9      	lsls	r1, r3, #31
 8005418:	bf44      	itt	mi
 800541a:	f043 0320 	orrmi.w	r3, r3, #32
 800541e:	6023      	strmi	r3, [r4, #0]
 8005420:	b91d      	cbnz	r5, 800542a <_printf_i+0x196>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	f023 0320 	bic.w	r3, r3, #32
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	2310      	movs	r3, #16
 800542c:	e7b0      	b.n	8005390 <_printf_i+0xfc>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	f043 0320 	orr.w	r3, r3, #32
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	2378      	movs	r3, #120	; 0x78
 8005438:	4828      	ldr	r0, [pc, #160]	; (80054dc <_printf_i+0x248>)
 800543a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800543e:	e7e3      	b.n	8005408 <_printf_i+0x174>
 8005440:	065e      	lsls	r6, r3, #25
 8005442:	bf48      	it	mi
 8005444:	b2ad      	uxthmi	r5, r5
 8005446:	e7e6      	b.n	8005416 <_printf_i+0x182>
 8005448:	4616      	mov	r6, r2
 800544a:	e7bb      	b.n	80053c4 <_printf_i+0x130>
 800544c:	680b      	ldr	r3, [r1, #0]
 800544e:	6826      	ldr	r6, [r4, #0]
 8005450:	6960      	ldr	r0, [r4, #20]
 8005452:	1d1d      	adds	r5, r3, #4
 8005454:	600d      	str	r5, [r1, #0]
 8005456:	0635      	lsls	r5, r6, #24
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	d501      	bpl.n	8005460 <_printf_i+0x1cc>
 800545c:	6018      	str	r0, [r3, #0]
 800545e:	e002      	b.n	8005466 <_printf_i+0x1d2>
 8005460:	0671      	lsls	r1, r6, #25
 8005462:	d5fb      	bpl.n	800545c <_printf_i+0x1c8>
 8005464:	8018      	strh	r0, [r3, #0]
 8005466:	2300      	movs	r3, #0
 8005468:	6123      	str	r3, [r4, #16]
 800546a:	4616      	mov	r6, r2
 800546c:	e7ba      	b.n	80053e4 <_printf_i+0x150>
 800546e:	680b      	ldr	r3, [r1, #0]
 8005470:	1d1a      	adds	r2, r3, #4
 8005472:	600a      	str	r2, [r1, #0]
 8005474:	681e      	ldr	r6, [r3, #0]
 8005476:	6862      	ldr	r2, [r4, #4]
 8005478:	2100      	movs	r1, #0
 800547a:	4630      	mov	r0, r6
 800547c:	f7fa fed0 	bl	8000220 <memchr>
 8005480:	b108      	cbz	r0, 8005486 <_printf_i+0x1f2>
 8005482:	1b80      	subs	r0, r0, r6
 8005484:	6060      	str	r0, [r4, #4]
 8005486:	6863      	ldr	r3, [r4, #4]
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	2300      	movs	r3, #0
 800548c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005490:	e7a8      	b.n	80053e4 <_printf_i+0x150>
 8005492:	6923      	ldr	r3, [r4, #16]
 8005494:	4632      	mov	r2, r6
 8005496:	4649      	mov	r1, r9
 8005498:	4640      	mov	r0, r8
 800549a:	47d0      	blx	sl
 800549c:	3001      	adds	r0, #1
 800549e:	d0ab      	beq.n	80053f8 <_printf_i+0x164>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	079b      	lsls	r3, r3, #30
 80054a4:	d413      	bmi.n	80054ce <_printf_i+0x23a>
 80054a6:	68e0      	ldr	r0, [r4, #12]
 80054a8:	9b03      	ldr	r3, [sp, #12]
 80054aa:	4298      	cmp	r0, r3
 80054ac:	bfb8      	it	lt
 80054ae:	4618      	movlt	r0, r3
 80054b0:	e7a4      	b.n	80053fc <_printf_i+0x168>
 80054b2:	2301      	movs	r3, #1
 80054b4:	4632      	mov	r2, r6
 80054b6:	4649      	mov	r1, r9
 80054b8:	4640      	mov	r0, r8
 80054ba:	47d0      	blx	sl
 80054bc:	3001      	adds	r0, #1
 80054be:	d09b      	beq.n	80053f8 <_printf_i+0x164>
 80054c0:	3501      	adds	r5, #1
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	9903      	ldr	r1, [sp, #12]
 80054c6:	1a5b      	subs	r3, r3, r1
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	dcf2      	bgt.n	80054b2 <_printf_i+0x21e>
 80054cc:	e7eb      	b.n	80054a6 <_printf_i+0x212>
 80054ce:	2500      	movs	r5, #0
 80054d0:	f104 0619 	add.w	r6, r4, #25
 80054d4:	e7f5      	b.n	80054c2 <_printf_i+0x22e>
 80054d6:	bf00      	nop
 80054d8:	08005df5 	.word	0x08005df5
 80054dc:	08005e06 	.word	0x08005e06

080054e0 <_scanf_chars>:
 80054e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e4:	4615      	mov	r5, r2
 80054e6:	688a      	ldr	r2, [r1, #8]
 80054e8:	4680      	mov	r8, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	b932      	cbnz	r2, 80054fc <_scanf_chars+0x1c>
 80054ee:	698a      	ldr	r2, [r1, #24]
 80054f0:	2a00      	cmp	r2, #0
 80054f2:	bf0c      	ite	eq
 80054f4:	2201      	moveq	r2, #1
 80054f6:	f04f 32ff 	movne.w	r2, #4294967295
 80054fa:	608a      	str	r2, [r1, #8]
 80054fc:	6822      	ldr	r2, [r4, #0]
 80054fe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800558c <_scanf_chars+0xac>
 8005502:	06d1      	lsls	r1, r2, #27
 8005504:	bf5f      	itttt	pl
 8005506:	681a      	ldrpl	r2, [r3, #0]
 8005508:	1d11      	addpl	r1, r2, #4
 800550a:	6019      	strpl	r1, [r3, #0]
 800550c:	6816      	ldrpl	r6, [r2, #0]
 800550e:	2700      	movs	r7, #0
 8005510:	69a0      	ldr	r0, [r4, #24]
 8005512:	b188      	cbz	r0, 8005538 <_scanf_chars+0x58>
 8005514:	2801      	cmp	r0, #1
 8005516:	d107      	bne.n	8005528 <_scanf_chars+0x48>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	781a      	ldrb	r2, [r3, #0]
 800551c:	6963      	ldr	r3, [r4, #20]
 800551e:	5c9b      	ldrb	r3, [r3, r2]
 8005520:	b953      	cbnz	r3, 8005538 <_scanf_chars+0x58>
 8005522:	bb27      	cbnz	r7, 800556e <_scanf_chars+0x8e>
 8005524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005528:	2802      	cmp	r0, #2
 800552a:	d120      	bne.n	800556e <_scanf_chars+0x8e>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005534:	071b      	lsls	r3, r3, #28
 8005536:	d41a      	bmi.n	800556e <_scanf_chars+0x8e>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	06da      	lsls	r2, r3, #27
 800553c:	bf5e      	ittt	pl
 800553e:	682b      	ldrpl	r3, [r5, #0]
 8005540:	781b      	ldrbpl	r3, [r3, #0]
 8005542:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005546:	682a      	ldr	r2, [r5, #0]
 8005548:	686b      	ldr	r3, [r5, #4]
 800554a:	3201      	adds	r2, #1
 800554c:	602a      	str	r2, [r5, #0]
 800554e:	68a2      	ldr	r2, [r4, #8]
 8005550:	3b01      	subs	r3, #1
 8005552:	3a01      	subs	r2, #1
 8005554:	606b      	str	r3, [r5, #4]
 8005556:	3701      	adds	r7, #1
 8005558:	60a2      	str	r2, [r4, #8]
 800555a:	b142      	cbz	r2, 800556e <_scanf_chars+0x8e>
 800555c:	2b00      	cmp	r3, #0
 800555e:	dcd7      	bgt.n	8005510 <_scanf_chars+0x30>
 8005560:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005564:	4629      	mov	r1, r5
 8005566:	4640      	mov	r0, r8
 8005568:	4798      	blx	r3
 800556a:	2800      	cmp	r0, #0
 800556c:	d0d0      	beq.n	8005510 <_scanf_chars+0x30>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	f013 0310 	ands.w	r3, r3, #16
 8005574:	d105      	bne.n	8005582 <_scanf_chars+0xa2>
 8005576:	68e2      	ldr	r2, [r4, #12]
 8005578:	3201      	adds	r2, #1
 800557a:	60e2      	str	r2, [r4, #12]
 800557c:	69a2      	ldr	r2, [r4, #24]
 800557e:	b102      	cbz	r2, 8005582 <_scanf_chars+0xa2>
 8005580:	7033      	strb	r3, [r6, #0]
 8005582:	6923      	ldr	r3, [r4, #16]
 8005584:	441f      	add	r7, r3
 8005586:	6127      	str	r7, [r4, #16]
 8005588:	2000      	movs	r0, #0
 800558a:	e7cb      	b.n	8005524 <_scanf_chars+0x44>
 800558c:	08005e33 	.word	0x08005e33

08005590 <_scanf_i>:
 8005590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005594:	4698      	mov	r8, r3
 8005596:	4b74      	ldr	r3, [pc, #464]	; (8005768 <_scanf_i+0x1d8>)
 8005598:	460c      	mov	r4, r1
 800559a:	4682      	mov	sl, r0
 800559c:	4616      	mov	r6, r2
 800559e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055a2:	b087      	sub	sp, #28
 80055a4:	ab03      	add	r3, sp, #12
 80055a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80055aa:	4b70      	ldr	r3, [pc, #448]	; (800576c <_scanf_i+0x1dc>)
 80055ac:	69a1      	ldr	r1, [r4, #24]
 80055ae:	4a70      	ldr	r2, [pc, #448]	; (8005770 <_scanf_i+0x1e0>)
 80055b0:	2903      	cmp	r1, #3
 80055b2:	bf18      	it	ne
 80055b4:	461a      	movne	r2, r3
 80055b6:	68a3      	ldr	r3, [r4, #8]
 80055b8:	9201      	str	r2, [sp, #4]
 80055ba:	1e5a      	subs	r2, r3, #1
 80055bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80055c0:	bf88      	it	hi
 80055c2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80055c6:	4627      	mov	r7, r4
 80055c8:	bf82      	ittt	hi
 80055ca:	eb03 0905 	addhi.w	r9, r3, r5
 80055ce:	f240 135d 	movwhi	r3, #349	; 0x15d
 80055d2:	60a3      	strhi	r3, [r4, #8]
 80055d4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80055d8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80055dc:	bf98      	it	ls
 80055de:	f04f 0900 	movls.w	r9, #0
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	463d      	mov	r5, r7
 80055e6:	f04f 0b00 	mov.w	fp, #0
 80055ea:	6831      	ldr	r1, [r6, #0]
 80055ec:	ab03      	add	r3, sp, #12
 80055ee:	7809      	ldrb	r1, [r1, #0]
 80055f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f7fa fe13 	bl	8000220 <memchr>
 80055fa:	b328      	cbz	r0, 8005648 <_scanf_i+0xb8>
 80055fc:	f1bb 0f01 	cmp.w	fp, #1
 8005600:	d159      	bne.n	80056b6 <_scanf_i+0x126>
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	b92a      	cbnz	r2, 8005612 <_scanf_i+0x82>
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	2308      	movs	r3, #8
 800560a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560e:	6063      	str	r3, [r4, #4]
 8005610:	6022      	str	r2, [r4, #0]
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005618:	6022      	str	r2, [r4, #0]
 800561a:	68a2      	ldr	r2, [r4, #8]
 800561c:	1e51      	subs	r1, r2, #1
 800561e:	60a1      	str	r1, [r4, #8]
 8005620:	b192      	cbz	r2, 8005648 <_scanf_i+0xb8>
 8005622:	6832      	ldr	r2, [r6, #0]
 8005624:	1c51      	adds	r1, r2, #1
 8005626:	6031      	str	r1, [r6, #0]
 8005628:	7812      	ldrb	r2, [r2, #0]
 800562a:	f805 2b01 	strb.w	r2, [r5], #1
 800562e:	6872      	ldr	r2, [r6, #4]
 8005630:	3a01      	subs	r2, #1
 8005632:	2a00      	cmp	r2, #0
 8005634:	6072      	str	r2, [r6, #4]
 8005636:	dc07      	bgt.n	8005648 <_scanf_i+0xb8>
 8005638:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800563c:	4631      	mov	r1, r6
 800563e:	4650      	mov	r0, sl
 8005640:	4790      	blx	r2
 8005642:	2800      	cmp	r0, #0
 8005644:	f040 8085 	bne.w	8005752 <_scanf_i+0x1c2>
 8005648:	f10b 0b01 	add.w	fp, fp, #1
 800564c:	f1bb 0f03 	cmp.w	fp, #3
 8005650:	d1cb      	bne.n	80055ea <_scanf_i+0x5a>
 8005652:	6863      	ldr	r3, [r4, #4]
 8005654:	b90b      	cbnz	r3, 800565a <_scanf_i+0xca>
 8005656:	230a      	movs	r3, #10
 8005658:	6063      	str	r3, [r4, #4]
 800565a:	6863      	ldr	r3, [r4, #4]
 800565c:	4945      	ldr	r1, [pc, #276]	; (8005774 <_scanf_i+0x1e4>)
 800565e:	6960      	ldr	r0, [r4, #20]
 8005660:	1ac9      	subs	r1, r1, r3
 8005662:	f000 f889 	bl	8005778 <__sccl>
 8005666:	f04f 0b00 	mov.w	fp, #0
 800566a:	68a3      	ldr	r3, [r4, #8]
 800566c:	6822      	ldr	r2, [r4, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d03d      	beq.n	80056ee <_scanf_i+0x15e>
 8005672:	6831      	ldr	r1, [r6, #0]
 8005674:	6960      	ldr	r0, [r4, #20]
 8005676:	f891 c000 	ldrb.w	ip, [r1]
 800567a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800567e:	2800      	cmp	r0, #0
 8005680:	d035      	beq.n	80056ee <_scanf_i+0x15e>
 8005682:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005686:	d124      	bne.n	80056d2 <_scanf_i+0x142>
 8005688:	0510      	lsls	r0, r2, #20
 800568a:	d522      	bpl.n	80056d2 <_scanf_i+0x142>
 800568c:	f10b 0b01 	add.w	fp, fp, #1
 8005690:	f1b9 0f00 	cmp.w	r9, #0
 8005694:	d003      	beq.n	800569e <_scanf_i+0x10e>
 8005696:	3301      	adds	r3, #1
 8005698:	f109 39ff 	add.w	r9, r9, #4294967295
 800569c:	60a3      	str	r3, [r4, #8]
 800569e:	6873      	ldr	r3, [r6, #4]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	6073      	str	r3, [r6, #4]
 80056a6:	dd1b      	ble.n	80056e0 <_scanf_i+0x150>
 80056a8:	6833      	ldr	r3, [r6, #0]
 80056aa:	3301      	adds	r3, #1
 80056ac:	6033      	str	r3, [r6, #0]
 80056ae:	68a3      	ldr	r3, [r4, #8]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	60a3      	str	r3, [r4, #8]
 80056b4:	e7d9      	b.n	800566a <_scanf_i+0xda>
 80056b6:	f1bb 0f02 	cmp.w	fp, #2
 80056ba:	d1ae      	bne.n	800561a <_scanf_i+0x8a>
 80056bc:	6822      	ldr	r2, [r4, #0]
 80056be:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80056c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80056c6:	d1bf      	bne.n	8005648 <_scanf_i+0xb8>
 80056c8:	2310      	movs	r3, #16
 80056ca:	6063      	str	r3, [r4, #4]
 80056cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d0:	e7a2      	b.n	8005618 <_scanf_i+0x88>
 80056d2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80056d6:	6022      	str	r2, [r4, #0]
 80056d8:	780b      	ldrb	r3, [r1, #0]
 80056da:	f805 3b01 	strb.w	r3, [r5], #1
 80056de:	e7de      	b.n	800569e <_scanf_i+0x10e>
 80056e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80056e4:	4631      	mov	r1, r6
 80056e6:	4650      	mov	r0, sl
 80056e8:	4798      	blx	r3
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d0df      	beq.n	80056ae <_scanf_i+0x11e>
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	05d9      	lsls	r1, r3, #23
 80056f2:	d50d      	bpl.n	8005710 <_scanf_i+0x180>
 80056f4:	42bd      	cmp	r5, r7
 80056f6:	d909      	bls.n	800570c <_scanf_i+0x17c>
 80056f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80056fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005700:	4632      	mov	r2, r6
 8005702:	4650      	mov	r0, sl
 8005704:	4798      	blx	r3
 8005706:	f105 39ff 	add.w	r9, r5, #4294967295
 800570a:	464d      	mov	r5, r9
 800570c:	42bd      	cmp	r5, r7
 800570e:	d028      	beq.n	8005762 <_scanf_i+0x1d2>
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	f012 0210 	ands.w	r2, r2, #16
 8005716:	d113      	bne.n	8005740 <_scanf_i+0x1b0>
 8005718:	702a      	strb	r2, [r5, #0]
 800571a:	6863      	ldr	r3, [r4, #4]
 800571c:	9e01      	ldr	r6, [sp, #4]
 800571e:	4639      	mov	r1, r7
 8005720:	4650      	mov	r0, sl
 8005722:	47b0      	blx	r6
 8005724:	f8d8 3000 	ldr.w	r3, [r8]
 8005728:	6821      	ldr	r1, [r4, #0]
 800572a:	1d1a      	adds	r2, r3, #4
 800572c:	f8c8 2000 	str.w	r2, [r8]
 8005730:	f011 0f20 	tst.w	r1, #32
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	d00f      	beq.n	8005758 <_scanf_i+0x1c8>
 8005738:	6018      	str	r0, [r3, #0]
 800573a:	68e3      	ldr	r3, [r4, #12]
 800573c:	3301      	adds	r3, #1
 800573e:	60e3      	str	r3, [r4, #12]
 8005740:	1bed      	subs	r5, r5, r7
 8005742:	44ab      	add	fp, r5
 8005744:	6925      	ldr	r5, [r4, #16]
 8005746:	445d      	add	r5, fp
 8005748:	6125      	str	r5, [r4, #16]
 800574a:	2000      	movs	r0, #0
 800574c:	b007      	add	sp, #28
 800574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005752:	f04f 0b00 	mov.w	fp, #0
 8005756:	e7ca      	b.n	80056ee <_scanf_i+0x15e>
 8005758:	07ca      	lsls	r2, r1, #31
 800575a:	bf4c      	ite	mi
 800575c:	8018      	strhmi	r0, [r3, #0]
 800575e:	6018      	strpl	r0, [r3, #0]
 8005760:	e7eb      	b.n	800573a <_scanf_i+0x1aa>
 8005762:	2001      	movs	r0, #1
 8005764:	e7f2      	b.n	800574c <_scanf_i+0x1bc>
 8005766:	bf00      	nop
 8005768:	08005dc0 	.word	0x08005dc0
 800576c:	080059f1 	.word	0x080059f1
 8005770:	080058f5 	.word	0x080058f5
 8005774:	08005e30 	.word	0x08005e30

08005778 <__sccl>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	780b      	ldrb	r3, [r1, #0]
 800577c:	4604      	mov	r4, r0
 800577e:	2b5e      	cmp	r3, #94	; 0x5e
 8005780:	bf0b      	itete	eq
 8005782:	784b      	ldrbeq	r3, [r1, #1]
 8005784:	1c48      	addne	r0, r1, #1
 8005786:	1c88      	addeq	r0, r1, #2
 8005788:	2200      	movne	r2, #0
 800578a:	bf08      	it	eq
 800578c:	2201      	moveq	r2, #1
 800578e:	1e61      	subs	r1, r4, #1
 8005790:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005794:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005798:	42a9      	cmp	r1, r5
 800579a:	d1fb      	bne.n	8005794 <__sccl+0x1c>
 800579c:	b90b      	cbnz	r3, 80057a2 <__sccl+0x2a>
 800579e:	3801      	subs	r0, #1
 80057a0:	bd70      	pop	{r4, r5, r6, pc}
 80057a2:	f082 0101 	eor.w	r1, r2, #1
 80057a6:	54e1      	strb	r1, [r4, r3]
 80057a8:	1c42      	adds	r2, r0, #1
 80057aa:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80057ae:	2d2d      	cmp	r5, #45	; 0x2d
 80057b0:	f102 36ff 	add.w	r6, r2, #4294967295
 80057b4:	4610      	mov	r0, r2
 80057b6:	d006      	beq.n	80057c6 <__sccl+0x4e>
 80057b8:	2d5d      	cmp	r5, #93	; 0x5d
 80057ba:	d0f1      	beq.n	80057a0 <__sccl+0x28>
 80057bc:	b90d      	cbnz	r5, 80057c2 <__sccl+0x4a>
 80057be:	4630      	mov	r0, r6
 80057c0:	e7ee      	b.n	80057a0 <__sccl+0x28>
 80057c2:	462b      	mov	r3, r5
 80057c4:	e7ef      	b.n	80057a6 <__sccl+0x2e>
 80057c6:	7816      	ldrb	r6, [r2, #0]
 80057c8:	2e5d      	cmp	r6, #93	; 0x5d
 80057ca:	d0fa      	beq.n	80057c2 <__sccl+0x4a>
 80057cc:	42b3      	cmp	r3, r6
 80057ce:	dcf8      	bgt.n	80057c2 <__sccl+0x4a>
 80057d0:	4618      	mov	r0, r3
 80057d2:	3001      	adds	r0, #1
 80057d4:	4286      	cmp	r6, r0
 80057d6:	5421      	strb	r1, [r4, r0]
 80057d8:	dcfb      	bgt.n	80057d2 <__sccl+0x5a>
 80057da:	43d8      	mvns	r0, r3
 80057dc:	4430      	add	r0, r6
 80057de:	1c5d      	adds	r5, r3, #1
 80057e0:	42b3      	cmp	r3, r6
 80057e2:	bfa8      	it	ge
 80057e4:	2000      	movge	r0, #0
 80057e6:	182b      	adds	r3, r5, r0
 80057e8:	3202      	adds	r2, #2
 80057ea:	e7de      	b.n	80057aa <__sccl+0x32>

080057ec <_strtol_l.isra.0>:
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f2:	d001      	beq.n	80057f8 <_strtol_l.isra.0+0xc>
 80057f4:	2b24      	cmp	r3, #36	; 0x24
 80057f6:	d906      	bls.n	8005806 <_strtol_l.isra.0+0x1a>
 80057f8:	f7ff f930 	bl	8004a5c <__errno>
 80057fc:	2316      	movs	r3, #22
 80057fe:	6003      	str	r3, [r0, #0]
 8005800:	2000      	movs	r0, #0
 8005802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005806:	4f3a      	ldr	r7, [pc, #232]	; (80058f0 <_strtol_l.isra.0+0x104>)
 8005808:	468e      	mov	lr, r1
 800580a:	4676      	mov	r6, lr
 800580c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005810:	5de5      	ldrb	r5, [r4, r7]
 8005812:	f015 0508 	ands.w	r5, r5, #8
 8005816:	d1f8      	bne.n	800580a <_strtol_l.isra.0+0x1e>
 8005818:	2c2d      	cmp	r4, #45	; 0x2d
 800581a:	d134      	bne.n	8005886 <_strtol_l.isra.0+0x9a>
 800581c:	f89e 4000 	ldrb.w	r4, [lr]
 8005820:	f04f 0801 	mov.w	r8, #1
 8005824:	f106 0e02 	add.w	lr, r6, #2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d05c      	beq.n	80058e6 <_strtol_l.isra.0+0xfa>
 800582c:	2b10      	cmp	r3, #16
 800582e:	d10c      	bne.n	800584a <_strtol_l.isra.0+0x5e>
 8005830:	2c30      	cmp	r4, #48	; 0x30
 8005832:	d10a      	bne.n	800584a <_strtol_l.isra.0+0x5e>
 8005834:	f89e 4000 	ldrb.w	r4, [lr]
 8005838:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800583c:	2c58      	cmp	r4, #88	; 0x58
 800583e:	d14d      	bne.n	80058dc <_strtol_l.isra.0+0xf0>
 8005840:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005844:	2310      	movs	r3, #16
 8005846:	f10e 0e02 	add.w	lr, lr, #2
 800584a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800584e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005852:	2600      	movs	r6, #0
 8005854:	fbbc f9f3 	udiv	r9, ip, r3
 8005858:	4635      	mov	r5, r6
 800585a:	fb03 ca19 	mls	sl, r3, r9, ip
 800585e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005862:	2f09      	cmp	r7, #9
 8005864:	d818      	bhi.n	8005898 <_strtol_l.isra.0+0xac>
 8005866:	463c      	mov	r4, r7
 8005868:	42a3      	cmp	r3, r4
 800586a:	dd24      	ble.n	80058b6 <_strtol_l.isra.0+0xca>
 800586c:	2e00      	cmp	r6, #0
 800586e:	db1f      	blt.n	80058b0 <_strtol_l.isra.0+0xc4>
 8005870:	45a9      	cmp	r9, r5
 8005872:	d31d      	bcc.n	80058b0 <_strtol_l.isra.0+0xc4>
 8005874:	d101      	bne.n	800587a <_strtol_l.isra.0+0x8e>
 8005876:	45a2      	cmp	sl, r4
 8005878:	db1a      	blt.n	80058b0 <_strtol_l.isra.0+0xc4>
 800587a:	fb05 4503 	mla	r5, r5, r3, r4
 800587e:	2601      	movs	r6, #1
 8005880:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005884:	e7eb      	b.n	800585e <_strtol_l.isra.0+0x72>
 8005886:	2c2b      	cmp	r4, #43	; 0x2b
 8005888:	bf08      	it	eq
 800588a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800588e:	46a8      	mov	r8, r5
 8005890:	bf08      	it	eq
 8005892:	f106 0e02 	addeq.w	lr, r6, #2
 8005896:	e7c7      	b.n	8005828 <_strtol_l.isra.0+0x3c>
 8005898:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800589c:	2f19      	cmp	r7, #25
 800589e:	d801      	bhi.n	80058a4 <_strtol_l.isra.0+0xb8>
 80058a0:	3c37      	subs	r4, #55	; 0x37
 80058a2:	e7e1      	b.n	8005868 <_strtol_l.isra.0+0x7c>
 80058a4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80058a8:	2f19      	cmp	r7, #25
 80058aa:	d804      	bhi.n	80058b6 <_strtol_l.isra.0+0xca>
 80058ac:	3c57      	subs	r4, #87	; 0x57
 80058ae:	e7db      	b.n	8005868 <_strtol_l.isra.0+0x7c>
 80058b0:	f04f 36ff 	mov.w	r6, #4294967295
 80058b4:	e7e4      	b.n	8005880 <_strtol_l.isra.0+0x94>
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	da05      	bge.n	80058c6 <_strtol_l.isra.0+0xda>
 80058ba:	2322      	movs	r3, #34	; 0x22
 80058bc:	6003      	str	r3, [r0, #0]
 80058be:	4665      	mov	r5, ip
 80058c0:	b942      	cbnz	r2, 80058d4 <_strtol_l.isra.0+0xe8>
 80058c2:	4628      	mov	r0, r5
 80058c4:	e79d      	b.n	8005802 <_strtol_l.isra.0+0x16>
 80058c6:	f1b8 0f00 	cmp.w	r8, #0
 80058ca:	d000      	beq.n	80058ce <_strtol_l.isra.0+0xe2>
 80058cc:	426d      	negs	r5, r5
 80058ce:	2a00      	cmp	r2, #0
 80058d0:	d0f7      	beq.n	80058c2 <_strtol_l.isra.0+0xd6>
 80058d2:	b10e      	cbz	r6, 80058d8 <_strtol_l.isra.0+0xec>
 80058d4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80058d8:	6011      	str	r1, [r2, #0]
 80058da:	e7f2      	b.n	80058c2 <_strtol_l.isra.0+0xd6>
 80058dc:	2430      	movs	r4, #48	; 0x30
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1b3      	bne.n	800584a <_strtol_l.isra.0+0x5e>
 80058e2:	2308      	movs	r3, #8
 80058e4:	e7b1      	b.n	800584a <_strtol_l.isra.0+0x5e>
 80058e6:	2c30      	cmp	r4, #48	; 0x30
 80058e8:	d0a4      	beq.n	8005834 <_strtol_l.isra.0+0x48>
 80058ea:	230a      	movs	r3, #10
 80058ec:	e7ad      	b.n	800584a <_strtol_l.isra.0+0x5e>
 80058ee:	bf00      	nop
 80058f0:	08005e33 	.word	0x08005e33

080058f4 <_strtol_r>:
 80058f4:	f7ff bf7a 	b.w	80057ec <_strtol_l.isra.0>

080058f8 <_strtoul_l.isra.0>:
 80058f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058fc:	4e3b      	ldr	r6, [pc, #236]	; (80059ec <_strtoul_l.isra.0+0xf4>)
 80058fe:	4686      	mov	lr, r0
 8005900:	468c      	mov	ip, r1
 8005902:	4660      	mov	r0, ip
 8005904:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005908:	5da5      	ldrb	r5, [r4, r6]
 800590a:	f015 0508 	ands.w	r5, r5, #8
 800590e:	d1f8      	bne.n	8005902 <_strtoul_l.isra.0+0xa>
 8005910:	2c2d      	cmp	r4, #45	; 0x2d
 8005912:	d134      	bne.n	800597e <_strtoul_l.isra.0+0x86>
 8005914:	f89c 4000 	ldrb.w	r4, [ip]
 8005918:	f04f 0801 	mov.w	r8, #1
 800591c:	f100 0c02 	add.w	ip, r0, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d05e      	beq.n	80059e2 <_strtoul_l.isra.0+0xea>
 8005924:	2b10      	cmp	r3, #16
 8005926:	d10c      	bne.n	8005942 <_strtoul_l.isra.0+0x4a>
 8005928:	2c30      	cmp	r4, #48	; 0x30
 800592a:	d10a      	bne.n	8005942 <_strtoul_l.isra.0+0x4a>
 800592c:	f89c 0000 	ldrb.w	r0, [ip]
 8005930:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005934:	2858      	cmp	r0, #88	; 0x58
 8005936:	d14f      	bne.n	80059d8 <_strtoul_l.isra.0+0xe0>
 8005938:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800593c:	2310      	movs	r3, #16
 800593e:	f10c 0c02 	add.w	ip, ip, #2
 8005942:	f04f 37ff 	mov.w	r7, #4294967295
 8005946:	2500      	movs	r5, #0
 8005948:	fbb7 f7f3 	udiv	r7, r7, r3
 800594c:	fb03 f907 	mul.w	r9, r3, r7
 8005950:	ea6f 0909 	mvn.w	r9, r9
 8005954:	4628      	mov	r0, r5
 8005956:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800595a:	2e09      	cmp	r6, #9
 800595c:	d818      	bhi.n	8005990 <_strtoul_l.isra.0+0x98>
 800595e:	4634      	mov	r4, r6
 8005960:	42a3      	cmp	r3, r4
 8005962:	dd24      	ble.n	80059ae <_strtoul_l.isra.0+0xb6>
 8005964:	2d00      	cmp	r5, #0
 8005966:	db1f      	blt.n	80059a8 <_strtoul_l.isra.0+0xb0>
 8005968:	4287      	cmp	r7, r0
 800596a:	d31d      	bcc.n	80059a8 <_strtoul_l.isra.0+0xb0>
 800596c:	d101      	bne.n	8005972 <_strtoul_l.isra.0+0x7a>
 800596e:	45a1      	cmp	r9, r4
 8005970:	db1a      	blt.n	80059a8 <_strtoul_l.isra.0+0xb0>
 8005972:	fb00 4003 	mla	r0, r0, r3, r4
 8005976:	2501      	movs	r5, #1
 8005978:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800597c:	e7eb      	b.n	8005956 <_strtoul_l.isra.0+0x5e>
 800597e:	2c2b      	cmp	r4, #43	; 0x2b
 8005980:	bf08      	it	eq
 8005982:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005986:	46a8      	mov	r8, r5
 8005988:	bf08      	it	eq
 800598a:	f100 0c02 	addeq.w	ip, r0, #2
 800598e:	e7c7      	b.n	8005920 <_strtoul_l.isra.0+0x28>
 8005990:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005994:	2e19      	cmp	r6, #25
 8005996:	d801      	bhi.n	800599c <_strtoul_l.isra.0+0xa4>
 8005998:	3c37      	subs	r4, #55	; 0x37
 800599a:	e7e1      	b.n	8005960 <_strtoul_l.isra.0+0x68>
 800599c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80059a0:	2e19      	cmp	r6, #25
 80059a2:	d804      	bhi.n	80059ae <_strtoul_l.isra.0+0xb6>
 80059a4:	3c57      	subs	r4, #87	; 0x57
 80059a6:	e7db      	b.n	8005960 <_strtoul_l.isra.0+0x68>
 80059a8:	f04f 35ff 	mov.w	r5, #4294967295
 80059ac:	e7e4      	b.n	8005978 <_strtoul_l.isra.0+0x80>
 80059ae:	2d00      	cmp	r5, #0
 80059b0:	da07      	bge.n	80059c2 <_strtoul_l.isra.0+0xca>
 80059b2:	2322      	movs	r3, #34	; 0x22
 80059b4:	f8ce 3000 	str.w	r3, [lr]
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	b942      	cbnz	r2, 80059d0 <_strtoul_l.isra.0+0xd8>
 80059be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059c2:	f1b8 0f00 	cmp.w	r8, #0
 80059c6:	d000      	beq.n	80059ca <_strtoul_l.isra.0+0xd2>
 80059c8:	4240      	negs	r0, r0
 80059ca:	2a00      	cmp	r2, #0
 80059cc:	d0f7      	beq.n	80059be <_strtoul_l.isra.0+0xc6>
 80059ce:	b10d      	cbz	r5, 80059d4 <_strtoul_l.isra.0+0xdc>
 80059d0:	f10c 31ff 	add.w	r1, ip, #4294967295
 80059d4:	6011      	str	r1, [r2, #0]
 80059d6:	e7f2      	b.n	80059be <_strtoul_l.isra.0+0xc6>
 80059d8:	2430      	movs	r4, #48	; 0x30
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1b1      	bne.n	8005942 <_strtoul_l.isra.0+0x4a>
 80059de:	2308      	movs	r3, #8
 80059e0:	e7af      	b.n	8005942 <_strtoul_l.isra.0+0x4a>
 80059e2:	2c30      	cmp	r4, #48	; 0x30
 80059e4:	d0a2      	beq.n	800592c <_strtoul_l.isra.0+0x34>
 80059e6:	230a      	movs	r3, #10
 80059e8:	e7ab      	b.n	8005942 <_strtoul_l.isra.0+0x4a>
 80059ea:	bf00      	nop
 80059ec:	08005e33 	.word	0x08005e33

080059f0 <_strtoul_r>:
 80059f0:	f7ff bf82 	b.w	80058f8 <_strtoul_l.isra.0>

080059f4 <__submore>:
 80059f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f8:	460c      	mov	r4, r1
 80059fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80059fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a00:	4299      	cmp	r1, r3
 8005a02:	d11d      	bne.n	8005a40 <__submore+0x4c>
 8005a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a08:	f000 f8a8 	bl	8005b5c <_malloc_r>
 8005a0c:	b918      	cbnz	r0, 8005a16 <__submore+0x22>
 8005a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8005a1c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005a20:	6360      	str	r0, [r4, #52]	; 0x34
 8005a22:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005a26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005a2a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005a2e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005a32:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005a36:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005a3a:	6020      	str	r0, [r4, #0]
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	e7e8      	b.n	8005a12 <__submore+0x1e>
 8005a40:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005a42:	0077      	lsls	r7, r6, #1
 8005a44:	463a      	mov	r2, r7
 8005a46:	f000 f8e3 	bl	8005c10 <_realloc_r>
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d0de      	beq.n	8005a0e <__submore+0x1a>
 8005a50:	eb00 0806 	add.w	r8, r0, r6
 8005a54:	4601      	mov	r1, r0
 8005a56:	4632      	mov	r2, r6
 8005a58:	4640      	mov	r0, r8
 8005a5a:	f000 f807 	bl	8005a6c <memcpy>
 8005a5e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005a62:	f8c4 8000 	str.w	r8, [r4]
 8005a66:	e7e9      	b.n	8005a3c <__submore+0x48>

08005a68 <__retarget_lock_acquire_recursive>:
 8005a68:	4770      	bx	lr

08005a6a <__retarget_lock_release_recursive>:
 8005a6a:	4770      	bx	lr

08005a6c <memcpy>:
 8005a6c:	440a      	add	r2, r1
 8005a6e:	4291      	cmp	r1, r2
 8005a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a74:	d100      	bne.n	8005a78 <memcpy+0xc>
 8005a76:	4770      	bx	lr
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a82:	4291      	cmp	r1, r2
 8005a84:	d1f9      	bne.n	8005a7a <memcpy+0xe>
 8005a86:	bd10      	pop	{r4, pc}

08005a88 <memmove>:
 8005a88:	4288      	cmp	r0, r1
 8005a8a:	b510      	push	{r4, lr}
 8005a8c:	eb01 0402 	add.w	r4, r1, r2
 8005a90:	d902      	bls.n	8005a98 <memmove+0x10>
 8005a92:	4284      	cmp	r4, r0
 8005a94:	4623      	mov	r3, r4
 8005a96:	d807      	bhi.n	8005aa8 <memmove+0x20>
 8005a98:	1e43      	subs	r3, r0, #1
 8005a9a:	42a1      	cmp	r1, r4
 8005a9c:	d008      	beq.n	8005ab0 <memmove+0x28>
 8005a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005aa6:	e7f8      	b.n	8005a9a <memmove+0x12>
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4601      	mov	r1, r0
 8005aac:	428a      	cmp	r2, r1
 8005aae:	d100      	bne.n	8005ab2 <memmove+0x2a>
 8005ab0:	bd10      	pop	{r4, pc}
 8005ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005aba:	e7f7      	b.n	8005aac <memmove+0x24>

08005abc <_free_r>:
 8005abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005abe:	2900      	cmp	r1, #0
 8005ac0:	d048      	beq.n	8005b54 <_free_r+0x98>
 8005ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac6:	9001      	str	r0, [sp, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f1a1 0404 	sub.w	r4, r1, #4
 8005ace:	bfb8      	it	lt
 8005ad0:	18e4      	addlt	r4, r4, r3
 8005ad2:	f000 f8d3 	bl	8005c7c <__malloc_lock>
 8005ad6:	4a20      	ldr	r2, [pc, #128]	; (8005b58 <_free_r+0x9c>)
 8005ad8:	9801      	ldr	r0, [sp, #4]
 8005ada:	6813      	ldr	r3, [r2, #0]
 8005adc:	4615      	mov	r5, r2
 8005ade:	b933      	cbnz	r3, 8005aee <_free_r+0x32>
 8005ae0:	6063      	str	r3, [r4, #4]
 8005ae2:	6014      	str	r4, [r2, #0]
 8005ae4:	b003      	add	sp, #12
 8005ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aea:	f000 b8cd 	b.w	8005c88 <__malloc_unlock>
 8005aee:	42a3      	cmp	r3, r4
 8005af0:	d90b      	bls.n	8005b0a <_free_r+0x4e>
 8005af2:	6821      	ldr	r1, [r4, #0]
 8005af4:	1862      	adds	r2, r4, r1
 8005af6:	4293      	cmp	r3, r2
 8005af8:	bf04      	itt	eq
 8005afa:	681a      	ldreq	r2, [r3, #0]
 8005afc:	685b      	ldreq	r3, [r3, #4]
 8005afe:	6063      	str	r3, [r4, #4]
 8005b00:	bf04      	itt	eq
 8005b02:	1852      	addeq	r2, r2, r1
 8005b04:	6022      	streq	r2, [r4, #0]
 8005b06:	602c      	str	r4, [r5, #0]
 8005b08:	e7ec      	b.n	8005ae4 <_free_r+0x28>
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	b10b      	cbz	r3, 8005b14 <_free_r+0x58>
 8005b10:	42a3      	cmp	r3, r4
 8005b12:	d9fa      	bls.n	8005b0a <_free_r+0x4e>
 8005b14:	6811      	ldr	r1, [r2, #0]
 8005b16:	1855      	adds	r5, r2, r1
 8005b18:	42a5      	cmp	r5, r4
 8005b1a:	d10b      	bne.n	8005b34 <_free_r+0x78>
 8005b1c:	6824      	ldr	r4, [r4, #0]
 8005b1e:	4421      	add	r1, r4
 8005b20:	1854      	adds	r4, r2, r1
 8005b22:	42a3      	cmp	r3, r4
 8005b24:	6011      	str	r1, [r2, #0]
 8005b26:	d1dd      	bne.n	8005ae4 <_free_r+0x28>
 8005b28:	681c      	ldr	r4, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	6053      	str	r3, [r2, #4]
 8005b2e:	4421      	add	r1, r4
 8005b30:	6011      	str	r1, [r2, #0]
 8005b32:	e7d7      	b.n	8005ae4 <_free_r+0x28>
 8005b34:	d902      	bls.n	8005b3c <_free_r+0x80>
 8005b36:	230c      	movs	r3, #12
 8005b38:	6003      	str	r3, [r0, #0]
 8005b3a:	e7d3      	b.n	8005ae4 <_free_r+0x28>
 8005b3c:	6825      	ldr	r5, [r4, #0]
 8005b3e:	1961      	adds	r1, r4, r5
 8005b40:	428b      	cmp	r3, r1
 8005b42:	bf04      	itt	eq
 8005b44:	6819      	ldreq	r1, [r3, #0]
 8005b46:	685b      	ldreq	r3, [r3, #4]
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	bf04      	itt	eq
 8005b4c:	1949      	addeq	r1, r1, r5
 8005b4e:	6021      	streq	r1, [r4, #0]
 8005b50:	6054      	str	r4, [r2, #4]
 8005b52:	e7c7      	b.n	8005ae4 <_free_r+0x28>
 8005b54:	b003      	add	sp, #12
 8005b56:	bd30      	pop	{r4, r5, pc}
 8005b58:	200000e0 	.word	0x200000e0

08005b5c <_malloc_r>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	1ccd      	adds	r5, r1, #3
 8005b60:	f025 0503 	bic.w	r5, r5, #3
 8005b64:	3508      	adds	r5, #8
 8005b66:	2d0c      	cmp	r5, #12
 8005b68:	bf38      	it	cc
 8005b6a:	250c      	movcc	r5, #12
 8005b6c:	2d00      	cmp	r5, #0
 8005b6e:	4606      	mov	r6, r0
 8005b70:	db01      	blt.n	8005b76 <_malloc_r+0x1a>
 8005b72:	42a9      	cmp	r1, r5
 8005b74:	d903      	bls.n	8005b7e <_malloc_r+0x22>
 8005b76:	230c      	movs	r3, #12
 8005b78:	6033      	str	r3, [r6, #0]
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b7e:	f000 f87d 	bl	8005c7c <__malloc_lock>
 8005b82:	4921      	ldr	r1, [pc, #132]	; (8005c08 <_malloc_r+0xac>)
 8005b84:	680a      	ldr	r2, [r1, #0]
 8005b86:	4614      	mov	r4, r2
 8005b88:	b99c      	cbnz	r4, 8005bb2 <_malloc_r+0x56>
 8005b8a:	4f20      	ldr	r7, [pc, #128]	; (8005c0c <_malloc_r+0xb0>)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	b923      	cbnz	r3, 8005b9a <_malloc_r+0x3e>
 8005b90:	4621      	mov	r1, r4
 8005b92:	4630      	mov	r0, r6
 8005b94:	f000 f862 	bl	8005c5c <_sbrk_r>
 8005b98:	6038      	str	r0, [r7, #0]
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f000 f85d 	bl	8005c5c <_sbrk_r>
 8005ba2:	1c43      	adds	r3, r0, #1
 8005ba4:	d123      	bne.n	8005bee <_malloc_r+0x92>
 8005ba6:	230c      	movs	r3, #12
 8005ba8:	6033      	str	r3, [r6, #0]
 8005baa:	4630      	mov	r0, r6
 8005bac:	f000 f86c 	bl	8005c88 <__malloc_unlock>
 8005bb0:	e7e3      	b.n	8005b7a <_malloc_r+0x1e>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	1b5b      	subs	r3, r3, r5
 8005bb6:	d417      	bmi.n	8005be8 <_malloc_r+0x8c>
 8005bb8:	2b0b      	cmp	r3, #11
 8005bba:	d903      	bls.n	8005bc4 <_malloc_r+0x68>
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	441c      	add	r4, r3
 8005bc0:	6025      	str	r5, [r4, #0]
 8005bc2:	e004      	b.n	8005bce <_malloc_r+0x72>
 8005bc4:	6863      	ldr	r3, [r4, #4]
 8005bc6:	42a2      	cmp	r2, r4
 8005bc8:	bf0c      	ite	eq
 8005bca:	600b      	streq	r3, [r1, #0]
 8005bcc:	6053      	strne	r3, [r2, #4]
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f000 f85a 	bl	8005c88 <__malloc_unlock>
 8005bd4:	f104 000b 	add.w	r0, r4, #11
 8005bd8:	1d23      	adds	r3, r4, #4
 8005bda:	f020 0007 	bic.w	r0, r0, #7
 8005bde:	1ac2      	subs	r2, r0, r3
 8005be0:	d0cc      	beq.n	8005b7c <_malloc_r+0x20>
 8005be2:	1a1b      	subs	r3, r3, r0
 8005be4:	50a3      	str	r3, [r4, r2]
 8005be6:	e7c9      	b.n	8005b7c <_malloc_r+0x20>
 8005be8:	4622      	mov	r2, r4
 8005bea:	6864      	ldr	r4, [r4, #4]
 8005bec:	e7cc      	b.n	8005b88 <_malloc_r+0x2c>
 8005bee:	1cc4      	adds	r4, r0, #3
 8005bf0:	f024 0403 	bic.w	r4, r4, #3
 8005bf4:	42a0      	cmp	r0, r4
 8005bf6:	d0e3      	beq.n	8005bc0 <_malloc_r+0x64>
 8005bf8:	1a21      	subs	r1, r4, r0
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f000 f82e 	bl	8005c5c <_sbrk_r>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d1dd      	bne.n	8005bc0 <_malloc_r+0x64>
 8005c04:	e7cf      	b.n	8005ba6 <_malloc_r+0x4a>
 8005c06:	bf00      	nop
 8005c08:	200000e0 	.word	0x200000e0
 8005c0c:	200000e4 	.word	0x200000e4

08005c10 <_realloc_r>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	4607      	mov	r7, r0
 8005c14:	4614      	mov	r4, r2
 8005c16:	460e      	mov	r6, r1
 8005c18:	b921      	cbnz	r1, 8005c24 <_realloc_r+0x14>
 8005c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c1e:	4611      	mov	r1, r2
 8005c20:	f7ff bf9c 	b.w	8005b5c <_malloc_r>
 8005c24:	b922      	cbnz	r2, 8005c30 <_realloc_r+0x20>
 8005c26:	f7ff ff49 	bl	8005abc <_free_r>
 8005c2a:	4625      	mov	r5, r4
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c30:	f000 f830 	bl	8005c94 <_malloc_usable_size_r>
 8005c34:	42a0      	cmp	r0, r4
 8005c36:	d20f      	bcs.n	8005c58 <_realloc_r+0x48>
 8005c38:	4621      	mov	r1, r4
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	f7ff ff8e 	bl	8005b5c <_malloc_r>
 8005c40:	4605      	mov	r5, r0
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d0f2      	beq.n	8005c2c <_realloc_r+0x1c>
 8005c46:	4631      	mov	r1, r6
 8005c48:	4622      	mov	r2, r4
 8005c4a:	f7ff ff0f 	bl	8005a6c <memcpy>
 8005c4e:	4631      	mov	r1, r6
 8005c50:	4638      	mov	r0, r7
 8005c52:	f7ff ff33 	bl	8005abc <_free_r>
 8005c56:	e7e9      	b.n	8005c2c <_realloc_r+0x1c>
 8005c58:	4635      	mov	r5, r6
 8005c5a:	e7e7      	b.n	8005c2c <_realloc_r+0x1c>

08005c5c <_sbrk_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	4d06      	ldr	r5, [pc, #24]	; (8005c78 <_sbrk_r+0x1c>)
 8005c60:	2300      	movs	r3, #0
 8005c62:	4604      	mov	r4, r0
 8005c64:	4608      	mov	r0, r1
 8005c66:	602b      	str	r3, [r5, #0]
 8005c68:	f7fb fc98 	bl	800159c <_sbrk>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_sbrk_r+0x1a>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_sbrk_r+0x1a>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	200001e0 	.word	0x200001e0

08005c7c <__malloc_lock>:
 8005c7c:	4801      	ldr	r0, [pc, #4]	; (8005c84 <__malloc_lock+0x8>)
 8005c7e:	f7ff bef3 	b.w	8005a68 <__retarget_lock_acquire_recursive>
 8005c82:	bf00      	nop
 8005c84:	200001e8 	.word	0x200001e8

08005c88 <__malloc_unlock>:
 8005c88:	4801      	ldr	r0, [pc, #4]	; (8005c90 <__malloc_unlock+0x8>)
 8005c8a:	f7ff beee 	b.w	8005a6a <__retarget_lock_release_recursive>
 8005c8e:	bf00      	nop
 8005c90:	200001e8 	.word	0x200001e8

08005c94 <_malloc_usable_size_r>:
 8005c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c98:	1f18      	subs	r0, r3, #4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bfbc      	itt	lt
 8005c9e:	580b      	ldrlt	r3, [r1, r0]
 8005ca0:	18c0      	addlt	r0, r0, r3
 8005ca2:	4770      	bx	lr

08005ca4 <_init>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	bf00      	nop
 8005ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005caa:	bc08      	pop	{r3}
 8005cac:	469e      	mov	lr, r3
 8005cae:	4770      	bx	lr

08005cb0 <_fini>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	bf00      	nop
 8005cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb6:	bc08      	pop	{r3}
 8005cb8:	469e      	mov	lr, r3
 8005cba:	4770      	bx	lr
