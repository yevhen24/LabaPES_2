
LabaPES_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005118  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055c0  080055c0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  080055c0  080055c0  000155c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055c8  080055c8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055c8  080055c8  000155c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055cc  080055cc  000155cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080055d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200000b4  08005684  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005684  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010411  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002297  00000000  00000000  000304f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00032790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  000334d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223e0  00000000  00000000  00034148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010710  00000000  00000000  00056528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d12df  00000000  00000000  00066c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00137f17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd4  00000000  00000000  00137f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080052d0 	.word	0x080052d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	080052d0 	.word	0x080052d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <SetPTimer>:

__IO Ptimer_t Ptimer[MAX_NUMBER_OF_TIMERS] 	= {{255,0}};
__IO ptimerFlags_t ptimerFlags				= {0};

void SetPTimer(uint8_t NewNumber, uint32_t NewTime)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
	uint8_t free_timer			= 255;
 80005c4:	23ff      	movs	r3, #255	; 0xff
 80005c6:	73fb      	strb	r3, [r7, #15]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80005c8:	f3ef 8310 	mrs	r3, PRIMASK
 80005cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80005ce:	68bb      	ldr	r3, [r7, #8]
	uint8_t interrupts_enable	= ~__get_PRIMASK();
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	43db      	mvns	r3, r3
 80005d4:	737b      	strb	r3, [r7, #13]

	if (interrupts_enable) __disable_irq();
 80005d6:	7b7b      	ldrb	r3, [r7, #13]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SetPTimer+0x28>
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	bf00      	nop

	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	73bb      	strb	r3, [r7, #14]
 80005e4:	e01c      	b.n	8000620 <SetPTimer+0x68>
	{
		if (Ptimer[i].Number == NewNumber)
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <SetPTimer+0xa0>)
 80005ea:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	79fa      	ldrb	r2, [r7, #7]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d108      	bne.n	8000608 <SetPTimer+0x50>
		{
			Ptimer[i].Time = NewTime;
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	4a17      	ldr	r2, [pc, #92]	; (8000658 <SetPTimer+0xa0>)
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	4413      	add	r3, r2
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	605a      	str	r2, [r3, #4]
			free_timer = 255;
 8000602:	23ff      	movs	r3, #255	; 0xff
 8000604:	73fb      	strb	r3, [r7, #15]
			break;
 8000606:	e00e      	b.n	8000626 <SetPTimer+0x6e>
		}
		if (Ptimer[i].Number == 255)
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <SetPTimer+0xa0>)
 800060c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2bff      	cmp	r3, #255	; 0xff
 8000614:	d101      	bne.n	800061a <SetPTimer+0x62>
		{
			free_timer = i;
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b08      	cmp	r3, #8
 8000624:	d1df      	bne.n	80005e6 <SetPTimer+0x2e>
		}
	}
	if (free_timer < MAX_NUMBER_OF_TIMERS)
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b07      	cmp	r3, #7
 800062a:	d80a      	bhi.n	8000642 <SetPTimer+0x8a>
	{
		Ptimer[free_timer].Number = NewNumber;
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	490a      	ldr	r1, [pc, #40]	; (8000658 <SetPTimer+0xa0>)
 8000630:	79fa      	ldrb	r2, [r7, #7]
 8000632:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
		Ptimer[free_timer].Time = NewTime;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <SetPTimer+0xa0>)
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	4413      	add	r3, r2
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	605a      	str	r2, [r3, #4]
	}

	if (interrupts_enable) __enable_irq();
 8000642:	7b7b      	ldrb	r3, [r7, #13]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SetPTimer+0x94>
  __ASM volatile ("cpsie i" : : : "memory");
 8000648:	b662      	cpsie	i
}
 800064a:	bf00      	nop
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	20000000 	.word	0x20000000

0800065c <InitPTimer>:
		}
	}
}

void InitPTimer(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 8000662:	2300      	movs	r3, #0
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	e00d      	b.n	8000684 <InitPTimer+0x28>
	{
		Ptimer[i].Number = 255;
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <InitPTimer+0x3c>)
 800066c:	21ff      	movs	r1, #255	; 0xff
 800066e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		Ptimer[i].Time = 0;
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4a08      	ldr	r2, [pc, #32]	; (8000698 <InitPTimer+0x3c>)
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	4413      	add	r3, r2
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	3301      	adds	r3, #1
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2b08      	cmp	r3, #8
 8000688:	d1ee      	bne.n	8000668 <InitPTimer+0xc>
	}
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000000 	.word	0x20000000

0800069c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0c      	blt.n	80006c8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <__NVIC_ClearPendingIRQ+0x38>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	3360      	adds	r3, #96	; 0x60
 80006c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b0ca      	sub	sp, #296	; 0x128
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t tstring[255];
	uint8_t rstring[BUFF_SIZE + 1];
	char string[10] = {0,0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f000 fdd4 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f980 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f000 faae 	bl	8000c54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006f8:	f000 fa82 	bl	8000c00 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80006fc:	f000 f9e6 	bl	8000acc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  RING_Init(&ring, buff, sizeof(buff) / sizeof(buff[0])); // Initialize UART receiver ring buffer.
 8000700:	2210      	movs	r2, #16
 8000702:	49a1      	ldr	r1, [pc, #644]	; (8000988 <main+0x2b0>)
 8000704:	48a1      	ldr	r0, [pc, #644]	; (800098c <main+0x2b4>)
 8000706:	f000 fb72 	bl	8000dee <RING_Init>
  sprintf((char*)tstring,"\r\nEnter command:\n\r"
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	49a0      	ldr	r1, [pc, #640]	; (8000990 <main+0x2b8>)
 8000710:	4618      	mov	r0, r3
 8000712:	f003 fceb 	bl	80040ec <siprintf>
  		  "L=xx -- brightness for LEDs, where xx - value of brightness\n\r"
  		  "OR\n\r"
  		  "l=xx -- brightness for LEDs, where xx - value of brightness.\n\r\n\r");
  HAL_UART_Transmit(&huart2,tstring,strlen((char*)tstring), HAL_MAX_DELAY);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd78 	bl	8000210 <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
 800072c:	4899      	ldr	r0, [pc, #612]	; (8000994 <main+0x2bc>)
 800072e:	f002 fcec 	bl	800310a <HAL_UART_Transmit>
  // Start UART receiver in the non blocking mode
  HAL_UART_Receive_IT(&huart2,ring.buffer,1);
 8000732:	4b96      	ldr	r3, [pc, #600]	; (800098c <main+0x2b4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2201      	movs	r2, #1
 8000738:	4619      	mov	r1, r3
 800073a:	4896      	ldr	r0, [pc, #600]	; (8000994 <main+0x2bc>)
 800073c:	f002 fdbc 	bl	80032b8 <HAL_UART_Receive_IT>
  TIM1->CCR1 = brightness;
 8000740:	4b95      	ldr	r3, [pc, #596]	; (8000998 <main+0x2c0>)
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	4b95      	ldr	r3, [pc, #596]	; (800099c <main+0x2c4>)
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = brightness;
 8000748:	4b93      	ldr	r3, [pc, #588]	; (8000998 <main+0x2c0>)
 800074a:	781a      	ldrb	r2, [r3, #0]
 800074c:	4b93      	ldr	r3, [pc, #588]	; (800099c <main+0x2c4>)
 800074e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = brightness;
 8000750:	4b91      	ldr	r3, [pc, #580]	; (8000998 <main+0x2c0>)
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	4b91      	ldr	r3, [pc, #580]	; (800099c <main+0x2c4>)
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000758:	2100      	movs	r1, #0
 800075a:	4891      	ldr	r0, [pc, #580]	; (80009a0 <main+0x2c8>)
 800075c:	f001 ff4a 	bl	80025f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000760:	2104      	movs	r1, #4
 8000762:	488f      	ldr	r0, [pc, #572]	; (80009a0 <main+0x2c8>)
 8000764:	f001 ff46 	bl	80025f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000768:	2108      	movs	r1, #8
 800076a:	488d      	ldr	r0, [pc, #564]	; (80009a0 <main+0x2c8>)
 800076c:	f001 ff42 	bl	80025f4 <HAL_TIM_PWM_Start>
  InitPTimer();
 8000770:	f7ff ff74 	bl	800065c <InitPTimer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000774:	2100      	movs	r1, #0
 8000776:	488a      	ldr	r0, [pc, #552]	; (80009a0 <main+0x2c8>)
 8000778:	f002 f804 	bl	8002784 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800077c:	2104      	movs	r1, #4
 800077e:	4888      	ldr	r0, [pc, #544]	; (80009a0 <main+0x2c8>)
 8000780:	f002 f800 	bl	8002784 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000784:	2108      	movs	r1, #8
 8000786:	4886      	ldr	r0, [pc, #536]	; (80009a0 <main+0x2c8>)
 8000788:	f001 fffc 	bl	8002784 <HAL_TIM_PWM_Stop>
		switch(flag_btn)
 800078c:	4b85      	ldr	r3, [pc, #532]	; (80009a4 <main+0x2cc>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b07      	cmp	r3, #7
 8000792:	d86f      	bhi.n	8000874 <main+0x19c>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <main+0xc4>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007bd 	.word	0x080007bd
 80007a0:	080007d1 	.word	0x080007d1
 80007a4:	080007e7 	.word	0x080007e7
 80007a8:	080007fd 	.word	0x080007fd
 80007ac:	08000815 	.word	0x08000815
 80007b0:	0800082b 	.word	0x0800082b
 80007b4:	08000843 	.word	0x08000843
 80007b8:	0800085b 	.word	0x0800085b
		{
			case 0:
				TIM1->CCR1 = 0;
 80007bc:	4b77      	ldr	r3, [pc, #476]	; (800099c <main+0x2c4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80007c2:	4b76      	ldr	r3, [pc, #472]	; (800099c <main+0x2c4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80007c8:	4b74      	ldr	r3, [pc, #464]	; (800099c <main+0x2c4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80007ce:	e051      	b.n	8000874 <main+0x19c>
			case 1:
				TIM1->CCR1 = 0;
 80007d0:	4b72      	ldr	r3, [pc, #456]	; (800099c <main+0x2c4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80007d6:	4b71      	ldr	r3, [pc, #452]	; (800099c <main+0x2c4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = brightness;
 80007dc:	4b6e      	ldr	r3, [pc, #440]	; (8000998 <main+0x2c0>)
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	4b6e      	ldr	r3, [pc, #440]	; (800099c <main+0x2c4>)
 80007e2:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80007e4:	e046      	b.n	8000874 <main+0x19c>
			case 2:
				TIM1->CCR1 = 0;
 80007e6:	4b6d      	ldr	r3, [pc, #436]	; (800099c <main+0x2c4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = brightness;
 80007ec:	4b6a      	ldr	r3, [pc, #424]	; (8000998 <main+0x2c0>)
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	4b6a      	ldr	r3, [pc, #424]	; (800099c <main+0x2c4>)
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80007f4:	4b69      	ldr	r3, [pc, #420]	; (800099c <main+0x2c4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80007fa:	e03b      	b.n	8000874 <main+0x19c>
			case 3:
				TIM1->CCR1 = 0;
 80007fc:	4b67      	ldr	r3, [pc, #412]	; (800099c <main+0x2c4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = brightness;
 8000802:	4b65      	ldr	r3, [pc, #404]	; (8000998 <main+0x2c0>)
 8000804:	781a      	ldrb	r2, [r3, #0]
 8000806:	4b65      	ldr	r3, [pc, #404]	; (800099c <main+0x2c4>)
 8000808:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = brightness;
 800080a:	4b63      	ldr	r3, [pc, #396]	; (8000998 <main+0x2c0>)
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	4b63      	ldr	r3, [pc, #396]	; (800099c <main+0x2c4>)
 8000810:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000812:	e02f      	b.n	8000874 <main+0x19c>
			case 4:
				TIM1->CCR1 = brightness;
 8000814:	4b60      	ldr	r3, [pc, #384]	; (8000998 <main+0x2c0>)
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	4b60      	ldr	r3, [pc, #384]	; (800099c <main+0x2c4>)
 800081a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800081c:	4b5f      	ldr	r3, [pc, #380]	; (800099c <main+0x2c4>)
 800081e:	2200      	movs	r2, #0
 8000820:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8000822:	4b5e      	ldr	r3, [pc, #376]	; (800099c <main+0x2c4>)
 8000824:	2200      	movs	r2, #0
 8000826:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000828:	e024      	b.n	8000874 <main+0x19c>
			case 5:
				TIM1->CCR1 = brightness;
 800082a:	4b5b      	ldr	r3, [pc, #364]	; (8000998 <main+0x2c0>)
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	4b5b      	ldr	r3, [pc, #364]	; (800099c <main+0x2c4>)
 8000830:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8000832:	4b5a      	ldr	r3, [pc, #360]	; (800099c <main+0x2c4>)
 8000834:	2200      	movs	r2, #0
 8000836:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = brightness;
 8000838:	4b57      	ldr	r3, [pc, #348]	; (8000998 <main+0x2c0>)
 800083a:	781a      	ldrb	r2, [r3, #0]
 800083c:	4b57      	ldr	r3, [pc, #348]	; (800099c <main+0x2c4>)
 800083e:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000840:	e018      	b.n	8000874 <main+0x19c>
			case 6:
				TIM1->CCR1 = brightness;
 8000842:	4b55      	ldr	r3, [pc, #340]	; (8000998 <main+0x2c0>)
 8000844:	781a      	ldrb	r2, [r3, #0]
 8000846:	4b55      	ldr	r3, [pc, #340]	; (800099c <main+0x2c4>)
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = brightness;
 800084a:	4b53      	ldr	r3, [pc, #332]	; (8000998 <main+0x2c0>)
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	4b53      	ldr	r3, [pc, #332]	; (800099c <main+0x2c4>)
 8000850:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8000852:	4b52      	ldr	r3, [pc, #328]	; (800099c <main+0x2c4>)
 8000854:	2200      	movs	r2, #0
 8000856:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000858:	e00c      	b.n	8000874 <main+0x19c>
			case 7:
				TIM1->CCR1 = brightness;
 800085a:	4b4f      	ldr	r3, [pc, #316]	; (8000998 <main+0x2c0>)
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	4b4f      	ldr	r3, [pc, #316]	; (800099c <main+0x2c4>)
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = brightness;
 8000862:	4b4d      	ldr	r3, [pc, #308]	; (8000998 <main+0x2c0>)
 8000864:	781a      	ldrb	r2, [r3, #0]
 8000866:	4b4d      	ldr	r3, [pc, #308]	; (800099c <main+0x2c4>)
 8000868:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = brightness;
 800086a:	4b4b      	ldr	r3, [pc, #300]	; (8000998 <main+0x2c0>)
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	4b4b      	ldr	r3, [pc, #300]	; (800099c <main+0x2c4>)
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000872:	bf00      	nop
		}
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000874:	2100      	movs	r1, #0
 8000876:	484a      	ldr	r0, [pc, #296]	; (80009a0 <main+0x2c8>)
 8000878:	f001 febc 	bl	80025f4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800087c:	2104      	movs	r1, #4
 800087e:	4848      	ldr	r0, [pc, #288]	; (80009a0 <main+0x2c8>)
 8000880:	f001 feb8 	bl	80025f4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000884:	2108      	movs	r1, #8
 8000886:	4846      	ldr	r0, [pc, #280]	; (80009a0 <main+0x2c8>)
 8000888:	f001 feb4 	bl	80025f4 <HAL_TIM_PWM_Start>

			flag_irq = 0;
			flag_btn++;
			if (flag_btn > 7) flag_btn = 0;
		}*/
		if (Ring_GetMessage(&ring, rstring))
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4619      	mov	r1, r3
 8000892:	483e      	ldr	r0, [pc, #248]	; (800098c <main+0x2b4>)
 8000894:	f000 fb1f 	bl	8000ed6 <Ring_GetMessage>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	f43f af6a 	beq.w	8000774 <main+0x9c>
		{
			sscanf((char*)rstring,"%s", string);
 80008a0:	1d3a      	adds	r2, r7, #4
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4940      	ldr	r1, [pc, #256]	; (80009a8 <main+0x2d0>)
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 fc3f 	bl	800412c <siscanf>
			for (int i = 0; i < 3; i++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80008b4:	e00f      	b.n	80008d6 <main+0x1fe>
			{
				str[i] = string[i+2];
 80008b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008ba:	3302      	adds	r3, #2
 80008bc:	1d3a      	adds	r2, r7, #4
 80008be:	5cd1      	ldrb	r1, [r2, r3]
 80008c0:	4a3a      	ldr	r2, [pc, #232]	; (80009ac <main+0x2d4>)
 80008c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008c6:	4413      	add	r3, r2
 80008c8:	460a      	mov	r2, r1
 80008ca:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 3; i++)
 80008cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008d0:	3301      	adds	r3, #1
 80008d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80008d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008da:	2b02      	cmp	r3, #2
 80008dc:	ddeb      	ble.n	80008b6 <main+0x1de>
			}
			if (str[1] == '\r' || str[1] == '\n' || str[1] == '\0')
 80008de:	4b33      	ldr	r3, [pc, #204]	; (80009ac <main+0x2d4>)
 80008e0:	785b      	ldrb	r3, [r3, #1]
 80008e2:	2b0d      	cmp	r3, #13
 80008e4:	d007      	beq.n	80008f6 <main+0x21e>
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <main+0x2d4>)
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	2b0a      	cmp	r3, #10
 80008ec:	d003      	beq.n	80008f6 <main+0x21e>
 80008ee:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <main+0x2d4>)
 80008f0:	785b      	ldrb	r3, [r3, #1]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d109      	bne.n	800090a <main+0x232>
			{
				brightness = ((int) str[0]) - 48;
 80008f6:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <main+0x2d4>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	3b30      	subs	r3, #48	; 0x30
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b26      	ldr	r3, [pc, #152]	; (8000998 <main+0x2c0>)
 8000900:	701a      	strb	r2, [r3, #0]
				flag_err = 1;
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <main+0x2d8>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e023      	b.n	8000952 <main+0x27a>
			}
			else if (str[2] == '\r' || str[2] == '\n' || str[2] == '\0')
 800090a:	4b28      	ldr	r3, [pc, #160]	; (80009ac <main+0x2d4>)
 800090c:	789b      	ldrb	r3, [r3, #2]
 800090e:	2b0d      	cmp	r3, #13
 8000910:	d007      	beq.n	8000922 <main+0x24a>
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <main+0x2d4>)
 8000914:	789b      	ldrb	r3, [r3, #2]
 8000916:	2b0a      	cmp	r3, #10
 8000918:	d003      	beq.n	8000922 <main+0x24a>
 800091a:	4b24      	ldr	r3, [pc, #144]	; (80009ac <main+0x2d4>)
 800091c:	789b      	ldrb	r3, [r3, #2]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d114      	bne.n	800094c <main+0x274>
			{
				brightness = ((((int) str[0]) - 48) * 10) + (((int) str[1]) - 48);
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <main+0x2d4>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	3b30      	subs	r3, #48	; 0x30
 8000928:	b2db      	uxtb	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	0092      	lsls	r2, r2, #2
 800092e:	4413      	add	r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <main+0x2d4>)
 8000936:	785b      	ldrb	r3, [r3, #1]
 8000938:	4413      	add	r3, r2
 800093a:	b2db      	uxtb	r3, r3
 800093c:	3b30      	subs	r3, #48	; 0x30
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <main+0x2c0>)
 8000942:	701a      	strb	r2, [r3, #0]
				flag_err = 1;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <main+0x2d8>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	e002      	b.n	8000952 <main+0x27a>
			}
			else
			{
				flag_err = 2;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <main+0x2d8>)
 800094e:	2202      	movs	r2, #2
 8000950:	701a      	strb	r2, [r3, #0]
			}
			RING_Clear(&ring);
 8000952:	480e      	ldr	r0, [pc, #56]	; (800098c <main+0x2b4>)
 8000954:	f000 fa66 	bl	8000e24 <RING_Clear>
			if ((string[0] == 'L' || string[0] == 'l') && (string[1] == '=') && (flag_err == 1))
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b4c      	cmp	r3, #76	; 0x4c
 800095e:	d003      	beq.n	8000968 <main+0x290>
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b6c      	cmp	r3, #108	; 0x6c
 8000966:	d127      	bne.n	80009b8 <main+0x2e0>
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	785b      	ldrb	r3, [r3, #1]
 800096c:	2b3d      	cmp	r3, #61	; 0x3d
 800096e:	d123      	bne.n	80009b8 <main+0x2e0>
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <main+0x2d8>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d11f      	bne.n	80009b8 <main+0x2e0>
			{
				sprintf((char*)tstring,"\n\rEcho: %s\n\r"
 8000978:	1d3a      	adds	r2, r7, #4
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	490d      	ldr	r1, [pc, #52]	; (80009b4 <main+0x2dc>)
 8000980:	4618      	mov	r0, r3
 8000982:	f003 fbb3 	bl	80040ec <siprintf>
 8000986:	e01d      	b.n	80009c4 <main+0x2ec>
 8000988:	200000e4 	.word	0x200000e4
 800098c:	20000180 	.word	0x20000180
 8000990:	080052e8 	.word	0x080052e8
 8000994:	2000013c 	.word	0x2000013c
 8000998:	20000040 	.word	0x20000040
 800099c:	40010000 	.word	0x40010000
 80009a0:	200000f4 	.word	0x200000f4
 80009a4:	200000d1 	.word	0x200000d1
 80009a8:	0800537c 	.word	0x0800537c
 80009ac:	200000d4 	.word	0x200000d4
 80009b0:	200000d0 	.word	0x200000d0
 80009b4:	08005380 	.word	0x08005380
							  "Enter command 'L=xx' or 'l=xx'\r\n",string);
			}
			else
			{
				sprintf((char*)tstring,"\n\rEcho: Wrong command!!!\r\n"
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	490a      	ldr	r1, [pc, #40]	; (80009e8 <main+0x310>)
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 fb94 	bl	80040ec <siprintf>
							  "Enter command 'L=xx' or 'l=xx'\r\n");
			}
			HAL_UART_Transmit_IT(&huart2,tstring,strlen((char*)tstring));
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fc21 	bl	8000210 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <main+0x314>)
 80009da:	f002 fc28 	bl	800322e <HAL_UART_Transmit_IT>
			flag_err = 0;
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <main+0x318>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80009e4:	e6c6      	b.n	8000774 <main+0x9c>
 80009e6:	bf00      	nop
 80009e8:	080053b0 	.word	0x080053b0
 80009ec:	2000013c 	.word	0x2000013c
 80009f0:	200000d0 	.word	0x200000d0

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	; 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2234      	movs	r2, #52	; 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 fb6a 	bl	80040dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <SystemClock_Config+0xd0>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <SystemClock_Config+0xd0>)
 8000a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a26:	6413      	str	r3, [r2, #64]	; 0x40
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <SystemClock_Config+0xd0>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <SystemClock_Config+0xd4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a40:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <SystemClock_Config+0xd4>)
 8000a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <SystemClock_Config+0xd4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a6c:	2348      	movs	r3, #72	; 0x48
 8000a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fac9 	bl	8002018 <HAL_RCC_OscConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a8c:	f000 f9aa 	bl	8000de4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a90:	230f      	movs	r3, #15
 8000a92:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a94:	2302      	movs	r3, #2
 8000a96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 ffe7 	bl	8001a80 <HAL_RCC_ClockConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ab8:	f000 f994 	bl	8000de4 <Error_Handler>
  }
}
 8000abc:	bf00      	nop
 8000abe:	3750      	adds	r7, #80	; 0x50
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40007000 	.word	0x40007000

08000acc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b092      	sub	sp, #72	; 0x48
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
 8000aec:	615a      	str	r2, [r3, #20]
 8000aee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2220      	movs	r2, #32
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 faf0 	bl	80040dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000afc:	4b3e      	ldr	r3, [pc, #248]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000afe:	4a3f      	ldr	r2, [pc, #252]	; (8000bfc <MX_TIM1_Init+0x130>)
 8000b00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000b02:	4b3d      	ldr	r3, [pc, #244]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000b04:	2247      	movs	r2, #71	; 0x47
 8000b06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000b10:	2263      	movs	r2, #99	; 0x63
 8000b12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b1a:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b20:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b26:	4834      	ldr	r0, [pc, #208]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000b28:	f001 fd14 	bl	8002554 <HAL_TIM_PWM_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000b32:	f000 f957 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b42:	4619      	mov	r1, r3
 8000b44:	482c      	ldr	r0, [pc, #176]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000b46:	f002 f9c5 	bl	8002ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000b50:	f000 f948 	bl	8000de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b54:	2360      	movs	r3, #96	; 0x60
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	481f      	ldr	r0, [pc, #124]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000b7a:	f001 fe73 	bl	8002864 <HAL_TIM_PWM_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000b84:	f000 f92e 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4819      	ldr	r0, [pc, #100]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000b92:	f001 fe67 	bl	8002864 <HAL_TIM_PWM_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000b9c:	f000 f922 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	2208      	movs	r2, #8
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000baa:	f001 fe5b 	bl	8002864 <HAL_TIM_PWM_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000bb4:	f000 f916 	bl	8000de4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000bdc:	f002 f9f6 	bl	8002fcc <HAL_TIMEx_ConfigBreakDeadTime>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000be6:	f000 f8fd 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <MX_TIM1_Init+0x12c>)
 8000bec:	f000 fa1c 	bl	8001028 <HAL_TIM_MspPostInit>

}
 8000bf0:	bf00      	nop
 8000bf2:	3748      	adds	r7, #72	; 0x48
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200000f4 	.word	0x200000f4
 8000bfc:	40010000 	.word	0x40010000

08000c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_USART2_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c38:	f002 fa1a 	bl	8003070 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f000 f8cf 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000013c 	.word	0x2000013c
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <MX_GPIO_Init+0xa0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <MX_GPIO_Init+0xa0>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <MX_GPIO_Init+0xa0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_GPIO_Init+0xa0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <MX_GPIO_Init+0xa0>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_GPIO_Init+0xa0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_GPIO_Init+0xa0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <MX_GPIO_Init+0xa0>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_GPIO_Init+0xa0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <MX_GPIO_Init+0xa4>)
 8000cd6:	f000 fd27 	bl	8001728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2028      	movs	r0, #40	; 0x28
 8000ce0:	f000 fc4b 	bl	800157a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ce4:	2028      	movs	r0, #40	; 0x28
 8000ce6:	f000 fc64 	bl	80015b2 <HAL_NVIC_EnableIRQ>

}
 8000cea:	bf00      	nop
 8000cec:	3720      	adds	r7, #32
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020800 	.word	0x40020800

08000cfc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	// Check that interrupt caused by UART2
	if (huart == &huart2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_UART_RxCpltCallback+0x80>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d133      	bne.n	8000d74 <HAL_UART_RxCpltCallback+0x78>
	{
		// Put new character from the UART receiver data register (DR) to the ring buffer
		RING_Put(huart->Instance->DR, &ring);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	491a      	ldr	r1, [pc, #104]	; (8000d80 <HAL_UART_RxCpltCallback+0x84>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f89e 	bl	8000e58 <RING_Put>
		// Set the overrun flag if the message is longer than ring buffer can hold
		if (ring.idxOut == ring.idxIn) ring.flag.BufferOverrun = 1;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_UART_RxCpltCallback+0x84>)
 8000d1e:	88da      	ldrh	r2, [r3, #6]
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_UART_RxCpltCallback+0x84>)
 8000d22:	889b      	ldrh	r3, [r3, #4]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d104      	bne.n	8000d32 <HAL_UART_RxCpltCallback+0x36>
 8000d28:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <HAL_UART_RxCpltCallback+0x84>)
 8000d2a:	7b13      	ldrb	r3, [r2, #12]
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	7313      	strb	r3, [r2, #12]
		// Set the message ready flag if the end of line character has been received
		if ((ring.buffer[ring.idxIn -1] == '\r') || (ring.buffer[ring.idxOut -1] == '\n'))
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_UART_RxCpltCallback+0x84>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_UART_RxCpltCallback+0x84>)
 8000d38:	889b      	ldrh	r3, [r3, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b0d      	cmp	r3, #13
 8000d42:	d008      	beq.n	8000d56 <HAL_UART_RxCpltCallback+0x5a>
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_UART_RxCpltCallback+0x84>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_UART_RxCpltCallback+0x84>)
 8000d4a:	88db      	ldrh	r3, [r3, #6]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b0a      	cmp	r3, #10
 8000d54:	d104      	bne.n	8000d60 <HAL_UART_RxCpltCallback+0x64>
			ring.flag.MessageReady = 1;
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_UART_RxCpltCallback+0x84>)
 8000d58:	7b13      	ldrb	r3, [r2, #12]
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	7313      	strb	r3, [r2, #12]
		// Receive the next character from UART in non blocking mode
		HAL_UART_Receive_IT(&huart2,&ring.buffer[ring.idxOut],1);
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <HAL_UART_RxCpltCallback+0x84>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <HAL_UART_RxCpltCallback+0x84>)
 8000d66:	88d2      	ldrh	r2, [r2, #6]
 8000d68:	4413      	add	r3, r2
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4803      	ldr	r0, [pc, #12]	; (8000d7c <HAL_UART_RxCpltCallback+0x80>)
 8000d70:	f002 faa2 	bl	80032b8 <HAL_UART_Receive_IT>
	}
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000013c 	.word	0x2000013c
 8000d80:	20000180 	.word	0x20000180

08000d84 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN1_Pin)
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d94:	d11d      	bne.n	8000dd2 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000d96:	2028      	movs	r0, #40	; 0x28
 8000d98:	f000 fc19 	bl	80015ce <HAL_NVIC_DisableIRQ>
		//flag_irq = 1;
		//time_irq = HAL_GetTick();
		SetPTimer(3, 200);
 8000d9c:	21c8      	movs	r1, #200	; 0xc8
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f7ff fc0a 	bl	80005b8 <SetPTimer>
		flag_btn++;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x58>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x58>)
 8000dae:	701a      	strb	r2, [r3, #0]
		if (flag_btn > 7) flag_btn = 0;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b07      	cmp	r3, #7
 8000db6:	d902      	bls.n	8000dbe <HAL_GPIO_EXTI_Callback+0x3a>
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(BTN1_Pin);
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000dc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc4:	615a      	str	r2, [r3, #20]
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000dc6:	2028      	movs	r0, #40	; 0x28
 8000dc8:	f7ff fc68 	bl	800069c <__NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dcc:	2028      	movs	r0, #40	; 0x28
 8000dce:	f000 fbf0 	bl	80015b2 <HAL_NVIC_EnableIRQ>
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000d1 	.word	0x200000d1
 8000de0:	40013c00 	.word	0x40013c00

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dec:	e7fe      	b.n	8000dec <Error_Handler+0x8>

08000dee <RING_Init>:
@param uint8_t *buf − Указатель на буфер хранения.
@param uint16_t size − Сколько элементов в буфере.
@return RING_ErrorStatus_t Результат инициализации @ref RING_ErrorStatus_t
 */
RING_ErrorStatus_t RING_Init(RING_buffer_t *ring, uint8_t *buf, uint16_t size)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	80fb      	strh	r3, [r7, #6]
    ring->size = size;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	88fa      	ldrh	r2, [r7, #6]
 8000e00:	811a      	strh	r2, [r3, #8]
    ring->buffer = buf;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	601a      	str	r2, [r3, #0]
    RING_Clear( ring );
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f000 f80b 	bl	8000e24 <RING_Clear>

    return ( ring->buffer ? RING_SUCCESS : RING_ERROR ) ;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf14      	ite	ne
 8000e16:	2301      	movne	r3, #1
 8000e18:	2300      	moveq	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <RING_Clear>:
/**
@function RING_Clear − Очищает буфер.
@param RING_buffer_t *buf − Указатель на кольцевой буфер.
 */
void RING_Clear(RING_buffer_t* buf)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    buf->idxIn = 0;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	809a      	strh	r2, [r3, #4]
    buf->idxOut = 0;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	80da      	strh	r2, [r3, #6]
	buf->flag.BufferOverrun = 0;
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	7b13      	ldrb	r3, [r2, #12]
 8000e3c:	f36f 0341 	bfc	r3, #1, #1
 8000e40:	7313      	strb	r3, [r2, #12]
	buf->flag.MessageReady = 0;
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	7b13      	ldrb	r3, [r2, #12]
 8000e46:	f36f 0300 	bfc	r3, #0, #1
 8000e4a:	7313      	strb	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <RING_Put>:
@function RING_Put − Загружает элемент в буфер.
@param uint8_t symbol − Элемент для загрузки в буфер.
@param RING_buffer_t *buf − Указатель на кольцевой буфер.
 */
void RING_Put(uint8_t symbol, RING_buffer_t* buf)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
    buf->buffer[buf->idxOut++] = symbol;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	88db      	ldrh	r3, [r3, #6]
 8000e6c:	1c59      	adds	r1, r3, #1
 8000e6e:	b288      	uxth	r0, r1
 8000e70:	6839      	ldr	r1, [r7, #0]
 8000e72:	80c8      	strh	r0, [r1, #6]
 8000e74:	4413      	add	r3, r2
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	701a      	strb	r2, [r3, #0]
    if (buf->idxOut >= buf->size) buf->idxOut = 0;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	88da      	ldrh	r2, [r3, #6]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	891b      	ldrh	r3, [r3, #8]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d302      	bcc.n	8000e8c <RING_Put+0x34>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	80da      	strh	r2, [r3, #6]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <RING_Pop>:
@function RING_Pop − Получает из буфера байт.
@param RING_buffer_t *buf − Указатель на кольцевой буфер.
@return uint8_t Значение полученого элемента.
 */
uint8_t RING_Pop(RING_buffer_t *buf)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    uint8_t retval = buf->buffer[buf->idxIn++];
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	889b      	ldrh	r3, [r3, #4]
 8000ea8:	1c59      	adds	r1, r3, #1
 8000eaa:	b288      	uxth	r0, r1
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	8088      	strh	r0, [r1, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	73fb      	strb	r3, [r7, #15]
    if (buf->idxIn >= buf->size) buf->idxIn = 0;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	889a      	ldrh	r2, [r3, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	891b      	ldrh	r3, [r3, #8]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d302      	bcc.n	8000ec8 <RING_Pop+0x30>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	809a      	strh	r2, [r3, #4]
    return retval;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <Ring_GetMessage>:
@function Ring_GetMessage − Reads full message from the ring buffer and clears appropriate flags.
@param RING_buffer_t *ringbuf − Указатель на кольцевой буфер.
@param uint8_t *string − Указатель на строчку.
 */
uint8_t Ring_GetMessage(RING_buffer_t *ringbuf, uint8_t * string)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	uint16_t char_count = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	81fb      	strh	r3, [r7, #14]
	// Check if the message has been received
	if (ringbuf->flag.MessageReady)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7b1b      	ldrb	r3, [r3, #12]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d049      	beq.n	8000f86 <Ring_GetMessage+0xb0>
		{
			if (ringbuf->flag.BufferOverrun)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7b1b      	ldrb	r3, [r3, #12]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d016      	beq.n	8000f2e <Ring_GetMessage+0x58>
				{
				ringbuf->idxIn = ringbuf->idxOut;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	88da      	ldrh	r2, [r3, #6]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	809a      	strh	r2, [r3, #4]
				ringbuf->flag.BufferOverrun = 0;
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	7b13      	ldrb	r3, [r2, #12]
 8000f0c:	f36f 0341 	bfc	r3, #1, #1
 8000f10:	7313      	strb	r3, [r2, #12]
				}
			while ((ringbuf->buffer[ringbuf->idxIn] != '\r') &&
 8000f12:	e00c      	b.n	8000f2e <Ring_GetMessage+0x58>
						 (ringbuf->buffer[ringbuf->idxIn] != '\n') &&
						 (ringbuf->size != char_count - 1))
				{
					*string =  RING_Pop(ringbuf);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ffbf 	bl	8000e98 <RING_Pop>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	701a      	strb	r2, [r3, #0]
					string++;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	603b      	str	r3, [r7, #0]
					char_count++;
 8000f28:	89fb      	ldrh	r3, [r7, #14]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	81fb      	strh	r3, [r7, #14]
			while ((ringbuf->buffer[ringbuf->idxIn] != '\r') &&
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	8892      	ldrh	r2, [r2, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b0d      	cmp	r3, #13
 8000f3c:	d00e      	beq.n	8000f5c <Ring_GetMessage+0x86>
						 (ringbuf->buffer[ringbuf->idxIn] != '\n') &&
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	8892      	ldrh	r2, [r2, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
			while ((ringbuf->buffer[ringbuf->idxIn] != '\r') &&
 8000f4a:	2b0a      	cmp	r3, #10
 8000f4c:	d006      	beq.n	8000f5c <Ring_GetMessage+0x86>
						 (ringbuf->size != char_count - 1))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	891b      	ldrh	r3, [r3, #8]
 8000f52:	461a      	mov	r2, r3
 8000f54:	89fb      	ldrh	r3, [r7, #14]
 8000f56:	3b01      	subs	r3, #1
						 (ringbuf->buffer[ringbuf->idxIn] != '\n') &&
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d1db      	bne.n	8000f14 <Ring_GetMessage+0x3e>
				}
			*string =  RING_Pop(ringbuf);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff9b 	bl	8000e98 <RING_Pop>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	701a      	strb	r2, [r3, #0]
			string++;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	603b      	str	r3, [r7, #0]
			char_count++;
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	3301      	adds	r3, #1
 8000f74:	81fb      	strh	r3, [r7, #14]
			*string = '\0';
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
			ringbuf->flag.MessageReady = 0;
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	7b13      	ldrb	r3, [r2, #12]
 8000f80:	f36f 0300 	bfc	r3, #0, #1
 8000f84:	7313      	strb	r3, [r2, #12]
		}
	return char_count;
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	b2db      	uxtb	r3, r3
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fd2:	2007      	movs	r0, #7
 8000fd4:	f000 fac6 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10d      	bne.n	8001012 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_TIM_PWM_MspInit+0x40>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <HAL_TIM_PWM_MspInit+0x40>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <HAL_TIM_PWM_MspInit+0x40>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40010000 	.word	0x40010000
 8001024:	40023800 	.word	0x40023800

08001028 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <HAL_TIM_MspPostInit+0x68>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d11e      	bne.n	8001088 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_TIM_MspPostInit+0x6c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_TIM_MspPostInit+0x6c>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_TIM_MspPostInit+0x6c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001066:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800106a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001078:	2301      	movs	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <HAL_TIM_MspPostInit+0x70>)
 8001084:	f000 fb50 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40010000 	.word	0x40010000
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000

0800109c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <HAL_UART_MspInit+0x94>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d133      	bne.n	8001126 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_UART_MspInit+0x98>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010f6:	230c      	movs	r3, #12
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001106:	2307      	movs	r3, #7
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <HAL_UART_MspInit+0x9c>)
 8001112:	f000 fb09 	bl	8001728 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2026      	movs	r0, #38	; 0x26
 800111c:	f000 fa2d 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001120:	2026      	movs	r0, #38	; 0x26
 8001122:	f000 fa46 	bl	80015b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40004400 	.word	0x40004400
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <MemManage_Handler+0x4>

0800114e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <UsageFault_Handler+0x4>

0800115a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001188:	f000 f8d8 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <USART2_IRQHandler+0x10>)
 8001196:	f002 f8bf 	bl	8003318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000013c 	.word	0x2000013c

080011a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011ac:	f000 fc50 	bl	8001a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <_sbrk+0x5c>)
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <_sbrk+0x60>)
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <_sbrk+0x64>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <_sbrk+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d207      	bcs.n	80011f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e4:	f002 ff50 	bl	8004088 <__errno>
 80011e8:	4603      	mov	r3, r0
 80011ea:	220c      	movs	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e009      	b.n	8001208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <_sbrk+0x64>)
 8001204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20020000 	.word	0x20020000
 8001214:	00000400 	.word	0x00000400
 8001218:	200000d8 	.word	0x200000d8
 800121c:	200001a8 	.word	0x200001a8

08001220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800124a:	490e      	ldr	r1, [pc, #56]	; (8001284 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800124c:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001260:	4c0b      	ldr	r4, [pc, #44]	; (8001290 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800126e:	f7ff ffd7 	bl	8001220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001272:	f002 ff0f 	bl	8004094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001276:	f7ff fa2f 	bl	80006d8 <main>
  bx  lr    
 800127a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800127c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001288:	080055d0 	.word	0x080055d0
  ldr r2, =_sbss
 800128c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001290:	200001a4 	.word	0x200001a4

08001294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC_IRQHandler>
	...

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_Init+0x40>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_Init+0x40>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x40>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f94f 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f808 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fe62 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x54>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x58>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f975 	bl	80015ea <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f000 f92f 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <HAL_InitTick+0x5c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000044 	.word	0x20000044
 8001334:	2000004c 	.word	0x2000004c
 8001338:	20000048 	.word	0x20000048

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000004c 	.word	0x2000004c
 8001360:	20000190 	.word	0x20000190

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000190 	.word	0x20000190

0800137c <__NVIC_SetPriorityGrouping>:
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4907      	ldr	r1, [pc, #28]	; (8001418 <__NVIC_EnableIRQ+0x38>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_DisableIRQ>:
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db12      	blt.n	8001454 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	490a      	ldr	r1, [pc, #40]	; (8001460 <__NVIC_DisableIRQ+0x44>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	3320      	adds	r3, #32
 8001444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001448:	f3bf 8f4f 	dsb	sy
}
 800144c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800144e:	f3bf 8f6f 	isb	sy
}
 8001452:	bf00      	nop
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff05 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff1a 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff8e 	bl	80014b8 <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5d 	bl	8001464 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff0d 	bl	80013e0 <__NVIC_EnableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff1d 	bl	800141c <__NVIC_DisableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ff94 	bl	8001520 <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff fea8 	bl	8001364 <HAL_GetTick>
 8001614:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d008      	beq.n	8001634 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2280      	movs	r2, #128	; 0x80
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e052      	b.n	80016da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0216 	bic.w	r2, r2, #22
 8001642:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001652:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	2b00      	cmp	r3, #0
 800165a:	d103      	bne.n	8001664 <HAL_DMA_Abort+0x62>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0208 	bic.w	r2, r2, #8
 8001672:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0201 	bic.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001684:	e013      	b.n	80016ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001686:	f7ff fe6d 	bl	8001364 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b05      	cmp	r3, #5
 8001692:	d90c      	bls.n	80016ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2220      	movs	r2, #32
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e015      	b.n	80016da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e4      	bne.n	8001686 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	223f      	movs	r2, #63	; 0x3f
 80016c2:	409a      	lsls	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d004      	beq.n	8001700 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e00c      	b.n	800171a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2205      	movs	r2, #5
 8001704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0201 	bic.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	e165      	b.n	8001a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001744:	2201      	movs	r2, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 8154 	bne.w	8001a0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d005      	beq.n	800177a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001776:	2b02      	cmp	r3, #2
 8001778:	d130      	bne.n	80017dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 0201 	and.w	r2, r3, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d017      	beq.n	8001818 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d123      	bne.n	800186c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80ae 	beq.w	8001a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a5c      	ldr	r2, [pc, #368]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b5a      	ldr	r3, [pc, #360]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ca:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_GPIO_Init+0x304>)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	220f      	movs	r2, #15
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4f      	ldr	r2, [pc, #316]	; (8001a30 <HAL_GPIO_Init+0x308>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d025      	beq.n	8001942 <HAL_GPIO_Init+0x21a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <HAL_GPIO_Init+0x30c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01f      	beq.n	800193e <HAL_GPIO_Init+0x216>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4d      	ldr	r2, [pc, #308]	; (8001a38 <HAL_GPIO_Init+0x310>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d019      	beq.n	800193a <HAL_GPIO_Init+0x212>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4c      	ldr	r2, [pc, #304]	; (8001a3c <HAL_GPIO_Init+0x314>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0x20e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_GPIO_Init+0x318>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00d      	beq.n	8001932 <HAL_GPIO_Init+0x20a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <HAL_GPIO_Init+0x31c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x206>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a49      	ldr	r2, [pc, #292]	; (8001a48 <HAL_GPIO_Init+0x320>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_GPIO_Init+0x202>
 8001926:	2306      	movs	r3, #6
 8001928:	e00c      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 800192a:	2307      	movs	r3, #7
 800192c:	e00a      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 800192e:	2305      	movs	r3, #5
 8001930:	e008      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 8001932:	2304      	movs	r3, #4
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 8001936:	2303      	movs	r3, #3
 8001938:	e004      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 800193a:	2302      	movs	r3, #2
 800193c:	e002      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 8001942:	2300      	movs	r3, #0
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	f002 0203 	and.w	r2, r2, #3
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	4093      	lsls	r3, r2
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001954:	4935      	ldr	r1, [pc, #212]	; (8001a2c <HAL_GPIO_Init+0x304>)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001962:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <HAL_GPIO_Init+0x324>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001986:	4a31      	ldr	r2, [pc, #196]	; (8001a4c <HAL_GPIO_Init+0x324>)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800198c:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <HAL_GPIO_Init+0x324>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b0:	4a26      	ldr	r2, [pc, #152]	; (8001a4c <HAL_GPIO_Init+0x324>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_GPIO_Init+0x324>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019da:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <HAL_GPIO_Init+0x324>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_GPIO_Init+0x324>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a04:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <HAL_GPIO_Init+0x324>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b0f      	cmp	r3, #15
 8001a14:	f67f ae96 	bls.w	8001744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40013800 	.word	0x40013800
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40020400 	.word	0x40020400
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	40020c00 	.word	0x40020c00
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40021400 	.word	0x40021400
 8001a48:	40021800 	.word	0x40021800
 8001a4c:	40013c00 	.word	0x40013c00

08001a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f988 	bl	8000d84 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40013c00 	.word	0x40013c00

08001a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0cc      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a94:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d90c      	bls.n	8001abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0b8      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	494d      	ldr	r1, [pc, #308]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d044      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d119      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e07f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e06f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e067      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f023 0203 	bic.w	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4934      	ldr	r1, [pc, #208]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b70:	f7ff fbf8 	bl	8001364 <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b78:	f7ff fbf4 	bl	8001364 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e04f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 020c 	and.w	r2, r3, #12
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d1eb      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d20c      	bcs.n	8001bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e032      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4916      	ldr	r1, [pc, #88]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c06:	f000 f855 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	490a      	ldr	r1, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	5ccb      	ldrb	r3, [r1, r3]
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1c8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fb58 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	080053f8 	.word	0x080053f8
 8001c44:	20000044 	.word	0x20000044
 8001c48:	20000048 	.word	0x20000048

08001c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000044 	.word	0x20000044

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c68:	f7ff fff0 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0a9b      	lsrs	r3, r3, #10
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08005408 	.word	0x08005408

08001c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c90:	f7ff ffdc 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0b5b      	lsrs	r3, r3, #13
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4903      	ldr	r1, [pc, #12]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	08005408 	.word	0x08005408

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb8:	b088      	sub	sp, #32
 8001cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd0:	4bce      	ldr	r3, [pc, #824]	; (800200c <HAL_RCC_GetSysClockFreq+0x358>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b0c      	cmp	r3, #12
 8001cda:	f200 818d 	bhi.w	8001ff8 <HAL_RCC_GetSysClockFreq+0x344>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <HAL_RCC_GetSysClockFreq+0x30>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001d19 	.word	0x08001d19
 8001ce8:	08001ff9 	.word	0x08001ff9
 8001cec:	08001ff9 	.word	0x08001ff9
 8001cf0:	08001ff9 	.word	0x08001ff9
 8001cf4:	08001d1f 	.word	0x08001d1f
 8001cf8:	08001ff9 	.word	0x08001ff9
 8001cfc:	08001ff9 	.word	0x08001ff9
 8001d00:	08001ff9 	.word	0x08001ff9
 8001d04:	08001d25 	.word	0x08001d25
 8001d08:	08001ff9 	.word	0x08001ff9
 8001d0c:	08001ff9 	.word	0x08001ff9
 8001d10:	08001ff9 	.word	0x08001ff9
 8001d14:	08001e99 	.word	0x08001e99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4bbd      	ldr	r3, [pc, #756]	; (8002010 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d1a:	61bb      	str	r3, [r7, #24]
       break;
 8001d1c:	e16f      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d1e:	4bbd      	ldr	r3, [pc, #756]	; (8002014 <HAL_RCC_GetSysClockFreq+0x360>)
 8001d20:	61bb      	str	r3, [r7, #24]
      break;
 8001d22:	e16c      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d24:	4bb9      	ldr	r3, [pc, #740]	; (800200c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d2c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d2e:	4bb7      	ldr	r3, [pc, #732]	; (800200c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d053      	beq.n	8001de2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3a:	4bb4      	ldr	r3, [pc, #720]	; (800200c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	099b      	lsrs	r3, r3, #6
 8001d40:	461a      	mov	r2, r3
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d4a:	f04f 0100 	mov.w	r1, #0
 8001d4e:	ea02 0400 	and.w	r4, r2, r0
 8001d52:	603c      	str	r4, [r7, #0]
 8001d54:	400b      	ands	r3, r1
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	4629      	mov	r1, r5
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	014b      	lsls	r3, r1, #5
 8001d6a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d6e:	0142      	lsls	r2, r0, #5
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	4623      	mov	r3, r4
 8001d76:	1ac0      	subs	r0, r0, r3
 8001d78:	462b      	mov	r3, r5
 8001d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	018b      	lsls	r3, r1, #6
 8001d88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d8c:	0182      	lsls	r2, r0, #6
 8001d8e:	1a12      	subs	r2, r2, r0
 8001d90:	eb63 0301 	sbc.w	r3, r3, r1
 8001d94:	f04f 0000 	mov.w	r0, #0
 8001d98:	f04f 0100 	mov.w	r1, #0
 8001d9c:	00d9      	lsls	r1, r3, #3
 8001d9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001da2:	00d0      	lsls	r0, r2, #3
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4621      	mov	r1, r4
 8001daa:	1852      	adds	r2, r2, r1
 8001dac:	4629      	mov	r1, r5
 8001dae:	eb43 0101 	adc.w	r1, r3, r1
 8001db2:	460b      	mov	r3, r1
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	0259      	lsls	r1, r3, #9
 8001dbe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dc2:	0250      	lsls	r0, r2, #9
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	f7fe fa74 	bl	80002c0 <__aeabi_uldivmod>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4613      	mov	r3, r2
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	e04c      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de2:	4b8a      	ldr	r3, [pc, #552]	; (800200c <HAL_RCC_GetSysClockFreq+0x358>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	099b      	lsrs	r3, r3, #6
 8001de8:	461a      	mov	r2, r3
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	ea02 0a00 	and.w	sl, r2, r0
 8001dfa:	ea03 0b01 	and.w	fp, r3, r1
 8001dfe:	4650      	mov	r0, sl
 8001e00:	4659      	mov	r1, fp
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	014b      	lsls	r3, r1, #5
 8001e0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e10:	0142      	lsls	r2, r0, #5
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	ebb0 000a 	subs.w	r0, r0, sl
 8001e1a:	eb61 010b 	sbc.w	r1, r1, fp
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	018b      	lsls	r3, r1, #6
 8001e28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e2c:	0182      	lsls	r2, r0, #6
 8001e2e:	1a12      	subs	r2, r2, r0
 8001e30:	eb63 0301 	sbc.w	r3, r3, r1
 8001e34:	f04f 0000 	mov.w	r0, #0
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	00d9      	lsls	r1, r3, #3
 8001e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e42:	00d0      	lsls	r0, r2, #3
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	eb12 020a 	adds.w	r2, r2, sl
 8001e4c:	eb43 030b 	adc.w	r3, r3, fp
 8001e50:	f04f 0000 	mov.w	r0, #0
 8001e54:	f04f 0100 	mov.w	r1, #0
 8001e58:	0299      	lsls	r1, r3, #10
 8001e5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e5e:	0290      	lsls	r0, r2, #10
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	f7fe fa26 	bl	80002c0 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e7c:	4b63      	ldr	r3, [pc, #396]	; (800200c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	3301      	adds	r3, #1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	61bb      	str	r3, [r7, #24]
      break;
 8001e96:	e0b2      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e98:	4b5c      	ldr	r3, [pc, #368]	; (800200c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ea0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea2:	4b5a      	ldr	r3, [pc, #360]	; (800200c <HAL_RCC_GetSysClockFreq+0x358>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d04d      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eae:	4b57      	ldr	r3, [pc, #348]	; (800200c <HAL_RCC_GetSysClockFreq+0x358>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	099b      	lsrs	r3, r3, #6
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ebe:	f04f 0100 	mov.w	r1, #0
 8001ec2:	ea02 0800 	and.w	r8, r2, r0
 8001ec6:	ea03 0901 	and.w	r9, r3, r1
 8001eca:	4640      	mov	r0, r8
 8001ecc:	4649      	mov	r1, r9
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	014b      	lsls	r3, r1, #5
 8001ed8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001edc:	0142      	lsls	r2, r0, #5
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	ebb0 0008 	subs.w	r0, r0, r8
 8001ee6:	eb61 0109 	sbc.w	r1, r1, r9
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	018b      	lsls	r3, r1, #6
 8001ef4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ef8:	0182      	lsls	r2, r0, #6
 8001efa:	1a12      	subs	r2, r2, r0
 8001efc:	eb63 0301 	sbc.w	r3, r3, r1
 8001f00:	f04f 0000 	mov.w	r0, #0
 8001f04:	f04f 0100 	mov.w	r1, #0
 8001f08:	00d9      	lsls	r1, r3, #3
 8001f0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f0e:	00d0      	lsls	r0, r2, #3
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	eb12 0208 	adds.w	r2, r2, r8
 8001f18:	eb43 0309 	adc.w	r3, r3, r9
 8001f1c:	f04f 0000 	mov.w	r0, #0
 8001f20:	f04f 0100 	mov.w	r1, #0
 8001f24:	0259      	lsls	r1, r3, #9
 8001f26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f2a:	0250      	lsls	r0, r2, #9
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	f7fe f9c0 	bl	80002c0 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4613      	mov	r3, r2
 8001f46:	61fb      	str	r3, [r7, #28]
 8001f48:	e04a      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4a:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	099b      	lsrs	r3, r3, #6
 8001f50:	461a      	mov	r2, r3
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f5a:	f04f 0100 	mov.w	r1, #0
 8001f5e:	ea02 0400 	and.w	r4, r2, r0
 8001f62:	ea03 0501 	and.w	r5, r3, r1
 8001f66:	4620      	mov	r0, r4
 8001f68:	4629      	mov	r1, r5
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	014b      	lsls	r3, r1, #5
 8001f74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f78:	0142      	lsls	r2, r0, #5
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	1b00      	subs	r0, r0, r4
 8001f80:	eb61 0105 	sbc.w	r1, r1, r5
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	018b      	lsls	r3, r1, #6
 8001f8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f92:	0182      	lsls	r2, r0, #6
 8001f94:	1a12      	subs	r2, r2, r0
 8001f96:	eb63 0301 	sbc.w	r3, r3, r1
 8001f9a:	f04f 0000 	mov.w	r0, #0
 8001f9e:	f04f 0100 	mov.w	r1, #0
 8001fa2:	00d9      	lsls	r1, r3, #3
 8001fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fa8:	00d0      	lsls	r0, r2, #3
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	1912      	adds	r2, r2, r4
 8001fb0:	eb45 0303 	adc.w	r3, r5, r3
 8001fb4:	f04f 0000 	mov.w	r0, #0
 8001fb8:	f04f 0100 	mov.w	r1, #0
 8001fbc:	0299      	lsls	r1, r3, #10
 8001fbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001fc2:	0290      	lsls	r0, r2, #10
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	f7fe f974 	bl	80002c0 <__aeabi_uldivmod>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4613      	mov	r3, r2
 8001fde:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_RCC_GetSysClockFreq+0x358>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	0f1b      	lsrs	r3, r3, #28
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	61bb      	str	r3, [r7, #24]
      break;
 8001ff6:	e002      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ffa:	61bb      	str	r3, [r7, #24]
      break;
 8001ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffe:	69bb      	ldr	r3, [r7, #24]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	00f42400 	.word	0x00f42400
 8002014:	007a1200 	.word	0x007a1200

08002018 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e28d      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8083 	beq.w	800213e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002038:	4b94      	ldr	r3, [pc, #592]	; (800228c <HAL_RCC_OscConfig+0x274>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b04      	cmp	r3, #4
 8002042:	d019      	beq.n	8002078 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002044:	4b91      	ldr	r3, [pc, #580]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800204c:	2b08      	cmp	r3, #8
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002050:	4b8e      	ldr	r3, [pc, #568]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800205c:	d00c      	beq.n	8002078 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205e:	4b8b      	ldr	r3, [pc, #556]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002066:	2b0c      	cmp	r3, #12
 8002068:	d112      	bne.n	8002090 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206a:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x274>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002076:	d10b      	bne.n	8002090 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	4b84      	ldr	r3, [pc, #528]	; (800228c <HAL_RCC_OscConfig+0x274>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d05b      	beq.n	800213c <HAL_RCC_OscConfig+0x124>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d157      	bne.n	800213c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e25a      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002098:	d106      	bne.n	80020a8 <HAL_RCC_OscConfig+0x90>
 800209a:	4b7c      	ldr	r3, [pc, #496]	; (800228c <HAL_RCC_OscConfig+0x274>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7b      	ldr	r2, [pc, #492]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e01d      	b.n	80020e4 <HAL_RCC_OscConfig+0xcc>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0xb4>
 80020b2:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a75      	ldr	r2, [pc, #468]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	4b73      	ldr	r3, [pc, #460]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a72      	ldr	r2, [pc, #456]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e00b      	b.n	80020e4 <HAL_RCC_OscConfig+0xcc>
 80020cc:	4b6f      	ldr	r3, [pc, #444]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6e      	ldr	r2, [pc, #440]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80020d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b6c      	ldr	r3, [pc, #432]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a6b      	ldr	r2, [pc, #428]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80020de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff f93a 	bl	8001364 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff f936 	bl	8001364 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e21f      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b61      	ldr	r3, [pc, #388]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0xdc>
 8002112:	e014      	b.n	800213e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff f926 	bl	8001364 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff f922 	bl	8001364 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e20b      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	4b57      	ldr	r3, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x104>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d06f      	beq.n	800222a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800214a:	4b50      	ldr	r3, [pc, #320]	; (800228c <HAL_RCC_OscConfig+0x274>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b00      	cmp	r3, #0
 8002154:	d017      	beq.n	8002186 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002156:	4b4d      	ldr	r3, [pc, #308]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800215e:	2b08      	cmp	r3, #8
 8002160:	d105      	bne.n	800216e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002162:	4b4a      	ldr	r3, [pc, #296]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002176:	2b0c      	cmp	r3, #12
 8002178:	d11c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217a:	4b44      	ldr	r3, [pc, #272]	; (800228c <HAL_RCC_OscConfig+0x274>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d116      	bne.n	80021b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x186>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1d3      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b3b      	ldr	r3, [pc, #236]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4937      	ldr	r1, [pc, #220]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	e03a      	b.n	800222a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_RCC_OscConfig+0x278>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7ff f8cf 	bl	8001364 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ca:	f7ff f8cb 	bl	8001364 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1b4      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	4b2b      	ldr	r3, [pc, #172]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b28      	ldr	r3, [pc, #160]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4925      	ldr	r1, [pc, #148]	; (800228c <HAL_RCC_OscConfig+0x274>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
 80021fc:	e015      	b.n	800222a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_OscConfig+0x278>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff f8ae 	bl	8001364 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220c:	f7ff f8aa 	bl	8001364 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e193      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d036      	beq.n	80022a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_RCC_OscConfig+0x27c>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7ff f88e 	bl	8001364 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224c:	f7ff f88a 	bl	8001364 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e173      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_OscConfig+0x274>)
 8002260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x234>
 800226a:	e01b      	b.n	80022a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_OscConfig+0x27c>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7ff f877 	bl	8001364 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002278:	e00e      	b.n	8002298 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800227a:	f7ff f873 	bl	8001364 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d907      	bls.n	8002298 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e15c      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
 800228c:	40023800 	.word	0x40023800
 8002290:	42470000 	.word	0x42470000
 8002294:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	4b8a      	ldr	r3, [pc, #552]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 800229a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ea      	bne.n	800227a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8097 	beq.w	80023e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b6:	4b83      	ldr	r3, [pc, #524]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b7f      	ldr	r3, [pc, #508]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a7e      	ldr	r2, [pc, #504]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	4b7c      	ldr	r3, [pc, #496]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	4b79      	ldr	r3, [pc, #484]	; (80024c8 <HAL_RCC_OscConfig+0x4b0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d118      	bne.n	8002320 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ee:	4b76      	ldr	r3, [pc, #472]	; (80024c8 <HAL_RCC_OscConfig+0x4b0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a75      	ldr	r2, [pc, #468]	; (80024c8 <HAL_RCC_OscConfig+0x4b0>)
 80022f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fa:	f7ff f833 	bl	8001364 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002302:	f7ff f82f 	bl	8001364 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e118      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b6c      	ldr	r3, [pc, #432]	; (80024c8 <HAL_RCC_OscConfig+0x4b0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x31e>
 8002328:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	4a65      	ldr	r2, [pc, #404]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6713      	str	r3, [r2, #112]	; 0x70
 8002334:	e01c      	b.n	8002370 <HAL_RCC_OscConfig+0x358>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b05      	cmp	r3, #5
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x340>
 800233e:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002342:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6713      	str	r3, [r2, #112]	; 0x70
 800234a:	4b5e      	ldr	r3, [pc, #376]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a5d      	ldr	r2, [pc, #372]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0x358>
 8002358:	4b5a      	ldr	r3, [pc, #360]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	4a59      	ldr	r2, [pc, #356]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6713      	str	r3, [r2, #112]	; 0x70
 8002364:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a56      	ldr	r2, [pc, #344]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 800236a:	f023 0304 	bic.w	r3, r3, #4
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d015      	beq.n	80023a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fff4 	bl	8001364 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7fe fff0 	bl	8001364 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e0d7      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	4b4b      	ldr	r3, [pc, #300]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0ee      	beq.n	8002380 <HAL_RCC_OscConfig+0x368>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a4:	f7fe ffde 	bl	8001364 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f7fe ffda 	bl	8001364 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0c1      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c2:	4b40      	ldr	r3, [pc, #256]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ee      	bne.n	80023ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d4:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	4a3a      	ldr	r2, [pc, #232]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 80023da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80ad 	beq.w	8002544 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ea:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d060      	beq.n	80024b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d145      	bne.n	800248a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b33      	ldr	r3, [pc, #204]	; (80024cc <HAL_RCC_OscConfig+0x4b4>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe ffae 	bl	8001364 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe ffaa 	bl	8001364 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e093      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241e:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69da      	ldr	r2, [r3, #28]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	019b      	lsls	r3, r3, #6
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	3b01      	subs	r3, #1
 8002444:	041b      	lsls	r3, r3, #16
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	071b      	lsls	r3, r3, #28
 8002456:	491b      	ldr	r1, [pc, #108]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_RCC_OscConfig+0x4b4>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe ff7f 	bl	8001364 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246a:	f7fe ff7b 	bl	8001364 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e064      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x452>
 8002488:	e05c      	b.n	8002544 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_RCC_OscConfig+0x4b4>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe ff68 	bl	8001364 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe ff64 	bl	8001364 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e04d      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_OscConfig+0x4ac>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x480>
 80024b6:	e045      	b.n	8002544 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e040      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000
 80024cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024d0:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <HAL_RCC_OscConfig+0x538>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d030      	beq.n	8002540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d129      	bne.n	8002540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d122      	bne.n	8002540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002500:	4013      	ands	r3, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002508:	4293      	cmp	r3, r2
 800250a:	d119      	bne.n	8002540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	3b01      	subs	r3, #1
 800251a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d10f      	bne.n	8002540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800

08002554 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e041      	b.n	80025ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe fd32 	bl	8000fe4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3304      	adds	r3, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f000 fa28 	bl	80029e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <HAL_TIM_PWM_Start+0x24>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	bf14      	ite	ne
 8002610:	2301      	movne	r3, #1
 8002612:	2300      	moveq	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e022      	b.n	800265e <HAL_TIM_PWM_Start+0x6a>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b04      	cmp	r3, #4
 800261c:	d109      	bne.n	8002632 <HAL_TIM_PWM_Start+0x3e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b01      	cmp	r3, #1
 8002628:	bf14      	ite	ne
 800262a:	2301      	movne	r3, #1
 800262c:	2300      	moveq	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	e015      	b.n	800265e <HAL_TIM_PWM_Start+0x6a>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d109      	bne.n	800264c <HAL_TIM_PWM_Start+0x58>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e008      	b.n	800265e <HAL_TIM_PWM_Start+0x6a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e07c      	b.n	8002760 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <HAL_TIM_PWM_Start+0x82>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002674:	e013      	b.n	800269e <HAL_TIM_PWM_Start+0xaa>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d104      	bne.n	8002686 <HAL_TIM_PWM_Start+0x92>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002684:	e00b      	b.n	800269e <HAL_TIM_PWM_Start+0xaa>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d104      	bne.n	8002696 <HAL_TIM_PWM_Start+0xa2>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002694:	e003      	b.n	800269e <HAL_TIM_PWM_Start+0xaa>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2201      	movs	r2, #1
 80026a4:	6839      	ldr	r1, [r7, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fbee 	bl	8002e88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <HAL_TIM_PWM_Start+0x174>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d004      	beq.n	80026c0 <HAL_TIM_PWM_Start+0xcc>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2c      	ldr	r2, [pc, #176]	; (800276c <HAL_TIM_PWM_Start+0x178>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d101      	bne.n	80026c4 <HAL_TIM_PWM_Start+0xd0>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_TIM_PWM_Start+0xd2>
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a22      	ldr	r2, [pc, #136]	; (8002768 <HAL_TIM_PWM_Start+0x174>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d022      	beq.n	800272a <HAL_TIM_PWM_Start+0x136>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ec:	d01d      	beq.n	800272a <HAL_TIM_PWM_Start+0x136>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <HAL_TIM_PWM_Start+0x17c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d018      	beq.n	800272a <HAL_TIM_PWM_Start+0x136>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <HAL_TIM_PWM_Start+0x180>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_TIM_PWM_Start+0x136>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <HAL_TIM_PWM_Start+0x184>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00e      	beq.n	800272a <HAL_TIM_PWM_Start+0x136>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a16      	ldr	r2, [pc, #88]	; (800276c <HAL_TIM_PWM_Start+0x178>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_TIM_PWM_Start+0x136>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a18      	ldr	r2, [pc, #96]	; (800277c <HAL_TIM_PWM_Start+0x188>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d004      	beq.n	800272a <HAL_TIM_PWM_Start+0x136>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a16      	ldr	r2, [pc, #88]	; (8002780 <HAL_TIM_PWM_Start+0x18c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d111      	bne.n	800274e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b06      	cmp	r3, #6
 800273a:	d010      	beq.n	800275e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274c:	e007      	b.n	800275e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40010000 	.word	0x40010000
 800276c:	40010400 	.word	0x40010400
 8002770:	40000400 	.word	0x40000400
 8002774:	40000800 	.word	0x40000800
 8002778:	40000c00 	.word	0x40000c00
 800277c:	40014000 	.word	0x40014000
 8002780:	40001800 	.word	0x40001800

08002784 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2200      	movs	r2, #0
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fb76 	bl	8002e88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2e      	ldr	r2, [pc, #184]	; (800285c <HAL_TIM_PWM_Stop+0xd8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_TIM_PWM_Stop+0x2c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a2d      	ldr	r2, [pc, #180]	; (8002860 <HAL_TIM_PWM_Stop+0xdc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_TIM_PWM_Stop+0x30>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_TIM_PWM_Stop+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d017      	beq.n	80027ea <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6a1a      	ldr	r2, [r3, #32]
 80027c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10f      	bne.n	80027ea <HAL_TIM_PWM_Stop+0x66>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6a1a      	ldr	r2, [r3, #32]
 80027d0:	f240 4344 	movw	r3, #1092	; 0x444
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d107      	bne.n	80027ea <HAL_TIM_PWM_Stop+0x66>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a1a      	ldr	r2, [r3, #32]
 80027f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <HAL_TIM_PWM_Stop+0x96>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a1a      	ldr	r2, [r3, #32]
 8002800:	f240 4344 	movw	r3, #1092	; 0x444
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d107      	bne.n	800281a <HAL_TIM_PWM_Stop+0x96>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d104      	bne.n	800282a <HAL_TIM_PWM_Stop+0xa6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002828:	e013      	b.n	8002852 <HAL_TIM_PWM_Stop+0xce>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d104      	bne.n	800283a <HAL_TIM_PWM_Stop+0xb6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002838:	e00b      	b.n	8002852 <HAL_TIM_PWM_Stop+0xce>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b08      	cmp	r3, #8
 800283e:	d104      	bne.n	800284a <HAL_TIM_PWM_Stop+0xc6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002848:	e003      	b.n	8002852 <HAL_TIM_PWM_Stop+0xce>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40010000 	.word	0x40010000
 8002860:	40010400 	.word	0x40010400

08002864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800287e:	2302      	movs	r3, #2
 8002880:	e0ae      	b.n	80029e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b0c      	cmp	r3, #12
 800288e:	f200 809f 	bhi.w	80029d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002892:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002898:	080028cd 	.word	0x080028cd
 800289c:	080029d1 	.word	0x080029d1
 80028a0:	080029d1 	.word	0x080029d1
 80028a4:	080029d1 	.word	0x080029d1
 80028a8:	0800290d 	.word	0x0800290d
 80028ac:	080029d1 	.word	0x080029d1
 80028b0:	080029d1 	.word	0x080029d1
 80028b4:	080029d1 	.word	0x080029d1
 80028b8:	0800294f 	.word	0x0800294f
 80028bc:	080029d1 	.word	0x080029d1
 80028c0:	080029d1 	.word	0x080029d1
 80028c4:	080029d1 	.word	0x080029d1
 80028c8:	0800298f 	.word	0x0800298f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f928 	bl	8002b28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0208 	orr.w	r2, r2, #8
 80028e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0204 	bic.w	r2, r2, #4
 80028f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6999      	ldr	r1, [r3, #24]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	619a      	str	r2, [r3, #24]
      break;
 800290a:	e064      	b.n	80029d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f978 	bl	8002c08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6999      	ldr	r1, [r3, #24]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	021a      	lsls	r2, r3, #8
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	619a      	str	r2, [r3, #24]
      break;
 800294c:	e043      	b.n	80029d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f9cd 	bl	8002cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0208 	orr.w	r2, r2, #8
 8002968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0204 	bic.w	r2, r2, #4
 8002978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69d9      	ldr	r1, [r3, #28]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	61da      	str	r2, [r3, #28]
      break;
 800298c:	e023      	b.n	80029d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fa21 	bl	8002ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69d9      	ldr	r1, [r3, #28]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	021a      	lsls	r2, r3, #8
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	61da      	str	r2, [r3, #28]
      break;
 80029ce:	e002      	b.n	80029d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	75fb      	strb	r3, [r7, #23]
      break;
 80029d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029de:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a40      	ldr	r2, [pc, #256]	; (8002afc <TIM_Base_SetConfig+0x114>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <TIM_Base_SetConfig+0x40>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a06:	d00f      	beq.n	8002a28 <TIM_Base_SetConfig+0x40>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a3d      	ldr	r2, [pc, #244]	; (8002b00 <TIM_Base_SetConfig+0x118>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00b      	beq.n	8002a28 <TIM_Base_SetConfig+0x40>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a3c      	ldr	r2, [pc, #240]	; (8002b04 <TIM_Base_SetConfig+0x11c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d007      	beq.n	8002a28 <TIM_Base_SetConfig+0x40>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a3b      	ldr	r2, [pc, #236]	; (8002b08 <TIM_Base_SetConfig+0x120>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <TIM_Base_SetConfig+0x40>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a3a      	ldr	r2, [pc, #232]	; (8002b0c <TIM_Base_SetConfig+0x124>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d108      	bne.n	8002a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a2f      	ldr	r2, [pc, #188]	; (8002afc <TIM_Base_SetConfig+0x114>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d02b      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d027      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a2c      	ldr	r2, [pc, #176]	; (8002b00 <TIM_Base_SetConfig+0x118>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d023      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a2b      	ldr	r2, [pc, #172]	; (8002b04 <TIM_Base_SetConfig+0x11c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01f      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a2a      	ldr	r2, [pc, #168]	; (8002b08 <TIM_Base_SetConfig+0x120>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01b      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a29      	ldr	r2, [pc, #164]	; (8002b0c <TIM_Base_SetConfig+0x124>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d017      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a28      	ldr	r2, [pc, #160]	; (8002b10 <TIM_Base_SetConfig+0x128>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d013      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a27      	ldr	r2, [pc, #156]	; (8002b14 <TIM_Base_SetConfig+0x12c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00f      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a26      	ldr	r2, [pc, #152]	; (8002b18 <TIM_Base_SetConfig+0x130>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00b      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a25      	ldr	r2, [pc, #148]	; (8002b1c <TIM_Base_SetConfig+0x134>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a24      	ldr	r2, [pc, #144]	; (8002b20 <TIM_Base_SetConfig+0x138>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d003      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a23      	ldr	r2, [pc, #140]	; (8002b24 <TIM_Base_SetConfig+0x13c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d108      	bne.n	8002aac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <TIM_Base_SetConfig+0x114>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_Base_SetConfig+0xf8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <TIM_Base_SetConfig+0x124>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d103      	bne.n	8002ae8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	615a      	str	r2, [r3, #20]
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40010000 	.word	0x40010000
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40000800 	.word	0x40000800
 8002b08:	40000c00 	.word	0x40000c00
 8002b0c:	40010400 	.word	0x40010400
 8002b10:	40014000 	.word	0x40014000
 8002b14:	40014400 	.word	0x40014400
 8002b18:	40014800 	.word	0x40014800
 8002b1c:	40001800 	.word	0x40001800
 8002b20:	40001c00 	.word	0x40001c00
 8002b24:	40002000 	.word	0x40002000

08002b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f023 0201 	bic.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f023 0302 	bic.w	r3, r3, #2
 8002b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a20      	ldr	r2, [pc, #128]	; (8002c00 <TIM_OC1_SetConfig+0xd8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d003      	beq.n	8002b8c <TIM_OC1_SetConfig+0x64>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a1f      	ldr	r2, [pc, #124]	; (8002c04 <TIM_OC1_SetConfig+0xdc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10c      	bne.n	8002ba6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f023 0308 	bic.w	r3, r3, #8
 8002b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a15      	ldr	r2, [pc, #84]	; (8002c00 <TIM_OC1_SetConfig+0xd8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <TIM_OC1_SetConfig+0x8e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <TIM_OC1_SetConfig+0xdc>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d111      	bne.n	8002bda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	621a      	str	r2, [r3, #32]
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	40010000 	.word	0x40010000
 8002c04:	40010400 	.word	0x40010400

08002c08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f023 0210 	bic.w	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0320 	bic.w	r3, r3, #32
 8002c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a22      	ldr	r2, [pc, #136]	; (8002cec <TIM_OC2_SetConfig+0xe4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d003      	beq.n	8002c70 <TIM_OC2_SetConfig+0x68>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a21      	ldr	r2, [pc, #132]	; (8002cf0 <TIM_OC2_SetConfig+0xe8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10d      	bne.n	8002c8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a17      	ldr	r2, [pc, #92]	; (8002cec <TIM_OC2_SetConfig+0xe4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d003      	beq.n	8002c9c <TIM_OC2_SetConfig+0x94>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <TIM_OC2_SetConfig+0xe8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d113      	bne.n	8002cc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ca2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002caa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	621a      	str	r2, [r3, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0303 	bic.w	r3, r3, #3
 8002d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a21      	ldr	r2, [pc, #132]	; (8002dd4 <TIM_OC3_SetConfig+0xe0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_OC3_SetConfig+0x66>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <TIM_OC3_SetConfig+0xe4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10d      	bne.n	8002d76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a16      	ldr	r2, [pc, #88]	; (8002dd4 <TIM_OC3_SetConfig+0xe0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_OC3_SetConfig+0x92>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a15      	ldr	r2, [pc, #84]	; (8002dd8 <TIM_OC3_SetConfig+0xe4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d113      	bne.n	8002dae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	621a      	str	r2, [r3, #32]
}
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	40010400 	.word	0x40010400

08002ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	031b      	lsls	r3, r3, #12
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <TIM_OC4_SetConfig+0xa4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <TIM_OC4_SetConfig+0x68>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <TIM_OC4_SetConfig+0xa8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d109      	bne.n	8002e58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	019b      	lsls	r3, r3, #6
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	621a      	str	r2, [r3, #32]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40010000 	.word	0x40010000
 8002e84:	40010400 	.word	0x40010400

08002e88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1a      	ldr	r2, [r3, #32]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	401a      	ands	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1a      	ldr	r2, [r3, #32]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e05a      	b.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d022      	beq.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f38:	d01d      	beq.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d018      	beq.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1a      	ldr	r2, [pc, #104]	; (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00e      	beq.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d10c      	bne.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800
 8002fbc:	40000c00 	.word	0x40000c00
 8002fc0:	40010400 	.word	0x40010400
 8002fc4:	40014000 	.word	0x40014000
 8002fc8:	40001800 	.word	0x40001800

08002fcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e03d      	b.n	8003064 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e03f      	b.n	8003102 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe f800 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 fe1f 	bl	8003cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b08a      	sub	sp, #40	; 0x28
 800310e:	af02      	add	r7, sp, #8
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b20      	cmp	r3, #32
 8003128:	d17c      	bne.n	8003224 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_UART_Transmit+0x2c>
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e075      	b.n	8003226 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_UART_Transmit+0x3e>
 8003144:	2302      	movs	r3, #2
 8003146:	e06e      	b.n	8003226 <HAL_UART_Transmit+0x11c>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2221      	movs	r2, #33	; 0x21
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800315e:	f7fe f901 	bl	8001364 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	88fa      	ldrh	r2, [r7, #6]
 8003168:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003178:	d108      	bne.n	800318c <HAL_UART_Transmit+0x82>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	e003      	b.n	8003194 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800319c:	e02a      	b.n	80031f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2200      	movs	r2, #0
 80031a6:	2180      	movs	r1, #128	; 0x80
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fb63 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e036      	b.n	8003226 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10b      	bne.n	80031d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	3302      	adds	r3, #2
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	e007      	b.n	80031e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	781a      	ldrb	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	3301      	adds	r3, #1
 80031e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1cf      	bne.n	800319e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2200      	movs	r2, #0
 8003206:	2140      	movs	r1, #64	; 0x40
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fb33 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e006      	b.n	8003226 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
  }
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	4613      	mov	r3, r2
 800323a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b20      	cmp	r3, #32
 8003246:	d130      	bne.n	80032aa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_UART_Transmit_IT+0x26>
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e029      	b.n	80032ac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_UART_Transmit_IT+0x38>
 8003262:	2302      	movs	r3, #2
 8003264:	e022      	b.n	80032ac <HAL_UART_Transmit_IT+0x7e>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	88fa      	ldrh	r2, [r7, #6]
 8003278:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2221      	movs	r2, #33	; 0x21
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e000      	b.n	80032ac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
  }
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d11d      	bne.n	800330e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <HAL_UART_Receive_IT+0x26>
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e016      	b.n	8003310 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_UART_Receive_IT+0x38>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e00f      	b.n	8003310 <HAL_UART_Receive_IT+0x58>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	461a      	mov	r2, r3
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fb23 	bl	8003950 <UART_Start_Receive_IT>
 800330a:	4603      	mov	r3, r0
 800330c:	e000      	b.n	8003310 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
  }
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b0ba      	sub	sp, #232	; 0xe8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003344:	2300      	movs	r3, #0
 8003346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800335e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_UART_IRQHandler+0x66>
 800336a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fc03 	bl	8003b82 <UART_Receive_IT>
      return;
 800337c:	e256      	b.n	800382c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800337e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80de 	beq.w	8003544 <HAL_UART_IRQHandler+0x22c>
 8003388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d106      	bne.n	80033a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003398:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80d1 	beq.w	8003544 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_UART_IRQHandler+0xae>
 80033ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f043 0201 	orr.w	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_UART_IRQHandler+0xd2>
 80033d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f043 0202 	orr.w	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_UART_IRQHandler+0xf6>
 80033f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f043 0204 	orr.w	r2, r3, #4
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800340e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d011      	beq.n	800343e <HAL_UART_IRQHandler+0x126>
 800341a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f043 0208 	orr.w	r2, r3, #8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 81ed 	beq.w	8003822 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_UART_IRQHandler+0x14e>
 8003454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fb8e 	bl	8003b82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <HAL_UART_IRQHandler+0x17a>
 800348a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04f      	beq.n	8003532 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa96 	bl	80039c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d141      	bne.n	800352a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3314      	adds	r3, #20
 80034ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3314      	adds	r3, #20
 80034ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1d9      	bne.n	80034a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d013      	beq.n	8003522 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	4a7d      	ldr	r2, [pc, #500]	; (80036f4 <HAL_UART_IRQHandler+0x3dc>)
 8003500:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe f8eb 	bl	80016e2 <HAL_DMA_Abort_IT>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d016      	beq.n	8003540 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800351c:	4610      	mov	r0, r2
 800351e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003520:	e00e      	b.n	8003540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f990 	bl	8003848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003528:	e00a      	b.n	8003540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f98c 	bl	8003848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003530:	e006      	b.n	8003540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f988 	bl	8003848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800353e:	e170      	b.n	8003822 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003540:	bf00      	nop
    return;
 8003542:	e16e      	b.n	8003822 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	2b01      	cmp	r3, #1
 800354a:	f040 814a 	bne.w	80037e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8143 	beq.w	80037e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800355c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 813c 	beq.w	80037e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	f040 80b4 	bne.w	80036f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800359c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8140 	beq.w	8003826 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ae:	429a      	cmp	r2, r3
 80035b0:	f080 8139 	bcs.w	8003826 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c6:	f000 8088 	beq.w	80036da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	330c      	adds	r3, #12
 80035f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80035f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003602:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800360e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1d9      	bne.n	80035ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3314      	adds	r3, #20
 800361c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3314      	adds	r3, #20
 8003636:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800363a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800363e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003642:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800364c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e1      	bne.n	8003616 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3314      	adds	r3, #20
 8003658:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3314      	adds	r3, #20
 8003672:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003676:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003678:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800367c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e3      	bne.n	8003652 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	330c      	adds	r3, #12
 800369e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036aa:	f023 0310 	bic.w	r3, r3, #16
 80036ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80036be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e3      	bne.n	8003698 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd ff94 	bl	8001602 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8b6 	bl	800385c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036f0:	e099      	b.n	8003826 <HAL_UART_IRQHandler+0x50e>
 80036f2:	bf00      	nop
 80036f4:	08003a8b 	.word	0x08003a8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003700:	b29b      	uxth	r3, r3
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 808b 	beq.w	800382a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8086 	beq.w	800382a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800372e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003730:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003734:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	330c      	adds	r3, #12
 800373e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003742:	647a      	str	r2, [r7, #68]	; 0x44
 8003744:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003748:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e3      	bne.n	800371e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3314      	adds	r3, #20
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	623b      	str	r3, [r7, #32]
   return(result);
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3314      	adds	r3, #20
 8003776:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800377a:	633a      	str	r2, [r7, #48]	; 0x30
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e3      	bne.n	8003756 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	330c      	adds	r3, #12
 80037a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0310 	bic.w	r3, r3, #16
 80037b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	330c      	adds	r3, #12
 80037bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037c0:	61fa      	str	r2, [r7, #28]
 80037c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	69b9      	ldr	r1, [r7, #24]
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	617b      	str	r3, [r7, #20]
   return(result);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e3      	bne.n	800379c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f83e 	bl	800385c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037e0:	e023      	b.n	800382a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_UART_IRQHandler+0x4ea>
 80037ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f959 	bl	8003ab2 <UART_Transmit_IT>
    return;
 8003800:	e014      	b.n	800382c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00e      	beq.n	800382c <HAL_UART_IRQHandler+0x514>
 800380e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f999 	bl	8003b52 <UART_EndTransmit_IT>
    return;
 8003820:	e004      	b.n	800382c <HAL_UART_IRQHandler+0x514>
    return;
 8003822:	bf00      	nop
 8003824:	e002      	b.n	800382c <HAL_UART_IRQHandler+0x514>
      return;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <HAL_UART_IRQHandler+0x514>
      return;
 800382a:	bf00      	nop
  }
}
 800382c:	37e8      	adds	r7, #232	; 0xe8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop

08003834 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b090      	sub	sp, #64	; 0x40
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003884:	e050      	b.n	8003928 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d04c      	beq.n	8003928 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800388e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003894:	f7fd fd66 	bl	8001364 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d241      	bcs.n	8003928 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	330c      	adds	r3, #12
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038c4:	637a      	str	r2, [r7, #52]	; 0x34
 80038c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e5      	bne.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3314      	adds	r3, #20
 80038de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	613b      	str	r3, [r7, #16]
   return(result);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3314      	adds	r3, #20
 80038f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038f8:	623a      	str	r2, [r7, #32]
 80038fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	69f9      	ldr	r1, [r7, #28]
 80038fe:	6a3a      	ldr	r2, [r7, #32]
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	61bb      	str	r3, [r7, #24]
   return(result);
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e5      	bne.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e00f      	b.n	8003948 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4013      	ands	r3, r2
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	429a      	cmp	r2, r3
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	429a      	cmp	r2, r3
 8003944:	d09f      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3740      	adds	r7, #64	; 0x40
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	88fa      	ldrh	r2, [r7, #6]
 800396e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2222      	movs	r2, #34	; 0x22
 800397a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003994:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0220 	orr.w	r2, r2, #32
 80039b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b095      	sub	sp, #84	; 0x54
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d6:	e853 3f00 	ldrex	r3, [r3]
 80039da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	330c      	adds	r3, #12
 80039ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039ec:	643a      	str	r2, [r7, #64]	; 0x40
 80039ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039f4:	e841 2300 	strex	r3, r2, [r1]
 80039f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e5      	bne.n	80039cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3314      	adds	r3, #20
 8003a06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3314      	adds	r3, #20
 8003a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e5      	bne.n	8003a00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d119      	bne.n	8003a70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f023 0310 	bic.w	r3, r3, #16
 8003a52:	647b      	str	r3, [r7, #68]	; 0x44
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a5c:	61ba      	str	r2, [r7, #24]
 8003a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6979      	ldr	r1, [r7, #20]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e5      	bne.n	8003a3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a7e:	bf00      	nop
 8003a80:	3754      	adds	r7, #84	; 0x54
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff fecf 	bl	8003848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b21      	cmp	r3, #33	; 0x21
 8003ac4:	d13e      	bne.n	8003b44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ace:	d114      	bne.n	8003afa <UART_Transmit_IT+0x48>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d110      	bne.n	8003afa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	1c9a      	adds	r2, r3, #2
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	621a      	str	r2, [r3, #32]
 8003af8:	e008      	b.n	8003b0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	1c59      	adds	r1, r3, #1
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6211      	str	r1, [r2, #32]
 8003b04:	781a      	ldrb	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10f      	bne.n	8003b40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fe5e 	bl	8003834 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b08c      	sub	sp, #48	; 0x30
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b22      	cmp	r3, #34	; 0x22
 8003b94:	f040 80ab 	bne.w	8003cee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba0:	d117      	bne.n	8003bd2 <UART_Receive_IT+0x50>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d113      	bne.n	8003bd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	1c9a      	adds	r2, r3, #2
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
 8003bd0:	e026      	b.n	8003c20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be4:	d007      	beq.n	8003bf6 <UART_Receive_IT+0x74>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <UART_Receive_IT+0x82>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	e008      	b.n	8003c16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d15a      	bne.n	8003cea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0220 	bic.w	r2, r2, #32
 8003c42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d135      	bne.n	8003ce0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f023 0310 	bic.w	r3, r3, #16
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9a:	623a      	str	r2, [r7, #32]
 8003c9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	69f9      	ldr	r1, [r7, #28]
 8003ca0:	6a3a      	ldr	r2, [r7, #32]
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e5      	bne.n	8003c7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d10a      	bne.n	8003cd2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff fdbf 	bl	800385c <HAL_UARTEx_RxEventCallback>
 8003cde:	e002      	b.n	8003ce6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7fd f80b 	bl	8000cfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e002      	b.n	8003cf0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
  }
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3730      	adds	r7, #48	; 0x30
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfc:	b09f      	sub	sp, #124	; 0x7c
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0e:	68d9      	ldr	r1, [r3, #12]
 8003d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	ea40 0301 	orr.w	r3, r0, r1
 8003d18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d3c:	f021 010c 	bic.w	r1, r1, #12
 8003d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d46:	430b      	orrs	r3, r1
 8003d48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d56:	6999      	ldr	r1, [r3, #24]
 8003d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	ea40 0301 	orr.w	r3, r0, r1
 8003d60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4bc5      	ldr	r3, [pc, #788]	; (800407c <UART_SetConfig+0x384>)
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d004      	beq.n	8003d76 <UART_SetConfig+0x7e>
 8003d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4bc3      	ldr	r3, [pc, #780]	; (8004080 <UART_SetConfig+0x388>)
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d103      	bne.n	8003d7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d76:	f7fd ff89 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8003d7a:	6778      	str	r0, [r7, #116]	; 0x74
 8003d7c:	e002      	b.n	8003d84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d7e:	f7fd ff71 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8003d82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8c:	f040 80b6 	bne.w	8003efc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d92:	461c      	mov	r4, r3
 8003d94:	f04f 0500 	mov.w	r5, #0
 8003d98:	4622      	mov	r2, r4
 8003d9a:	462b      	mov	r3, r5
 8003d9c:	1891      	adds	r1, r2, r2
 8003d9e:	6439      	str	r1, [r7, #64]	; 0x40
 8003da0:	415b      	adcs	r3, r3
 8003da2:	647b      	str	r3, [r7, #68]	; 0x44
 8003da4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003da8:	1912      	adds	r2, r2, r4
 8003daa:	eb45 0303 	adc.w	r3, r5, r3
 8003dae:	f04f 0000 	mov.w	r0, #0
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	00d9      	lsls	r1, r3, #3
 8003db8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dbc:	00d0      	lsls	r0, r2, #3
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	1911      	adds	r1, r2, r4
 8003dc4:	6639      	str	r1, [r7, #96]	; 0x60
 8003dc6:	416b      	adcs	r3, r5
 8003dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	1891      	adds	r1, r2, r2
 8003dd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dd8:	415b      	adcs	r3, r3
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003de0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003de4:	f7fc fa6c 	bl	80002c0 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4ba5      	ldr	r3, [pc, #660]	; (8004084 <UART_SetConfig+0x38c>)
 8003dee:	fba3 2302 	umull	r2, r3, r3, r2
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	011e      	lsls	r6, r3, #4
 8003df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df8:	461c      	mov	r4, r3
 8003dfa:	f04f 0500 	mov.w	r5, #0
 8003dfe:	4622      	mov	r2, r4
 8003e00:	462b      	mov	r3, r5
 8003e02:	1891      	adds	r1, r2, r2
 8003e04:	6339      	str	r1, [r7, #48]	; 0x30
 8003e06:	415b      	adcs	r3, r3
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e0e:	1912      	adds	r2, r2, r4
 8003e10:	eb45 0303 	adc.w	r3, r5, r3
 8003e14:	f04f 0000 	mov.w	r0, #0
 8003e18:	f04f 0100 	mov.w	r1, #0
 8003e1c:	00d9      	lsls	r1, r3, #3
 8003e1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e22:	00d0      	lsls	r0, r2, #3
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	1911      	adds	r1, r2, r4
 8003e2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e2c:	416b      	adcs	r3, r5
 8003e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	461a      	mov	r2, r3
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	1891      	adds	r1, r2, r2
 8003e3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e3e:	415b      	adcs	r3, r3
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e4a:	f7fc fa39 	bl	80002c0 <__aeabi_uldivmod>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4b8c      	ldr	r3, [pc, #560]	; (8004084 <UART_SetConfig+0x38c>)
 8003e54:	fba3 1302 	umull	r1, r3, r3, r2
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	2164      	movs	r1, #100	; 0x64
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	3332      	adds	r3, #50	; 0x32
 8003e66:	4a87      	ldr	r2, [pc, #540]	; (8004084 <UART_SetConfig+0x38c>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e74:	441e      	add	r6, r3
 8003e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	1894      	adds	r4, r2, r2
 8003e84:	623c      	str	r4, [r7, #32]
 8003e86:	415b      	adcs	r3, r3
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e8e:	1812      	adds	r2, r2, r0
 8003e90:	eb41 0303 	adc.w	r3, r1, r3
 8003e94:	f04f 0400 	mov.w	r4, #0
 8003e98:	f04f 0500 	mov.w	r5, #0
 8003e9c:	00dd      	lsls	r5, r3, #3
 8003e9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ea2:	00d4      	lsls	r4, r2, #3
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	462b      	mov	r3, r5
 8003ea8:	1814      	adds	r4, r2, r0
 8003eaa:	653c      	str	r4, [r7, #80]	; 0x50
 8003eac:	414b      	adcs	r3, r1
 8003eae:	657b      	str	r3, [r7, #84]	; 0x54
 8003eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	1891      	adds	r1, r2, r2
 8003ebc:	61b9      	str	r1, [r7, #24]
 8003ebe:	415b      	adcs	r3, r3
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003eca:	f7fc f9f9 	bl	80002c0 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4b6c      	ldr	r3, [pc, #432]	; (8004084 <UART_SetConfig+0x38c>)
 8003ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	2164      	movs	r1, #100	; 0x64
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	3332      	adds	r3, #50	; 0x32
 8003ee6:	4a67      	ldr	r2, [pc, #412]	; (8004084 <UART_SetConfig+0x38c>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	f003 0207 	and.w	r2, r3, #7
 8003ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4432      	add	r2, r6
 8003ef8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003efa:	e0b9      	b.n	8004070 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efe:	461c      	mov	r4, r3
 8003f00:	f04f 0500 	mov.w	r5, #0
 8003f04:	4622      	mov	r2, r4
 8003f06:	462b      	mov	r3, r5
 8003f08:	1891      	adds	r1, r2, r2
 8003f0a:	6139      	str	r1, [r7, #16]
 8003f0c:	415b      	adcs	r3, r3
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f14:	1912      	adds	r2, r2, r4
 8003f16:	eb45 0303 	adc.w	r3, r5, r3
 8003f1a:	f04f 0000 	mov.w	r0, #0
 8003f1e:	f04f 0100 	mov.w	r1, #0
 8003f22:	00d9      	lsls	r1, r3, #3
 8003f24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f28:	00d0      	lsls	r0, r2, #3
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	eb12 0804 	adds.w	r8, r2, r4
 8003f32:	eb43 0905 	adc.w	r9, r3, r5
 8003f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	008b      	lsls	r3, r1, #2
 8003f4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f4e:	0082      	lsls	r2, r0, #2
 8003f50:	4640      	mov	r0, r8
 8003f52:	4649      	mov	r1, r9
 8003f54:	f7fc f9b4 	bl	80002c0 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4b49      	ldr	r3, [pc, #292]	; (8004084 <UART_SetConfig+0x38c>)
 8003f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	011e      	lsls	r6, r3, #4
 8003f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	1894      	adds	r4, r2, r2
 8003f74:	60bc      	str	r4, [r7, #8]
 8003f76:	415b      	adcs	r3, r3
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f7e:	1812      	adds	r2, r2, r0
 8003f80:	eb41 0303 	adc.w	r3, r1, r3
 8003f84:	f04f 0400 	mov.w	r4, #0
 8003f88:	f04f 0500 	mov.w	r5, #0
 8003f8c:	00dd      	lsls	r5, r3, #3
 8003f8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f92:	00d4      	lsls	r4, r2, #3
 8003f94:	4622      	mov	r2, r4
 8003f96:	462b      	mov	r3, r5
 8003f98:	1814      	adds	r4, r2, r0
 8003f9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f9c:	414b      	adcs	r3, r1
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	008b      	lsls	r3, r1, #2
 8003fb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fb8:	0082      	lsls	r2, r0, #2
 8003fba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003fbe:	f7fc f97f 	bl	80002c0 <__aeabi_uldivmod>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4b2f      	ldr	r3, [pc, #188]	; (8004084 <UART_SetConfig+0x38c>)
 8003fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	2164      	movs	r1, #100	; 0x64
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	3332      	adds	r3, #50	; 0x32
 8003fda:	4a2a      	ldr	r2, [pc, #168]	; (8004084 <UART_SetConfig+0x38c>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe6:	441e      	add	r6, r3
 8003fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fea:	4618      	mov	r0, r3
 8003fec:	f04f 0100 	mov.w	r1, #0
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	1894      	adds	r4, r2, r2
 8003ff6:	603c      	str	r4, [r7, #0]
 8003ff8:	415b      	adcs	r3, r3
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004000:	1812      	adds	r2, r2, r0
 8004002:	eb41 0303 	adc.w	r3, r1, r3
 8004006:	f04f 0400 	mov.w	r4, #0
 800400a:	f04f 0500 	mov.w	r5, #0
 800400e:	00dd      	lsls	r5, r3, #3
 8004010:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004014:	00d4      	lsls	r4, r2, #3
 8004016:	4622      	mov	r2, r4
 8004018:	462b      	mov	r3, r5
 800401a:	eb12 0a00 	adds.w	sl, r2, r0
 800401e:	eb43 0b01 	adc.w	fp, r3, r1
 8004022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4618      	mov	r0, r3
 8004028:	f04f 0100 	mov.w	r1, #0
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	008b      	lsls	r3, r1, #2
 8004036:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800403a:	0082      	lsls	r2, r0, #2
 800403c:	4650      	mov	r0, sl
 800403e:	4659      	mov	r1, fp
 8004040:	f7fc f93e 	bl	80002c0 <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <UART_SetConfig+0x38c>)
 800404a:	fba3 1302 	umull	r1, r3, r3, r2
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2164      	movs	r1, #100	; 0x64
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	3332      	adds	r3, #50	; 0x32
 800405c:	4a09      	ldr	r2, [pc, #36]	; (8004084 <UART_SetConfig+0x38c>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	f003 020f 	and.w	r2, r3, #15
 8004068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4432      	add	r2, r6
 800406e:	609a      	str	r2, [r3, #8]
}
 8004070:	bf00      	nop
 8004072:	377c      	adds	r7, #124	; 0x7c
 8004074:	46bd      	mov	sp, r7
 8004076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407a:	bf00      	nop
 800407c:	40011000 	.word	0x40011000
 8004080:	40011400 	.word	0x40011400
 8004084:	51eb851f 	.word	0x51eb851f

08004088 <__errno>:
 8004088:	4b01      	ldr	r3, [pc, #4]	; (8004090 <__errno+0x8>)
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000050 	.word	0x20000050

08004094 <__libc_init_array>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	4d0d      	ldr	r5, [pc, #52]	; (80040cc <__libc_init_array+0x38>)
 8004098:	4c0d      	ldr	r4, [pc, #52]	; (80040d0 <__libc_init_array+0x3c>)
 800409a:	1b64      	subs	r4, r4, r5
 800409c:	10a4      	asrs	r4, r4, #2
 800409e:	2600      	movs	r6, #0
 80040a0:	42a6      	cmp	r6, r4
 80040a2:	d109      	bne.n	80040b8 <__libc_init_array+0x24>
 80040a4:	4d0b      	ldr	r5, [pc, #44]	; (80040d4 <__libc_init_array+0x40>)
 80040a6:	4c0c      	ldr	r4, [pc, #48]	; (80040d8 <__libc_init_array+0x44>)
 80040a8:	f001 f912 	bl	80052d0 <_init>
 80040ac:	1b64      	subs	r4, r4, r5
 80040ae:	10a4      	asrs	r4, r4, #2
 80040b0:	2600      	movs	r6, #0
 80040b2:	42a6      	cmp	r6, r4
 80040b4:	d105      	bne.n	80040c2 <__libc_init_array+0x2e>
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040bc:	4798      	blx	r3
 80040be:	3601      	adds	r6, #1
 80040c0:	e7ee      	b.n	80040a0 <__libc_init_array+0xc>
 80040c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c6:	4798      	blx	r3
 80040c8:	3601      	adds	r6, #1
 80040ca:	e7f2      	b.n	80040b2 <__libc_init_array+0x1e>
 80040cc:	080055c8 	.word	0x080055c8
 80040d0:	080055c8 	.word	0x080055c8
 80040d4:	080055c8 	.word	0x080055c8
 80040d8:	080055cc 	.word	0x080055cc

080040dc <memset>:
 80040dc:	4402      	add	r2, r0
 80040de:	4603      	mov	r3, r0
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d100      	bne.n	80040e6 <memset+0xa>
 80040e4:	4770      	bx	lr
 80040e6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ea:	e7f9      	b.n	80040e0 <memset+0x4>

080040ec <siprintf>:
 80040ec:	b40e      	push	{r1, r2, r3}
 80040ee:	b500      	push	{lr}
 80040f0:	b09c      	sub	sp, #112	; 0x70
 80040f2:	ab1d      	add	r3, sp, #116	; 0x74
 80040f4:	9002      	str	r0, [sp, #8]
 80040f6:	9006      	str	r0, [sp, #24]
 80040f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040fc:	4809      	ldr	r0, [pc, #36]	; (8004124 <siprintf+0x38>)
 80040fe:	9107      	str	r1, [sp, #28]
 8004100:	9104      	str	r1, [sp, #16]
 8004102:	4909      	ldr	r1, [pc, #36]	; (8004128 <siprintf+0x3c>)
 8004104:	f853 2b04 	ldr.w	r2, [r3], #4
 8004108:	9105      	str	r1, [sp, #20]
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	a902      	add	r1, sp, #8
 8004110:	f000 f896 	bl	8004240 <_svfiprintf_r>
 8004114:	9b02      	ldr	r3, [sp, #8]
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	b01c      	add	sp, #112	; 0x70
 800411c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004120:	b003      	add	sp, #12
 8004122:	4770      	bx	lr
 8004124:	20000050 	.word	0x20000050
 8004128:	ffff0208 	.word	0xffff0208

0800412c <siscanf>:
 800412c:	b40e      	push	{r1, r2, r3}
 800412e:	b510      	push	{r4, lr}
 8004130:	b09f      	sub	sp, #124	; 0x7c
 8004132:	ac21      	add	r4, sp, #132	; 0x84
 8004134:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004138:	f854 2b04 	ldr.w	r2, [r4], #4
 800413c:	9201      	str	r2, [sp, #4]
 800413e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004142:	9004      	str	r0, [sp, #16]
 8004144:	9008      	str	r0, [sp, #32]
 8004146:	f7fc f863 	bl	8000210 <strlen>
 800414a:	4b0c      	ldr	r3, [pc, #48]	; (800417c <siscanf+0x50>)
 800414c:	9005      	str	r0, [sp, #20]
 800414e:	9009      	str	r0, [sp, #36]	; 0x24
 8004150:	930d      	str	r3, [sp, #52]	; 0x34
 8004152:	480b      	ldr	r0, [pc, #44]	; (8004180 <siscanf+0x54>)
 8004154:	9a01      	ldr	r2, [sp, #4]
 8004156:	6800      	ldr	r0, [r0, #0]
 8004158:	9403      	str	r4, [sp, #12]
 800415a:	2300      	movs	r3, #0
 800415c:	9311      	str	r3, [sp, #68]	; 0x44
 800415e:	9316      	str	r3, [sp, #88]	; 0x58
 8004160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004164:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004168:	a904      	add	r1, sp, #16
 800416a:	4623      	mov	r3, r4
 800416c:	f000 f9c2 	bl	80044f4 <__ssvfiscanf_r>
 8004170:	b01f      	add	sp, #124	; 0x7c
 8004172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004176:	b003      	add	sp, #12
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	08004185 	.word	0x08004185
 8004180:	20000050 	.word	0x20000050

08004184 <__seofread>:
 8004184:	2000      	movs	r0, #0
 8004186:	4770      	bx	lr

08004188 <__ssputs_r>:
 8004188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800418c:	688e      	ldr	r6, [r1, #8]
 800418e:	429e      	cmp	r6, r3
 8004190:	4682      	mov	sl, r0
 8004192:	460c      	mov	r4, r1
 8004194:	4690      	mov	r8, r2
 8004196:	461f      	mov	r7, r3
 8004198:	d838      	bhi.n	800420c <__ssputs_r+0x84>
 800419a:	898a      	ldrh	r2, [r1, #12]
 800419c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041a0:	d032      	beq.n	8004208 <__ssputs_r+0x80>
 80041a2:	6825      	ldr	r5, [r4, #0]
 80041a4:	6909      	ldr	r1, [r1, #16]
 80041a6:	eba5 0901 	sub.w	r9, r5, r1
 80041aa:	6965      	ldr	r5, [r4, #20]
 80041ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041b4:	3301      	adds	r3, #1
 80041b6:	444b      	add	r3, r9
 80041b8:	106d      	asrs	r5, r5, #1
 80041ba:	429d      	cmp	r5, r3
 80041bc:	bf38      	it	cc
 80041be:	461d      	movcc	r5, r3
 80041c0:	0553      	lsls	r3, r2, #21
 80041c2:	d531      	bpl.n	8004228 <__ssputs_r+0xa0>
 80041c4:	4629      	mov	r1, r5
 80041c6:	f000 ffdf 	bl	8005188 <_malloc_r>
 80041ca:	4606      	mov	r6, r0
 80041cc:	b950      	cbnz	r0, 80041e4 <__ssputs_r+0x5c>
 80041ce:	230c      	movs	r3, #12
 80041d0:	f8ca 3000 	str.w	r3, [sl]
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e4:	6921      	ldr	r1, [r4, #16]
 80041e6:	464a      	mov	r2, r9
 80041e8:	f000 ff56 	bl	8005098 <memcpy>
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	6126      	str	r6, [r4, #16]
 80041fa:	6165      	str	r5, [r4, #20]
 80041fc:	444e      	add	r6, r9
 80041fe:	eba5 0509 	sub.w	r5, r5, r9
 8004202:	6026      	str	r6, [r4, #0]
 8004204:	60a5      	str	r5, [r4, #8]
 8004206:	463e      	mov	r6, r7
 8004208:	42be      	cmp	r6, r7
 800420a:	d900      	bls.n	800420e <__ssputs_r+0x86>
 800420c:	463e      	mov	r6, r7
 800420e:	4632      	mov	r2, r6
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	4641      	mov	r1, r8
 8004214:	f000 ff4e 	bl	80050b4 <memmove>
 8004218:	68a3      	ldr	r3, [r4, #8]
 800421a:	6822      	ldr	r2, [r4, #0]
 800421c:	1b9b      	subs	r3, r3, r6
 800421e:	4432      	add	r2, r6
 8004220:	60a3      	str	r3, [r4, #8]
 8004222:	6022      	str	r2, [r4, #0]
 8004224:	2000      	movs	r0, #0
 8004226:	e7db      	b.n	80041e0 <__ssputs_r+0x58>
 8004228:	462a      	mov	r2, r5
 800422a:	f001 f807 	bl	800523c <_realloc_r>
 800422e:	4606      	mov	r6, r0
 8004230:	2800      	cmp	r0, #0
 8004232:	d1e1      	bne.n	80041f8 <__ssputs_r+0x70>
 8004234:	6921      	ldr	r1, [r4, #16]
 8004236:	4650      	mov	r0, sl
 8004238:	f000 ff56 	bl	80050e8 <_free_r>
 800423c:	e7c7      	b.n	80041ce <__ssputs_r+0x46>
	...

08004240 <_svfiprintf_r>:
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	4698      	mov	r8, r3
 8004246:	898b      	ldrh	r3, [r1, #12]
 8004248:	061b      	lsls	r3, r3, #24
 800424a:	b09d      	sub	sp, #116	; 0x74
 800424c:	4607      	mov	r7, r0
 800424e:	460d      	mov	r5, r1
 8004250:	4614      	mov	r4, r2
 8004252:	d50e      	bpl.n	8004272 <_svfiprintf_r+0x32>
 8004254:	690b      	ldr	r3, [r1, #16]
 8004256:	b963      	cbnz	r3, 8004272 <_svfiprintf_r+0x32>
 8004258:	2140      	movs	r1, #64	; 0x40
 800425a:	f000 ff95 	bl	8005188 <_malloc_r>
 800425e:	6028      	str	r0, [r5, #0]
 8004260:	6128      	str	r0, [r5, #16]
 8004262:	b920      	cbnz	r0, 800426e <_svfiprintf_r+0x2e>
 8004264:	230c      	movs	r3, #12
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	e0d1      	b.n	8004412 <_svfiprintf_r+0x1d2>
 800426e:	2340      	movs	r3, #64	; 0x40
 8004270:	616b      	str	r3, [r5, #20]
 8004272:	2300      	movs	r3, #0
 8004274:	9309      	str	r3, [sp, #36]	; 0x24
 8004276:	2320      	movs	r3, #32
 8004278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800427c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004280:	2330      	movs	r3, #48	; 0x30
 8004282:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800442c <_svfiprintf_r+0x1ec>
 8004286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800428a:	f04f 0901 	mov.w	r9, #1
 800428e:	4623      	mov	r3, r4
 8004290:	469a      	mov	sl, r3
 8004292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004296:	b10a      	cbz	r2, 800429c <_svfiprintf_r+0x5c>
 8004298:	2a25      	cmp	r2, #37	; 0x25
 800429a:	d1f9      	bne.n	8004290 <_svfiprintf_r+0x50>
 800429c:	ebba 0b04 	subs.w	fp, sl, r4
 80042a0:	d00b      	beq.n	80042ba <_svfiprintf_r+0x7a>
 80042a2:	465b      	mov	r3, fp
 80042a4:	4622      	mov	r2, r4
 80042a6:	4629      	mov	r1, r5
 80042a8:	4638      	mov	r0, r7
 80042aa:	f7ff ff6d 	bl	8004188 <__ssputs_r>
 80042ae:	3001      	adds	r0, #1
 80042b0:	f000 80aa 	beq.w	8004408 <_svfiprintf_r+0x1c8>
 80042b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042b6:	445a      	add	r2, fp
 80042b8:	9209      	str	r2, [sp, #36]	; 0x24
 80042ba:	f89a 3000 	ldrb.w	r3, [sl]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80a2 	beq.w	8004408 <_svfiprintf_r+0x1c8>
 80042c4:	2300      	movs	r3, #0
 80042c6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ce:	f10a 0a01 	add.w	sl, sl, #1
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	9307      	str	r3, [sp, #28]
 80042d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042da:	931a      	str	r3, [sp, #104]	; 0x68
 80042dc:	4654      	mov	r4, sl
 80042de:	2205      	movs	r2, #5
 80042e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e4:	4851      	ldr	r0, [pc, #324]	; (800442c <_svfiprintf_r+0x1ec>)
 80042e6:	f7fb ff9b 	bl	8000220 <memchr>
 80042ea:	9a04      	ldr	r2, [sp, #16]
 80042ec:	b9d8      	cbnz	r0, 8004326 <_svfiprintf_r+0xe6>
 80042ee:	06d0      	lsls	r0, r2, #27
 80042f0:	bf44      	itt	mi
 80042f2:	2320      	movmi	r3, #32
 80042f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042f8:	0711      	lsls	r1, r2, #28
 80042fa:	bf44      	itt	mi
 80042fc:	232b      	movmi	r3, #43	; 0x2b
 80042fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004302:	f89a 3000 	ldrb.w	r3, [sl]
 8004306:	2b2a      	cmp	r3, #42	; 0x2a
 8004308:	d015      	beq.n	8004336 <_svfiprintf_r+0xf6>
 800430a:	9a07      	ldr	r2, [sp, #28]
 800430c:	4654      	mov	r4, sl
 800430e:	2000      	movs	r0, #0
 8004310:	f04f 0c0a 	mov.w	ip, #10
 8004314:	4621      	mov	r1, r4
 8004316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800431a:	3b30      	subs	r3, #48	; 0x30
 800431c:	2b09      	cmp	r3, #9
 800431e:	d94e      	bls.n	80043be <_svfiprintf_r+0x17e>
 8004320:	b1b0      	cbz	r0, 8004350 <_svfiprintf_r+0x110>
 8004322:	9207      	str	r2, [sp, #28]
 8004324:	e014      	b.n	8004350 <_svfiprintf_r+0x110>
 8004326:	eba0 0308 	sub.w	r3, r0, r8
 800432a:	fa09 f303 	lsl.w	r3, r9, r3
 800432e:	4313      	orrs	r3, r2
 8004330:	9304      	str	r3, [sp, #16]
 8004332:	46a2      	mov	sl, r4
 8004334:	e7d2      	b.n	80042dc <_svfiprintf_r+0x9c>
 8004336:	9b03      	ldr	r3, [sp, #12]
 8004338:	1d19      	adds	r1, r3, #4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	9103      	str	r1, [sp, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	bfbb      	ittet	lt
 8004342:	425b      	neglt	r3, r3
 8004344:	f042 0202 	orrlt.w	r2, r2, #2
 8004348:	9307      	strge	r3, [sp, #28]
 800434a:	9307      	strlt	r3, [sp, #28]
 800434c:	bfb8      	it	lt
 800434e:	9204      	strlt	r2, [sp, #16]
 8004350:	7823      	ldrb	r3, [r4, #0]
 8004352:	2b2e      	cmp	r3, #46	; 0x2e
 8004354:	d10c      	bne.n	8004370 <_svfiprintf_r+0x130>
 8004356:	7863      	ldrb	r3, [r4, #1]
 8004358:	2b2a      	cmp	r3, #42	; 0x2a
 800435a:	d135      	bne.n	80043c8 <_svfiprintf_r+0x188>
 800435c:	9b03      	ldr	r3, [sp, #12]
 800435e:	1d1a      	adds	r2, r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	9203      	str	r2, [sp, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	bfb8      	it	lt
 8004368:	f04f 33ff 	movlt.w	r3, #4294967295
 800436c:	3402      	adds	r4, #2
 800436e:	9305      	str	r3, [sp, #20]
 8004370:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800443c <_svfiprintf_r+0x1fc>
 8004374:	7821      	ldrb	r1, [r4, #0]
 8004376:	2203      	movs	r2, #3
 8004378:	4650      	mov	r0, sl
 800437a:	f7fb ff51 	bl	8000220 <memchr>
 800437e:	b140      	cbz	r0, 8004392 <_svfiprintf_r+0x152>
 8004380:	2340      	movs	r3, #64	; 0x40
 8004382:	eba0 000a 	sub.w	r0, r0, sl
 8004386:	fa03 f000 	lsl.w	r0, r3, r0
 800438a:	9b04      	ldr	r3, [sp, #16]
 800438c:	4303      	orrs	r3, r0
 800438e:	3401      	adds	r4, #1
 8004390:	9304      	str	r3, [sp, #16]
 8004392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004396:	4826      	ldr	r0, [pc, #152]	; (8004430 <_svfiprintf_r+0x1f0>)
 8004398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800439c:	2206      	movs	r2, #6
 800439e:	f7fb ff3f 	bl	8000220 <memchr>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d038      	beq.n	8004418 <_svfiprintf_r+0x1d8>
 80043a6:	4b23      	ldr	r3, [pc, #140]	; (8004434 <_svfiprintf_r+0x1f4>)
 80043a8:	bb1b      	cbnz	r3, 80043f2 <_svfiprintf_r+0x1b2>
 80043aa:	9b03      	ldr	r3, [sp, #12]
 80043ac:	3307      	adds	r3, #7
 80043ae:	f023 0307 	bic.w	r3, r3, #7
 80043b2:	3308      	adds	r3, #8
 80043b4:	9303      	str	r3, [sp, #12]
 80043b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b8:	4433      	add	r3, r6
 80043ba:	9309      	str	r3, [sp, #36]	; 0x24
 80043bc:	e767      	b.n	800428e <_svfiprintf_r+0x4e>
 80043be:	fb0c 3202 	mla	r2, ip, r2, r3
 80043c2:	460c      	mov	r4, r1
 80043c4:	2001      	movs	r0, #1
 80043c6:	e7a5      	b.n	8004314 <_svfiprintf_r+0xd4>
 80043c8:	2300      	movs	r3, #0
 80043ca:	3401      	adds	r4, #1
 80043cc:	9305      	str	r3, [sp, #20]
 80043ce:	4619      	mov	r1, r3
 80043d0:	f04f 0c0a 	mov.w	ip, #10
 80043d4:	4620      	mov	r0, r4
 80043d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043da:	3a30      	subs	r2, #48	; 0x30
 80043dc:	2a09      	cmp	r2, #9
 80043de:	d903      	bls.n	80043e8 <_svfiprintf_r+0x1a8>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0c5      	beq.n	8004370 <_svfiprintf_r+0x130>
 80043e4:	9105      	str	r1, [sp, #20]
 80043e6:	e7c3      	b.n	8004370 <_svfiprintf_r+0x130>
 80043e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80043ec:	4604      	mov	r4, r0
 80043ee:	2301      	movs	r3, #1
 80043f0:	e7f0      	b.n	80043d4 <_svfiprintf_r+0x194>
 80043f2:	ab03      	add	r3, sp, #12
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	462a      	mov	r2, r5
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <_svfiprintf_r+0x1f8>)
 80043fa:	a904      	add	r1, sp, #16
 80043fc:	4638      	mov	r0, r7
 80043fe:	f3af 8000 	nop.w
 8004402:	1c42      	adds	r2, r0, #1
 8004404:	4606      	mov	r6, r0
 8004406:	d1d6      	bne.n	80043b6 <_svfiprintf_r+0x176>
 8004408:	89ab      	ldrh	r3, [r5, #12]
 800440a:	065b      	lsls	r3, r3, #25
 800440c:	f53f af2c 	bmi.w	8004268 <_svfiprintf_r+0x28>
 8004410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004412:	b01d      	add	sp, #116	; 0x74
 8004414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004418:	ab03      	add	r3, sp, #12
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	462a      	mov	r2, r5
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <_svfiprintf_r+0x1f8>)
 8004420:	a904      	add	r1, sp, #16
 8004422:	4638      	mov	r0, r7
 8004424:	f000 fa4c 	bl	80048c0 <_printf_i>
 8004428:	e7eb      	b.n	8004402 <_svfiprintf_r+0x1c2>
 800442a:	bf00      	nop
 800442c:	08005410 	.word	0x08005410
 8004430:	0800541a 	.word	0x0800541a
 8004434:	00000000 	.word	0x00000000
 8004438:	08004189 	.word	0x08004189
 800443c:	08005416 	.word	0x08005416

08004440 <_sungetc_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	1c4b      	adds	r3, r1, #1
 8004444:	4614      	mov	r4, r2
 8004446:	d103      	bne.n	8004450 <_sungetc_r+0x10>
 8004448:	f04f 35ff 	mov.w	r5, #4294967295
 800444c:	4628      	mov	r0, r5
 800444e:	bd38      	pop	{r3, r4, r5, pc}
 8004450:	8993      	ldrh	r3, [r2, #12]
 8004452:	f023 0320 	bic.w	r3, r3, #32
 8004456:	8193      	strh	r3, [r2, #12]
 8004458:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800445a:	6852      	ldr	r2, [r2, #4]
 800445c:	b2cd      	uxtb	r5, r1
 800445e:	b18b      	cbz	r3, 8004484 <_sungetc_r+0x44>
 8004460:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004462:	4293      	cmp	r3, r2
 8004464:	dd08      	ble.n	8004478 <_sungetc_r+0x38>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	1e5a      	subs	r2, r3, #1
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	3301      	adds	r3, #1
 8004474:	6063      	str	r3, [r4, #4]
 8004476:	e7e9      	b.n	800444c <_sungetc_r+0xc>
 8004478:	4621      	mov	r1, r4
 800447a:	f000 fdd1 	bl	8005020 <__submore>
 800447e:	2800      	cmp	r0, #0
 8004480:	d0f1      	beq.n	8004466 <_sungetc_r+0x26>
 8004482:	e7e1      	b.n	8004448 <_sungetc_r+0x8>
 8004484:	6921      	ldr	r1, [r4, #16]
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	b151      	cbz	r1, 80044a0 <_sungetc_r+0x60>
 800448a:	4299      	cmp	r1, r3
 800448c:	d208      	bcs.n	80044a0 <_sungetc_r+0x60>
 800448e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004492:	42a9      	cmp	r1, r5
 8004494:	d104      	bne.n	80044a0 <_sungetc_r+0x60>
 8004496:	3b01      	subs	r3, #1
 8004498:	3201      	adds	r2, #1
 800449a:	6023      	str	r3, [r4, #0]
 800449c:	6062      	str	r2, [r4, #4]
 800449e:	e7d5      	b.n	800444c <_sungetc_r+0xc>
 80044a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80044a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044a8:	6363      	str	r3, [r4, #52]	; 0x34
 80044aa:	2303      	movs	r3, #3
 80044ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80044ae:	4623      	mov	r3, r4
 80044b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	2301      	movs	r3, #1
 80044b8:	e7dc      	b.n	8004474 <_sungetc_r+0x34>

080044ba <__ssrefill_r>:
 80044ba:	b510      	push	{r4, lr}
 80044bc:	460c      	mov	r4, r1
 80044be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80044c0:	b169      	cbz	r1, 80044de <__ssrefill_r+0x24>
 80044c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044c6:	4299      	cmp	r1, r3
 80044c8:	d001      	beq.n	80044ce <__ssrefill_r+0x14>
 80044ca:	f000 fe0d 	bl	80050e8 <_free_r>
 80044ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044d0:	6063      	str	r3, [r4, #4]
 80044d2:	2000      	movs	r0, #0
 80044d4:	6360      	str	r0, [r4, #52]	; 0x34
 80044d6:	b113      	cbz	r3, 80044de <__ssrefill_r+0x24>
 80044d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044da:	6023      	str	r3, [r4, #0]
 80044dc:	bd10      	pop	{r4, pc}
 80044de:	6923      	ldr	r3, [r4, #16]
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	2300      	movs	r3, #0
 80044e4:	6063      	str	r3, [r4, #4]
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	f043 0320 	orr.w	r3, r3, #32
 80044ec:	81a3      	strh	r3, [r4, #12]
 80044ee:	f04f 30ff 	mov.w	r0, #4294967295
 80044f2:	e7f3      	b.n	80044dc <__ssrefill_r+0x22>

080044f4 <__ssvfiscanf_r>:
 80044f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f8:	460c      	mov	r4, r1
 80044fa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80044fe:	2100      	movs	r1, #0
 8004500:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004504:	49b2      	ldr	r1, [pc, #712]	; (80047d0 <__ssvfiscanf_r+0x2dc>)
 8004506:	91a0      	str	r1, [sp, #640]	; 0x280
 8004508:	f10d 0804 	add.w	r8, sp, #4
 800450c:	49b1      	ldr	r1, [pc, #708]	; (80047d4 <__ssvfiscanf_r+0x2e0>)
 800450e:	4fb2      	ldr	r7, [pc, #712]	; (80047d8 <__ssvfiscanf_r+0x2e4>)
 8004510:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80047dc <__ssvfiscanf_r+0x2e8>
 8004514:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004518:	4606      	mov	r6, r0
 800451a:	91a1      	str	r1, [sp, #644]	; 0x284
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	f892 a000 	ldrb.w	sl, [r2]
 8004522:	f1ba 0f00 	cmp.w	sl, #0
 8004526:	f000 8151 	beq.w	80047cc <__ssvfiscanf_r+0x2d8>
 800452a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800452e:	f013 0308 	ands.w	r3, r3, #8
 8004532:	f102 0501 	add.w	r5, r2, #1
 8004536:	d019      	beq.n	800456c <__ssvfiscanf_r+0x78>
 8004538:	6863      	ldr	r3, [r4, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	dd0f      	ble.n	800455e <__ssvfiscanf_r+0x6a>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	5cba      	ldrb	r2, [r7, r2]
 8004544:	0712      	lsls	r2, r2, #28
 8004546:	d401      	bmi.n	800454c <__ssvfiscanf_r+0x58>
 8004548:	462a      	mov	r2, r5
 800454a:	e7e8      	b.n	800451e <__ssvfiscanf_r+0x2a>
 800454c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800454e:	3201      	adds	r2, #1
 8004550:	9245      	str	r2, [sp, #276]	; 0x114
 8004552:	6862      	ldr	r2, [r4, #4]
 8004554:	3301      	adds	r3, #1
 8004556:	3a01      	subs	r2, #1
 8004558:	6062      	str	r2, [r4, #4]
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	e7ec      	b.n	8004538 <__ssvfiscanf_r+0x44>
 800455e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004560:	4621      	mov	r1, r4
 8004562:	4630      	mov	r0, r6
 8004564:	4798      	blx	r3
 8004566:	2800      	cmp	r0, #0
 8004568:	d0e9      	beq.n	800453e <__ssvfiscanf_r+0x4a>
 800456a:	e7ed      	b.n	8004548 <__ssvfiscanf_r+0x54>
 800456c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8004570:	f040 8083 	bne.w	800467a <__ssvfiscanf_r+0x186>
 8004574:	9341      	str	r3, [sp, #260]	; 0x104
 8004576:	9343      	str	r3, [sp, #268]	; 0x10c
 8004578:	7853      	ldrb	r3, [r2, #1]
 800457a:	2b2a      	cmp	r3, #42	; 0x2a
 800457c:	bf02      	ittt	eq
 800457e:	2310      	moveq	r3, #16
 8004580:	1c95      	addeq	r5, r2, #2
 8004582:	9341      	streq	r3, [sp, #260]	; 0x104
 8004584:	220a      	movs	r2, #10
 8004586:	46ab      	mov	fp, r5
 8004588:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800458c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004590:	2b09      	cmp	r3, #9
 8004592:	d91d      	bls.n	80045d0 <__ssvfiscanf_r+0xdc>
 8004594:	4891      	ldr	r0, [pc, #580]	; (80047dc <__ssvfiscanf_r+0x2e8>)
 8004596:	2203      	movs	r2, #3
 8004598:	f7fb fe42 	bl	8000220 <memchr>
 800459c:	b140      	cbz	r0, 80045b0 <__ssvfiscanf_r+0xbc>
 800459e:	2301      	movs	r3, #1
 80045a0:	eba0 0009 	sub.w	r0, r0, r9
 80045a4:	fa03 f000 	lsl.w	r0, r3, r0
 80045a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80045aa:	4318      	orrs	r0, r3
 80045ac:	9041      	str	r0, [sp, #260]	; 0x104
 80045ae:	465d      	mov	r5, fp
 80045b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80045b4:	2b78      	cmp	r3, #120	; 0x78
 80045b6:	d806      	bhi.n	80045c6 <__ssvfiscanf_r+0xd2>
 80045b8:	2b57      	cmp	r3, #87	; 0x57
 80045ba:	d810      	bhi.n	80045de <__ssvfiscanf_r+0xea>
 80045bc:	2b25      	cmp	r3, #37	; 0x25
 80045be:	d05c      	beq.n	800467a <__ssvfiscanf_r+0x186>
 80045c0:	d856      	bhi.n	8004670 <__ssvfiscanf_r+0x17c>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d074      	beq.n	80046b0 <__ssvfiscanf_r+0x1bc>
 80045c6:	2303      	movs	r3, #3
 80045c8:	9347      	str	r3, [sp, #284]	; 0x11c
 80045ca:	230a      	movs	r3, #10
 80045cc:	9342      	str	r3, [sp, #264]	; 0x108
 80045ce:	e081      	b.n	80046d4 <__ssvfiscanf_r+0x1e0>
 80045d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80045d2:	fb02 1303 	mla	r3, r2, r3, r1
 80045d6:	3b30      	subs	r3, #48	; 0x30
 80045d8:	9343      	str	r3, [sp, #268]	; 0x10c
 80045da:	465d      	mov	r5, fp
 80045dc:	e7d3      	b.n	8004586 <__ssvfiscanf_r+0x92>
 80045de:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80045e2:	2a20      	cmp	r2, #32
 80045e4:	d8ef      	bhi.n	80045c6 <__ssvfiscanf_r+0xd2>
 80045e6:	a101      	add	r1, pc, #4	; (adr r1, 80045ec <__ssvfiscanf_r+0xf8>)
 80045e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80045ec:	080046bf 	.word	0x080046bf
 80045f0:	080045c7 	.word	0x080045c7
 80045f4:	080045c7 	.word	0x080045c7
 80045f8:	0800471d 	.word	0x0800471d
 80045fc:	080045c7 	.word	0x080045c7
 8004600:	080045c7 	.word	0x080045c7
 8004604:	080045c7 	.word	0x080045c7
 8004608:	080045c7 	.word	0x080045c7
 800460c:	080045c7 	.word	0x080045c7
 8004610:	080045c7 	.word	0x080045c7
 8004614:	080045c7 	.word	0x080045c7
 8004618:	08004733 	.word	0x08004733
 800461c:	08004709 	.word	0x08004709
 8004620:	08004677 	.word	0x08004677
 8004624:	08004677 	.word	0x08004677
 8004628:	08004677 	.word	0x08004677
 800462c:	080045c7 	.word	0x080045c7
 8004630:	0800470d 	.word	0x0800470d
 8004634:	080045c7 	.word	0x080045c7
 8004638:	080045c7 	.word	0x080045c7
 800463c:	080045c7 	.word	0x080045c7
 8004640:	080045c7 	.word	0x080045c7
 8004644:	08004743 	.word	0x08004743
 8004648:	08004715 	.word	0x08004715
 800464c:	080046b7 	.word	0x080046b7
 8004650:	080045c7 	.word	0x080045c7
 8004654:	080045c7 	.word	0x080045c7
 8004658:	0800473f 	.word	0x0800473f
 800465c:	080045c7 	.word	0x080045c7
 8004660:	08004709 	.word	0x08004709
 8004664:	080045c7 	.word	0x080045c7
 8004668:	080045c7 	.word	0x080045c7
 800466c:	080046bf 	.word	0x080046bf
 8004670:	3b45      	subs	r3, #69	; 0x45
 8004672:	2b02      	cmp	r3, #2
 8004674:	d8a7      	bhi.n	80045c6 <__ssvfiscanf_r+0xd2>
 8004676:	2305      	movs	r3, #5
 8004678:	e02b      	b.n	80046d2 <__ssvfiscanf_r+0x1de>
 800467a:	6863      	ldr	r3, [r4, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	dd0d      	ble.n	800469c <__ssvfiscanf_r+0x1a8>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	4552      	cmp	r2, sl
 8004686:	f040 80a1 	bne.w	80047cc <__ssvfiscanf_r+0x2d8>
 800468a:	3301      	adds	r3, #1
 800468c:	6862      	ldr	r2, [r4, #4]
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004692:	3a01      	subs	r2, #1
 8004694:	3301      	adds	r3, #1
 8004696:	6062      	str	r2, [r4, #4]
 8004698:	9345      	str	r3, [sp, #276]	; 0x114
 800469a:	e755      	b.n	8004548 <__ssvfiscanf_r+0x54>
 800469c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800469e:	4621      	mov	r1, r4
 80046a0:	4630      	mov	r0, r6
 80046a2:	4798      	blx	r3
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d0eb      	beq.n	8004680 <__ssvfiscanf_r+0x18c>
 80046a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80046aa:	2800      	cmp	r0, #0
 80046ac:	f040 8084 	bne.w	80047b8 <__ssvfiscanf_r+0x2c4>
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295
 80046b4:	e086      	b.n	80047c4 <__ssvfiscanf_r+0x2d0>
 80046b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80046b8:	f042 0220 	orr.w	r2, r2, #32
 80046bc:	9241      	str	r2, [sp, #260]	; 0x104
 80046be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80046c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c4:	9241      	str	r2, [sp, #260]	; 0x104
 80046c6:	2210      	movs	r2, #16
 80046c8:	2b6f      	cmp	r3, #111	; 0x6f
 80046ca:	9242      	str	r2, [sp, #264]	; 0x108
 80046cc:	bf34      	ite	cc
 80046ce:	2303      	movcc	r3, #3
 80046d0:	2304      	movcs	r3, #4
 80046d2:	9347      	str	r3, [sp, #284]	; 0x11c
 80046d4:	6863      	ldr	r3, [r4, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	dd41      	ble.n	800475e <__ssvfiscanf_r+0x26a>
 80046da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80046dc:	0659      	lsls	r1, r3, #25
 80046de:	d404      	bmi.n	80046ea <__ssvfiscanf_r+0x1f6>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	5cba      	ldrb	r2, [r7, r2]
 80046e6:	0712      	lsls	r2, r2, #28
 80046e8:	d440      	bmi.n	800476c <__ssvfiscanf_r+0x278>
 80046ea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	dc4f      	bgt.n	8004790 <__ssvfiscanf_r+0x29c>
 80046f0:	466b      	mov	r3, sp
 80046f2:	4622      	mov	r2, r4
 80046f4:	a941      	add	r1, sp, #260	; 0x104
 80046f6:	4630      	mov	r0, r6
 80046f8:	f000 fa08 	bl	8004b0c <_scanf_chars>
 80046fc:	2801      	cmp	r0, #1
 80046fe:	d065      	beq.n	80047cc <__ssvfiscanf_r+0x2d8>
 8004700:	2802      	cmp	r0, #2
 8004702:	f47f af21 	bne.w	8004548 <__ssvfiscanf_r+0x54>
 8004706:	e7cf      	b.n	80046a8 <__ssvfiscanf_r+0x1b4>
 8004708:	220a      	movs	r2, #10
 800470a:	e7dd      	b.n	80046c8 <__ssvfiscanf_r+0x1d4>
 800470c:	2300      	movs	r3, #0
 800470e:	9342      	str	r3, [sp, #264]	; 0x108
 8004710:	2303      	movs	r3, #3
 8004712:	e7de      	b.n	80046d2 <__ssvfiscanf_r+0x1de>
 8004714:	2308      	movs	r3, #8
 8004716:	9342      	str	r3, [sp, #264]	; 0x108
 8004718:	2304      	movs	r3, #4
 800471a:	e7da      	b.n	80046d2 <__ssvfiscanf_r+0x1de>
 800471c:	4629      	mov	r1, r5
 800471e:	4640      	mov	r0, r8
 8004720:	f000 fb40 	bl	8004da4 <__sccl>
 8004724:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472a:	9341      	str	r3, [sp, #260]	; 0x104
 800472c:	4605      	mov	r5, r0
 800472e:	2301      	movs	r3, #1
 8004730:	e7cf      	b.n	80046d2 <__ssvfiscanf_r+0x1de>
 8004732:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004738:	9341      	str	r3, [sp, #260]	; 0x104
 800473a:	2300      	movs	r3, #0
 800473c:	e7c9      	b.n	80046d2 <__ssvfiscanf_r+0x1de>
 800473e:	2302      	movs	r3, #2
 8004740:	e7c7      	b.n	80046d2 <__ssvfiscanf_r+0x1de>
 8004742:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004744:	06c3      	lsls	r3, r0, #27
 8004746:	f53f aeff 	bmi.w	8004548 <__ssvfiscanf_r+0x54>
 800474a:	9b00      	ldr	r3, [sp, #0]
 800474c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800474e:	1d19      	adds	r1, r3, #4
 8004750:	9100      	str	r1, [sp, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	07c0      	lsls	r0, r0, #31
 8004756:	bf4c      	ite	mi
 8004758:	801a      	strhmi	r2, [r3, #0]
 800475a:	601a      	strpl	r2, [r3, #0]
 800475c:	e6f4      	b.n	8004548 <__ssvfiscanf_r+0x54>
 800475e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004760:	4621      	mov	r1, r4
 8004762:	4630      	mov	r0, r6
 8004764:	4798      	blx	r3
 8004766:	2800      	cmp	r0, #0
 8004768:	d0b7      	beq.n	80046da <__ssvfiscanf_r+0x1e6>
 800476a:	e79d      	b.n	80046a8 <__ssvfiscanf_r+0x1b4>
 800476c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800476e:	3201      	adds	r2, #1
 8004770:	9245      	str	r2, [sp, #276]	; 0x114
 8004772:	6862      	ldr	r2, [r4, #4]
 8004774:	3a01      	subs	r2, #1
 8004776:	2a00      	cmp	r2, #0
 8004778:	6062      	str	r2, [r4, #4]
 800477a:	dd02      	ble.n	8004782 <__ssvfiscanf_r+0x28e>
 800477c:	3301      	adds	r3, #1
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	e7ae      	b.n	80046e0 <__ssvfiscanf_r+0x1ec>
 8004782:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004784:	4621      	mov	r1, r4
 8004786:	4630      	mov	r0, r6
 8004788:	4798      	blx	r3
 800478a:	2800      	cmp	r0, #0
 800478c:	d0a8      	beq.n	80046e0 <__ssvfiscanf_r+0x1ec>
 800478e:	e78b      	b.n	80046a8 <__ssvfiscanf_r+0x1b4>
 8004790:	2b04      	cmp	r3, #4
 8004792:	dc06      	bgt.n	80047a2 <__ssvfiscanf_r+0x2ae>
 8004794:	466b      	mov	r3, sp
 8004796:	4622      	mov	r2, r4
 8004798:	a941      	add	r1, sp, #260	; 0x104
 800479a:	4630      	mov	r0, r6
 800479c:	f000 fa0e 	bl	8004bbc <_scanf_i>
 80047a0:	e7ac      	b.n	80046fc <__ssvfiscanf_r+0x208>
 80047a2:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <__ssvfiscanf_r+0x2ec>)
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f43f aecf 	beq.w	8004548 <__ssvfiscanf_r+0x54>
 80047aa:	466b      	mov	r3, sp
 80047ac:	4622      	mov	r2, r4
 80047ae:	a941      	add	r1, sp, #260	; 0x104
 80047b0:	4630      	mov	r0, r6
 80047b2:	f3af 8000 	nop.w
 80047b6:	e7a1      	b.n	80046fc <__ssvfiscanf_r+0x208>
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 80047be:	bf18      	it	ne
 80047c0:	f04f 30ff 	movne.w	r0, #4294967295
 80047c4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80047c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80047ce:	e7f9      	b.n	80047c4 <__ssvfiscanf_r+0x2d0>
 80047d0:	08004441 	.word	0x08004441
 80047d4:	080044bb 	.word	0x080044bb
 80047d8:	0800545f 	.word	0x0800545f
 80047dc:	08005416 	.word	0x08005416
 80047e0:	00000000 	.word	0x00000000

080047e4 <_printf_common>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	4616      	mov	r6, r2
 80047ea:	4699      	mov	r9, r3
 80047ec:	688a      	ldr	r2, [r1, #8]
 80047ee:	690b      	ldr	r3, [r1, #16]
 80047f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047f4:	4293      	cmp	r3, r2
 80047f6:	bfb8      	it	lt
 80047f8:	4613      	movlt	r3, r2
 80047fa:	6033      	str	r3, [r6, #0]
 80047fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004800:	4607      	mov	r7, r0
 8004802:	460c      	mov	r4, r1
 8004804:	b10a      	cbz	r2, 800480a <_printf_common+0x26>
 8004806:	3301      	adds	r3, #1
 8004808:	6033      	str	r3, [r6, #0]
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	0699      	lsls	r1, r3, #26
 800480e:	bf42      	ittt	mi
 8004810:	6833      	ldrmi	r3, [r6, #0]
 8004812:	3302      	addmi	r3, #2
 8004814:	6033      	strmi	r3, [r6, #0]
 8004816:	6825      	ldr	r5, [r4, #0]
 8004818:	f015 0506 	ands.w	r5, r5, #6
 800481c:	d106      	bne.n	800482c <_printf_common+0x48>
 800481e:	f104 0a19 	add.w	sl, r4, #25
 8004822:	68e3      	ldr	r3, [r4, #12]
 8004824:	6832      	ldr	r2, [r6, #0]
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	42ab      	cmp	r3, r5
 800482a:	dc26      	bgt.n	800487a <_printf_common+0x96>
 800482c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004830:	1e13      	subs	r3, r2, #0
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	bf18      	it	ne
 8004836:	2301      	movne	r3, #1
 8004838:	0692      	lsls	r2, r2, #26
 800483a:	d42b      	bmi.n	8004894 <_printf_common+0xb0>
 800483c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004840:	4649      	mov	r1, r9
 8004842:	4638      	mov	r0, r7
 8004844:	47c0      	blx	r8
 8004846:	3001      	adds	r0, #1
 8004848:	d01e      	beq.n	8004888 <_printf_common+0xa4>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	68e5      	ldr	r5, [r4, #12]
 800484e:	6832      	ldr	r2, [r6, #0]
 8004850:	f003 0306 	and.w	r3, r3, #6
 8004854:	2b04      	cmp	r3, #4
 8004856:	bf08      	it	eq
 8004858:	1aad      	subeq	r5, r5, r2
 800485a:	68a3      	ldr	r3, [r4, #8]
 800485c:	6922      	ldr	r2, [r4, #16]
 800485e:	bf0c      	ite	eq
 8004860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004864:	2500      	movne	r5, #0
 8004866:	4293      	cmp	r3, r2
 8004868:	bfc4      	itt	gt
 800486a:	1a9b      	subgt	r3, r3, r2
 800486c:	18ed      	addgt	r5, r5, r3
 800486e:	2600      	movs	r6, #0
 8004870:	341a      	adds	r4, #26
 8004872:	42b5      	cmp	r5, r6
 8004874:	d11a      	bne.n	80048ac <_printf_common+0xc8>
 8004876:	2000      	movs	r0, #0
 8004878:	e008      	b.n	800488c <_printf_common+0xa8>
 800487a:	2301      	movs	r3, #1
 800487c:	4652      	mov	r2, sl
 800487e:	4649      	mov	r1, r9
 8004880:	4638      	mov	r0, r7
 8004882:	47c0      	blx	r8
 8004884:	3001      	adds	r0, #1
 8004886:	d103      	bne.n	8004890 <_printf_common+0xac>
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004890:	3501      	adds	r5, #1
 8004892:	e7c6      	b.n	8004822 <_printf_common+0x3e>
 8004894:	18e1      	adds	r1, r4, r3
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	2030      	movs	r0, #48	; 0x30
 800489a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800489e:	4422      	add	r2, r4
 80048a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048a8:	3302      	adds	r3, #2
 80048aa:	e7c7      	b.n	800483c <_printf_common+0x58>
 80048ac:	2301      	movs	r3, #1
 80048ae:	4622      	mov	r2, r4
 80048b0:	4649      	mov	r1, r9
 80048b2:	4638      	mov	r0, r7
 80048b4:	47c0      	blx	r8
 80048b6:	3001      	adds	r0, #1
 80048b8:	d0e6      	beq.n	8004888 <_printf_common+0xa4>
 80048ba:	3601      	adds	r6, #1
 80048bc:	e7d9      	b.n	8004872 <_printf_common+0x8e>
	...

080048c0 <_printf_i>:
 80048c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048c4:	460c      	mov	r4, r1
 80048c6:	4691      	mov	r9, r2
 80048c8:	7e27      	ldrb	r7, [r4, #24]
 80048ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048cc:	2f78      	cmp	r7, #120	; 0x78
 80048ce:	4680      	mov	r8, r0
 80048d0:	469a      	mov	sl, r3
 80048d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048d6:	d807      	bhi.n	80048e8 <_printf_i+0x28>
 80048d8:	2f62      	cmp	r7, #98	; 0x62
 80048da:	d80a      	bhi.n	80048f2 <_printf_i+0x32>
 80048dc:	2f00      	cmp	r7, #0
 80048de:	f000 80d8 	beq.w	8004a92 <_printf_i+0x1d2>
 80048e2:	2f58      	cmp	r7, #88	; 0x58
 80048e4:	f000 80a3 	beq.w	8004a2e <_printf_i+0x16e>
 80048e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048f0:	e03a      	b.n	8004968 <_printf_i+0xa8>
 80048f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048f6:	2b15      	cmp	r3, #21
 80048f8:	d8f6      	bhi.n	80048e8 <_printf_i+0x28>
 80048fa:	a001      	add	r0, pc, #4	; (adr r0, 8004900 <_printf_i+0x40>)
 80048fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004900:	08004959 	.word	0x08004959
 8004904:	0800496d 	.word	0x0800496d
 8004908:	080048e9 	.word	0x080048e9
 800490c:	080048e9 	.word	0x080048e9
 8004910:	080048e9 	.word	0x080048e9
 8004914:	080048e9 	.word	0x080048e9
 8004918:	0800496d 	.word	0x0800496d
 800491c:	080048e9 	.word	0x080048e9
 8004920:	080048e9 	.word	0x080048e9
 8004924:	080048e9 	.word	0x080048e9
 8004928:	080048e9 	.word	0x080048e9
 800492c:	08004a79 	.word	0x08004a79
 8004930:	0800499d 	.word	0x0800499d
 8004934:	08004a5b 	.word	0x08004a5b
 8004938:	080048e9 	.word	0x080048e9
 800493c:	080048e9 	.word	0x080048e9
 8004940:	08004a9b 	.word	0x08004a9b
 8004944:	080048e9 	.word	0x080048e9
 8004948:	0800499d 	.word	0x0800499d
 800494c:	080048e9 	.word	0x080048e9
 8004950:	080048e9 	.word	0x080048e9
 8004954:	08004a63 	.word	0x08004a63
 8004958:	680b      	ldr	r3, [r1, #0]
 800495a:	1d1a      	adds	r2, r3, #4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	600a      	str	r2, [r1, #0]
 8004960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004968:	2301      	movs	r3, #1
 800496a:	e0a3      	b.n	8004ab4 <_printf_i+0x1f4>
 800496c:	6825      	ldr	r5, [r4, #0]
 800496e:	6808      	ldr	r0, [r1, #0]
 8004970:	062e      	lsls	r6, r5, #24
 8004972:	f100 0304 	add.w	r3, r0, #4
 8004976:	d50a      	bpl.n	800498e <_printf_i+0xce>
 8004978:	6805      	ldr	r5, [r0, #0]
 800497a:	600b      	str	r3, [r1, #0]
 800497c:	2d00      	cmp	r5, #0
 800497e:	da03      	bge.n	8004988 <_printf_i+0xc8>
 8004980:	232d      	movs	r3, #45	; 0x2d
 8004982:	426d      	negs	r5, r5
 8004984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004988:	485e      	ldr	r0, [pc, #376]	; (8004b04 <_printf_i+0x244>)
 800498a:	230a      	movs	r3, #10
 800498c:	e019      	b.n	80049c2 <_printf_i+0x102>
 800498e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004992:	6805      	ldr	r5, [r0, #0]
 8004994:	600b      	str	r3, [r1, #0]
 8004996:	bf18      	it	ne
 8004998:	b22d      	sxthne	r5, r5
 800499a:	e7ef      	b.n	800497c <_printf_i+0xbc>
 800499c:	680b      	ldr	r3, [r1, #0]
 800499e:	6825      	ldr	r5, [r4, #0]
 80049a0:	1d18      	adds	r0, r3, #4
 80049a2:	6008      	str	r0, [r1, #0]
 80049a4:	0628      	lsls	r0, r5, #24
 80049a6:	d501      	bpl.n	80049ac <_printf_i+0xec>
 80049a8:	681d      	ldr	r5, [r3, #0]
 80049aa:	e002      	b.n	80049b2 <_printf_i+0xf2>
 80049ac:	0669      	lsls	r1, r5, #25
 80049ae:	d5fb      	bpl.n	80049a8 <_printf_i+0xe8>
 80049b0:	881d      	ldrh	r5, [r3, #0]
 80049b2:	4854      	ldr	r0, [pc, #336]	; (8004b04 <_printf_i+0x244>)
 80049b4:	2f6f      	cmp	r7, #111	; 0x6f
 80049b6:	bf0c      	ite	eq
 80049b8:	2308      	moveq	r3, #8
 80049ba:	230a      	movne	r3, #10
 80049bc:	2100      	movs	r1, #0
 80049be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049c2:	6866      	ldr	r6, [r4, #4]
 80049c4:	60a6      	str	r6, [r4, #8]
 80049c6:	2e00      	cmp	r6, #0
 80049c8:	bfa2      	ittt	ge
 80049ca:	6821      	ldrge	r1, [r4, #0]
 80049cc:	f021 0104 	bicge.w	r1, r1, #4
 80049d0:	6021      	strge	r1, [r4, #0]
 80049d2:	b90d      	cbnz	r5, 80049d8 <_printf_i+0x118>
 80049d4:	2e00      	cmp	r6, #0
 80049d6:	d04d      	beq.n	8004a74 <_printf_i+0x1b4>
 80049d8:	4616      	mov	r6, r2
 80049da:	fbb5 f1f3 	udiv	r1, r5, r3
 80049de:	fb03 5711 	mls	r7, r3, r1, r5
 80049e2:	5dc7      	ldrb	r7, [r0, r7]
 80049e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049e8:	462f      	mov	r7, r5
 80049ea:	42bb      	cmp	r3, r7
 80049ec:	460d      	mov	r5, r1
 80049ee:	d9f4      	bls.n	80049da <_printf_i+0x11a>
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d10b      	bne.n	8004a0c <_printf_i+0x14c>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	07df      	lsls	r7, r3, #31
 80049f8:	d508      	bpl.n	8004a0c <_printf_i+0x14c>
 80049fa:	6923      	ldr	r3, [r4, #16]
 80049fc:	6861      	ldr	r1, [r4, #4]
 80049fe:	4299      	cmp	r1, r3
 8004a00:	bfde      	ittt	le
 8004a02:	2330      	movle	r3, #48	; 0x30
 8004a04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a0c:	1b92      	subs	r2, r2, r6
 8004a0e:	6122      	str	r2, [r4, #16]
 8004a10:	f8cd a000 	str.w	sl, [sp]
 8004a14:	464b      	mov	r3, r9
 8004a16:	aa03      	add	r2, sp, #12
 8004a18:	4621      	mov	r1, r4
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	f7ff fee2 	bl	80047e4 <_printf_common>
 8004a20:	3001      	adds	r0, #1
 8004a22:	d14c      	bne.n	8004abe <_printf_i+0x1fe>
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	b004      	add	sp, #16
 8004a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a2e:	4835      	ldr	r0, [pc, #212]	; (8004b04 <_printf_i+0x244>)
 8004a30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	680e      	ldr	r6, [r1, #0]
 8004a38:	061f      	lsls	r7, r3, #24
 8004a3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a3e:	600e      	str	r6, [r1, #0]
 8004a40:	d514      	bpl.n	8004a6c <_printf_i+0x1ac>
 8004a42:	07d9      	lsls	r1, r3, #31
 8004a44:	bf44      	itt	mi
 8004a46:	f043 0320 	orrmi.w	r3, r3, #32
 8004a4a:	6023      	strmi	r3, [r4, #0]
 8004a4c:	b91d      	cbnz	r5, 8004a56 <_printf_i+0x196>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	f023 0320 	bic.w	r3, r3, #32
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	2310      	movs	r3, #16
 8004a58:	e7b0      	b.n	80049bc <_printf_i+0xfc>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	f043 0320 	orr.w	r3, r3, #32
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	2378      	movs	r3, #120	; 0x78
 8004a64:	4828      	ldr	r0, [pc, #160]	; (8004b08 <_printf_i+0x248>)
 8004a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a6a:	e7e3      	b.n	8004a34 <_printf_i+0x174>
 8004a6c:	065e      	lsls	r6, r3, #25
 8004a6e:	bf48      	it	mi
 8004a70:	b2ad      	uxthmi	r5, r5
 8004a72:	e7e6      	b.n	8004a42 <_printf_i+0x182>
 8004a74:	4616      	mov	r6, r2
 8004a76:	e7bb      	b.n	80049f0 <_printf_i+0x130>
 8004a78:	680b      	ldr	r3, [r1, #0]
 8004a7a:	6826      	ldr	r6, [r4, #0]
 8004a7c:	6960      	ldr	r0, [r4, #20]
 8004a7e:	1d1d      	adds	r5, r3, #4
 8004a80:	600d      	str	r5, [r1, #0]
 8004a82:	0635      	lsls	r5, r6, #24
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	d501      	bpl.n	8004a8c <_printf_i+0x1cc>
 8004a88:	6018      	str	r0, [r3, #0]
 8004a8a:	e002      	b.n	8004a92 <_printf_i+0x1d2>
 8004a8c:	0671      	lsls	r1, r6, #25
 8004a8e:	d5fb      	bpl.n	8004a88 <_printf_i+0x1c8>
 8004a90:	8018      	strh	r0, [r3, #0]
 8004a92:	2300      	movs	r3, #0
 8004a94:	6123      	str	r3, [r4, #16]
 8004a96:	4616      	mov	r6, r2
 8004a98:	e7ba      	b.n	8004a10 <_printf_i+0x150>
 8004a9a:	680b      	ldr	r3, [r1, #0]
 8004a9c:	1d1a      	adds	r2, r3, #4
 8004a9e:	600a      	str	r2, [r1, #0]
 8004aa0:	681e      	ldr	r6, [r3, #0]
 8004aa2:	6862      	ldr	r2, [r4, #4]
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f7fb fbba 	bl	8000220 <memchr>
 8004aac:	b108      	cbz	r0, 8004ab2 <_printf_i+0x1f2>
 8004aae:	1b80      	subs	r0, r0, r6
 8004ab0:	6060      	str	r0, [r4, #4]
 8004ab2:	6863      	ldr	r3, [r4, #4]
 8004ab4:	6123      	str	r3, [r4, #16]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004abc:	e7a8      	b.n	8004a10 <_printf_i+0x150>
 8004abe:	6923      	ldr	r3, [r4, #16]
 8004ac0:	4632      	mov	r2, r6
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	4640      	mov	r0, r8
 8004ac6:	47d0      	blx	sl
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d0ab      	beq.n	8004a24 <_printf_i+0x164>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	079b      	lsls	r3, r3, #30
 8004ad0:	d413      	bmi.n	8004afa <_printf_i+0x23a>
 8004ad2:	68e0      	ldr	r0, [r4, #12]
 8004ad4:	9b03      	ldr	r3, [sp, #12]
 8004ad6:	4298      	cmp	r0, r3
 8004ad8:	bfb8      	it	lt
 8004ada:	4618      	movlt	r0, r3
 8004adc:	e7a4      	b.n	8004a28 <_printf_i+0x168>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	47d0      	blx	sl
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d09b      	beq.n	8004a24 <_printf_i+0x164>
 8004aec:	3501      	adds	r5, #1
 8004aee:	68e3      	ldr	r3, [r4, #12]
 8004af0:	9903      	ldr	r1, [sp, #12]
 8004af2:	1a5b      	subs	r3, r3, r1
 8004af4:	42ab      	cmp	r3, r5
 8004af6:	dcf2      	bgt.n	8004ade <_printf_i+0x21e>
 8004af8:	e7eb      	b.n	8004ad2 <_printf_i+0x212>
 8004afa:	2500      	movs	r5, #0
 8004afc:	f104 0619 	add.w	r6, r4, #25
 8004b00:	e7f5      	b.n	8004aee <_printf_i+0x22e>
 8004b02:	bf00      	nop
 8004b04:	08005421 	.word	0x08005421
 8004b08:	08005432 	.word	0x08005432

08004b0c <_scanf_chars>:
 8004b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b10:	4615      	mov	r5, r2
 8004b12:	688a      	ldr	r2, [r1, #8]
 8004b14:	4680      	mov	r8, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	b932      	cbnz	r2, 8004b28 <_scanf_chars+0x1c>
 8004b1a:	698a      	ldr	r2, [r1, #24]
 8004b1c:	2a00      	cmp	r2, #0
 8004b1e:	bf0c      	ite	eq
 8004b20:	2201      	moveq	r2, #1
 8004b22:	f04f 32ff 	movne.w	r2, #4294967295
 8004b26:	608a      	str	r2, [r1, #8]
 8004b28:	6822      	ldr	r2, [r4, #0]
 8004b2a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004bb8 <_scanf_chars+0xac>
 8004b2e:	06d1      	lsls	r1, r2, #27
 8004b30:	bf5f      	itttt	pl
 8004b32:	681a      	ldrpl	r2, [r3, #0]
 8004b34:	1d11      	addpl	r1, r2, #4
 8004b36:	6019      	strpl	r1, [r3, #0]
 8004b38:	6816      	ldrpl	r6, [r2, #0]
 8004b3a:	2700      	movs	r7, #0
 8004b3c:	69a0      	ldr	r0, [r4, #24]
 8004b3e:	b188      	cbz	r0, 8004b64 <_scanf_chars+0x58>
 8004b40:	2801      	cmp	r0, #1
 8004b42:	d107      	bne.n	8004b54 <_scanf_chars+0x48>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	781a      	ldrb	r2, [r3, #0]
 8004b48:	6963      	ldr	r3, [r4, #20]
 8004b4a:	5c9b      	ldrb	r3, [r3, r2]
 8004b4c:	b953      	cbnz	r3, 8004b64 <_scanf_chars+0x58>
 8004b4e:	bb27      	cbnz	r7, 8004b9a <_scanf_chars+0x8e>
 8004b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b54:	2802      	cmp	r0, #2
 8004b56:	d120      	bne.n	8004b9a <_scanf_chars+0x8e>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004b60:	071b      	lsls	r3, r3, #28
 8004b62:	d41a      	bmi.n	8004b9a <_scanf_chars+0x8e>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	06da      	lsls	r2, r3, #27
 8004b68:	bf5e      	ittt	pl
 8004b6a:	682b      	ldrpl	r3, [r5, #0]
 8004b6c:	781b      	ldrbpl	r3, [r3, #0]
 8004b6e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004b72:	682a      	ldr	r2, [r5, #0]
 8004b74:	686b      	ldr	r3, [r5, #4]
 8004b76:	3201      	adds	r2, #1
 8004b78:	602a      	str	r2, [r5, #0]
 8004b7a:	68a2      	ldr	r2, [r4, #8]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	3a01      	subs	r2, #1
 8004b80:	606b      	str	r3, [r5, #4]
 8004b82:	3701      	adds	r7, #1
 8004b84:	60a2      	str	r2, [r4, #8]
 8004b86:	b142      	cbz	r2, 8004b9a <_scanf_chars+0x8e>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	dcd7      	bgt.n	8004b3c <_scanf_chars+0x30>
 8004b8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b90:	4629      	mov	r1, r5
 8004b92:	4640      	mov	r0, r8
 8004b94:	4798      	blx	r3
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d0d0      	beq.n	8004b3c <_scanf_chars+0x30>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	f013 0310 	ands.w	r3, r3, #16
 8004ba0:	d105      	bne.n	8004bae <_scanf_chars+0xa2>
 8004ba2:	68e2      	ldr	r2, [r4, #12]
 8004ba4:	3201      	adds	r2, #1
 8004ba6:	60e2      	str	r2, [r4, #12]
 8004ba8:	69a2      	ldr	r2, [r4, #24]
 8004baa:	b102      	cbz	r2, 8004bae <_scanf_chars+0xa2>
 8004bac:	7033      	strb	r3, [r6, #0]
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	441f      	add	r7, r3
 8004bb2:	6127      	str	r7, [r4, #16]
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	e7cb      	b.n	8004b50 <_scanf_chars+0x44>
 8004bb8:	0800545f 	.word	0x0800545f

08004bbc <_scanf_i>:
 8004bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc0:	4698      	mov	r8, r3
 8004bc2:	4b74      	ldr	r3, [pc, #464]	; (8004d94 <_scanf_i+0x1d8>)
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	4682      	mov	sl, r0
 8004bc8:	4616      	mov	r6, r2
 8004bca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	ab03      	add	r3, sp, #12
 8004bd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004bd6:	4b70      	ldr	r3, [pc, #448]	; (8004d98 <_scanf_i+0x1dc>)
 8004bd8:	69a1      	ldr	r1, [r4, #24]
 8004bda:	4a70      	ldr	r2, [pc, #448]	; (8004d9c <_scanf_i+0x1e0>)
 8004bdc:	2903      	cmp	r1, #3
 8004bde:	bf18      	it	ne
 8004be0:	461a      	movne	r2, r3
 8004be2:	68a3      	ldr	r3, [r4, #8]
 8004be4:	9201      	str	r2, [sp, #4]
 8004be6:	1e5a      	subs	r2, r3, #1
 8004be8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004bec:	bf88      	it	hi
 8004bee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004bf2:	4627      	mov	r7, r4
 8004bf4:	bf82      	ittt	hi
 8004bf6:	eb03 0905 	addhi.w	r9, r3, r5
 8004bfa:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004bfe:	60a3      	strhi	r3, [r4, #8]
 8004c00:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004c04:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004c08:	bf98      	it	ls
 8004c0a:	f04f 0900 	movls.w	r9, #0
 8004c0e:	6023      	str	r3, [r4, #0]
 8004c10:	463d      	mov	r5, r7
 8004c12:	f04f 0b00 	mov.w	fp, #0
 8004c16:	6831      	ldr	r1, [r6, #0]
 8004c18:	ab03      	add	r3, sp, #12
 8004c1a:	7809      	ldrb	r1, [r1, #0]
 8004c1c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004c20:	2202      	movs	r2, #2
 8004c22:	f7fb fafd 	bl	8000220 <memchr>
 8004c26:	b328      	cbz	r0, 8004c74 <_scanf_i+0xb8>
 8004c28:	f1bb 0f01 	cmp.w	fp, #1
 8004c2c:	d159      	bne.n	8004ce2 <_scanf_i+0x126>
 8004c2e:	6862      	ldr	r2, [r4, #4]
 8004c30:	b92a      	cbnz	r2, 8004c3e <_scanf_i+0x82>
 8004c32:	6822      	ldr	r2, [r4, #0]
 8004c34:	2308      	movs	r3, #8
 8004c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3a:	6063      	str	r3, [r4, #4]
 8004c3c:	6022      	str	r2, [r4, #0]
 8004c3e:	6822      	ldr	r2, [r4, #0]
 8004c40:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004c44:	6022      	str	r2, [r4, #0]
 8004c46:	68a2      	ldr	r2, [r4, #8]
 8004c48:	1e51      	subs	r1, r2, #1
 8004c4a:	60a1      	str	r1, [r4, #8]
 8004c4c:	b192      	cbz	r2, 8004c74 <_scanf_i+0xb8>
 8004c4e:	6832      	ldr	r2, [r6, #0]
 8004c50:	1c51      	adds	r1, r2, #1
 8004c52:	6031      	str	r1, [r6, #0]
 8004c54:	7812      	ldrb	r2, [r2, #0]
 8004c56:	f805 2b01 	strb.w	r2, [r5], #1
 8004c5a:	6872      	ldr	r2, [r6, #4]
 8004c5c:	3a01      	subs	r2, #1
 8004c5e:	2a00      	cmp	r2, #0
 8004c60:	6072      	str	r2, [r6, #4]
 8004c62:	dc07      	bgt.n	8004c74 <_scanf_i+0xb8>
 8004c64:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004c68:	4631      	mov	r1, r6
 8004c6a:	4650      	mov	r0, sl
 8004c6c:	4790      	blx	r2
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	f040 8085 	bne.w	8004d7e <_scanf_i+0x1c2>
 8004c74:	f10b 0b01 	add.w	fp, fp, #1
 8004c78:	f1bb 0f03 	cmp.w	fp, #3
 8004c7c:	d1cb      	bne.n	8004c16 <_scanf_i+0x5a>
 8004c7e:	6863      	ldr	r3, [r4, #4]
 8004c80:	b90b      	cbnz	r3, 8004c86 <_scanf_i+0xca>
 8004c82:	230a      	movs	r3, #10
 8004c84:	6063      	str	r3, [r4, #4]
 8004c86:	6863      	ldr	r3, [r4, #4]
 8004c88:	4945      	ldr	r1, [pc, #276]	; (8004da0 <_scanf_i+0x1e4>)
 8004c8a:	6960      	ldr	r0, [r4, #20]
 8004c8c:	1ac9      	subs	r1, r1, r3
 8004c8e:	f000 f889 	bl	8004da4 <__sccl>
 8004c92:	f04f 0b00 	mov.w	fp, #0
 8004c96:	68a3      	ldr	r3, [r4, #8]
 8004c98:	6822      	ldr	r2, [r4, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d03d      	beq.n	8004d1a <_scanf_i+0x15e>
 8004c9e:	6831      	ldr	r1, [r6, #0]
 8004ca0:	6960      	ldr	r0, [r4, #20]
 8004ca2:	f891 c000 	ldrb.w	ip, [r1]
 8004ca6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d035      	beq.n	8004d1a <_scanf_i+0x15e>
 8004cae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004cb2:	d124      	bne.n	8004cfe <_scanf_i+0x142>
 8004cb4:	0510      	lsls	r0, r2, #20
 8004cb6:	d522      	bpl.n	8004cfe <_scanf_i+0x142>
 8004cb8:	f10b 0b01 	add.w	fp, fp, #1
 8004cbc:	f1b9 0f00 	cmp.w	r9, #0
 8004cc0:	d003      	beq.n	8004cca <_scanf_i+0x10e>
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	f109 39ff 	add.w	r9, r9, #4294967295
 8004cc8:	60a3      	str	r3, [r4, #8]
 8004cca:	6873      	ldr	r3, [r6, #4]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	6073      	str	r3, [r6, #4]
 8004cd2:	dd1b      	ble.n	8004d0c <_scanf_i+0x150>
 8004cd4:	6833      	ldr	r3, [r6, #0]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	6033      	str	r3, [r6, #0]
 8004cda:	68a3      	ldr	r3, [r4, #8]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	60a3      	str	r3, [r4, #8]
 8004ce0:	e7d9      	b.n	8004c96 <_scanf_i+0xda>
 8004ce2:	f1bb 0f02 	cmp.w	fp, #2
 8004ce6:	d1ae      	bne.n	8004c46 <_scanf_i+0x8a>
 8004ce8:	6822      	ldr	r2, [r4, #0]
 8004cea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004cee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004cf2:	d1bf      	bne.n	8004c74 <_scanf_i+0xb8>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	6063      	str	r3, [r4, #4]
 8004cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cfc:	e7a2      	b.n	8004c44 <_scanf_i+0x88>
 8004cfe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004d02:	6022      	str	r2, [r4, #0]
 8004d04:	780b      	ldrb	r3, [r1, #0]
 8004d06:	f805 3b01 	strb.w	r3, [r5], #1
 8004d0a:	e7de      	b.n	8004cca <_scanf_i+0x10e>
 8004d0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004d10:	4631      	mov	r1, r6
 8004d12:	4650      	mov	r0, sl
 8004d14:	4798      	blx	r3
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d0df      	beq.n	8004cda <_scanf_i+0x11e>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	05d9      	lsls	r1, r3, #23
 8004d1e:	d50d      	bpl.n	8004d3c <_scanf_i+0x180>
 8004d20:	42bd      	cmp	r5, r7
 8004d22:	d909      	bls.n	8004d38 <_scanf_i+0x17c>
 8004d24:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004d28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	4650      	mov	r0, sl
 8004d30:	4798      	blx	r3
 8004d32:	f105 39ff 	add.w	r9, r5, #4294967295
 8004d36:	464d      	mov	r5, r9
 8004d38:	42bd      	cmp	r5, r7
 8004d3a:	d028      	beq.n	8004d8e <_scanf_i+0x1d2>
 8004d3c:	6822      	ldr	r2, [r4, #0]
 8004d3e:	f012 0210 	ands.w	r2, r2, #16
 8004d42:	d113      	bne.n	8004d6c <_scanf_i+0x1b0>
 8004d44:	702a      	strb	r2, [r5, #0]
 8004d46:	6863      	ldr	r3, [r4, #4]
 8004d48:	9e01      	ldr	r6, [sp, #4]
 8004d4a:	4639      	mov	r1, r7
 8004d4c:	4650      	mov	r0, sl
 8004d4e:	47b0      	blx	r6
 8004d50:	f8d8 3000 	ldr.w	r3, [r8]
 8004d54:	6821      	ldr	r1, [r4, #0]
 8004d56:	1d1a      	adds	r2, r3, #4
 8004d58:	f8c8 2000 	str.w	r2, [r8]
 8004d5c:	f011 0f20 	tst.w	r1, #32
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	d00f      	beq.n	8004d84 <_scanf_i+0x1c8>
 8004d64:	6018      	str	r0, [r3, #0]
 8004d66:	68e3      	ldr	r3, [r4, #12]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	60e3      	str	r3, [r4, #12]
 8004d6c:	1bed      	subs	r5, r5, r7
 8004d6e:	44ab      	add	fp, r5
 8004d70:	6925      	ldr	r5, [r4, #16]
 8004d72:	445d      	add	r5, fp
 8004d74:	6125      	str	r5, [r4, #16]
 8004d76:	2000      	movs	r0, #0
 8004d78:	b007      	add	sp, #28
 8004d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7e:	f04f 0b00 	mov.w	fp, #0
 8004d82:	e7ca      	b.n	8004d1a <_scanf_i+0x15e>
 8004d84:	07ca      	lsls	r2, r1, #31
 8004d86:	bf4c      	ite	mi
 8004d88:	8018      	strhmi	r0, [r3, #0]
 8004d8a:	6018      	strpl	r0, [r3, #0]
 8004d8c:	e7eb      	b.n	8004d66 <_scanf_i+0x1aa>
 8004d8e:	2001      	movs	r0, #1
 8004d90:	e7f2      	b.n	8004d78 <_scanf_i+0x1bc>
 8004d92:	bf00      	nop
 8004d94:	080053ec 	.word	0x080053ec
 8004d98:	0800501d 	.word	0x0800501d
 8004d9c:	08004f21 	.word	0x08004f21
 8004da0:	0800545c 	.word	0x0800545c

08004da4 <__sccl>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	780b      	ldrb	r3, [r1, #0]
 8004da8:	4604      	mov	r4, r0
 8004daa:	2b5e      	cmp	r3, #94	; 0x5e
 8004dac:	bf0b      	itete	eq
 8004dae:	784b      	ldrbeq	r3, [r1, #1]
 8004db0:	1c48      	addne	r0, r1, #1
 8004db2:	1c88      	addeq	r0, r1, #2
 8004db4:	2200      	movne	r2, #0
 8004db6:	bf08      	it	eq
 8004db8:	2201      	moveq	r2, #1
 8004dba:	1e61      	subs	r1, r4, #1
 8004dbc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004dc0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004dc4:	42a9      	cmp	r1, r5
 8004dc6:	d1fb      	bne.n	8004dc0 <__sccl+0x1c>
 8004dc8:	b90b      	cbnz	r3, 8004dce <__sccl+0x2a>
 8004dca:	3801      	subs	r0, #1
 8004dcc:	bd70      	pop	{r4, r5, r6, pc}
 8004dce:	f082 0101 	eor.w	r1, r2, #1
 8004dd2:	54e1      	strb	r1, [r4, r3]
 8004dd4:	1c42      	adds	r2, r0, #1
 8004dd6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8004dda:	2d2d      	cmp	r5, #45	; 0x2d
 8004ddc:	f102 36ff 	add.w	r6, r2, #4294967295
 8004de0:	4610      	mov	r0, r2
 8004de2:	d006      	beq.n	8004df2 <__sccl+0x4e>
 8004de4:	2d5d      	cmp	r5, #93	; 0x5d
 8004de6:	d0f1      	beq.n	8004dcc <__sccl+0x28>
 8004de8:	b90d      	cbnz	r5, 8004dee <__sccl+0x4a>
 8004dea:	4630      	mov	r0, r6
 8004dec:	e7ee      	b.n	8004dcc <__sccl+0x28>
 8004dee:	462b      	mov	r3, r5
 8004df0:	e7ef      	b.n	8004dd2 <__sccl+0x2e>
 8004df2:	7816      	ldrb	r6, [r2, #0]
 8004df4:	2e5d      	cmp	r6, #93	; 0x5d
 8004df6:	d0fa      	beq.n	8004dee <__sccl+0x4a>
 8004df8:	42b3      	cmp	r3, r6
 8004dfa:	dcf8      	bgt.n	8004dee <__sccl+0x4a>
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3001      	adds	r0, #1
 8004e00:	4286      	cmp	r6, r0
 8004e02:	5421      	strb	r1, [r4, r0]
 8004e04:	dcfb      	bgt.n	8004dfe <__sccl+0x5a>
 8004e06:	43d8      	mvns	r0, r3
 8004e08:	4430      	add	r0, r6
 8004e0a:	1c5d      	adds	r5, r3, #1
 8004e0c:	42b3      	cmp	r3, r6
 8004e0e:	bfa8      	it	ge
 8004e10:	2000      	movge	r0, #0
 8004e12:	182b      	adds	r3, r5, r0
 8004e14:	3202      	adds	r2, #2
 8004e16:	e7de      	b.n	8004dd6 <__sccl+0x32>

08004e18 <_strtol_l.isra.0>:
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1e:	d001      	beq.n	8004e24 <_strtol_l.isra.0+0xc>
 8004e20:	2b24      	cmp	r3, #36	; 0x24
 8004e22:	d906      	bls.n	8004e32 <_strtol_l.isra.0+0x1a>
 8004e24:	f7ff f930 	bl	8004088 <__errno>
 8004e28:	2316      	movs	r3, #22
 8004e2a:	6003      	str	r3, [r0, #0]
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e32:	4f3a      	ldr	r7, [pc, #232]	; (8004f1c <_strtol_l.isra.0+0x104>)
 8004e34:	468e      	mov	lr, r1
 8004e36:	4676      	mov	r6, lr
 8004e38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004e3c:	5de5      	ldrb	r5, [r4, r7]
 8004e3e:	f015 0508 	ands.w	r5, r5, #8
 8004e42:	d1f8      	bne.n	8004e36 <_strtol_l.isra.0+0x1e>
 8004e44:	2c2d      	cmp	r4, #45	; 0x2d
 8004e46:	d134      	bne.n	8004eb2 <_strtol_l.isra.0+0x9a>
 8004e48:	f89e 4000 	ldrb.w	r4, [lr]
 8004e4c:	f04f 0801 	mov.w	r8, #1
 8004e50:	f106 0e02 	add.w	lr, r6, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d05c      	beq.n	8004f12 <_strtol_l.isra.0+0xfa>
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d10c      	bne.n	8004e76 <_strtol_l.isra.0+0x5e>
 8004e5c:	2c30      	cmp	r4, #48	; 0x30
 8004e5e:	d10a      	bne.n	8004e76 <_strtol_l.isra.0+0x5e>
 8004e60:	f89e 4000 	ldrb.w	r4, [lr]
 8004e64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004e68:	2c58      	cmp	r4, #88	; 0x58
 8004e6a:	d14d      	bne.n	8004f08 <_strtol_l.isra.0+0xf0>
 8004e6c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004e70:	2310      	movs	r3, #16
 8004e72:	f10e 0e02 	add.w	lr, lr, #2
 8004e76:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004e7a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004e7e:	2600      	movs	r6, #0
 8004e80:	fbbc f9f3 	udiv	r9, ip, r3
 8004e84:	4635      	mov	r5, r6
 8004e86:	fb03 ca19 	mls	sl, r3, r9, ip
 8004e8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004e8e:	2f09      	cmp	r7, #9
 8004e90:	d818      	bhi.n	8004ec4 <_strtol_l.isra.0+0xac>
 8004e92:	463c      	mov	r4, r7
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	dd24      	ble.n	8004ee2 <_strtol_l.isra.0+0xca>
 8004e98:	2e00      	cmp	r6, #0
 8004e9a:	db1f      	blt.n	8004edc <_strtol_l.isra.0+0xc4>
 8004e9c:	45a9      	cmp	r9, r5
 8004e9e:	d31d      	bcc.n	8004edc <_strtol_l.isra.0+0xc4>
 8004ea0:	d101      	bne.n	8004ea6 <_strtol_l.isra.0+0x8e>
 8004ea2:	45a2      	cmp	sl, r4
 8004ea4:	db1a      	blt.n	8004edc <_strtol_l.isra.0+0xc4>
 8004ea6:	fb05 4503 	mla	r5, r5, r3, r4
 8004eaa:	2601      	movs	r6, #1
 8004eac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004eb0:	e7eb      	b.n	8004e8a <_strtol_l.isra.0+0x72>
 8004eb2:	2c2b      	cmp	r4, #43	; 0x2b
 8004eb4:	bf08      	it	eq
 8004eb6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004eba:	46a8      	mov	r8, r5
 8004ebc:	bf08      	it	eq
 8004ebe:	f106 0e02 	addeq.w	lr, r6, #2
 8004ec2:	e7c7      	b.n	8004e54 <_strtol_l.isra.0+0x3c>
 8004ec4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004ec8:	2f19      	cmp	r7, #25
 8004eca:	d801      	bhi.n	8004ed0 <_strtol_l.isra.0+0xb8>
 8004ecc:	3c37      	subs	r4, #55	; 0x37
 8004ece:	e7e1      	b.n	8004e94 <_strtol_l.isra.0+0x7c>
 8004ed0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004ed4:	2f19      	cmp	r7, #25
 8004ed6:	d804      	bhi.n	8004ee2 <_strtol_l.isra.0+0xca>
 8004ed8:	3c57      	subs	r4, #87	; 0x57
 8004eda:	e7db      	b.n	8004e94 <_strtol_l.isra.0+0x7c>
 8004edc:	f04f 36ff 	mov.w	r6, #4294967295
 8004ee0:	e7e4      	b.n	8004eac <_strtol_l.isra.0+0x94>
 8004ee2:	2e00      	cmp	r6, #0
 8004ee4:	da05      	bge.n	8004ef2 <_strtol_l.isra.0+0xda>
 8004ee6:	2322      	movs	r3, #34	; 0x22
 8004ee8:	6003      	str	r3, [r0, #0]
 8004eea:	4665      	mov	r5, ip
 8004eec:	b942      	cbnz	r2, 8004f00 <_strtol_l.isra.0+0xe8>
 8004eee:	4628      	mov	r0, r5
 8004ef0:	e79d      	b.n	8004e2e <_strtol_l.isra.0+0x16>
 8004ef2:	f1b8 0f00 	cmp.w	r8, #0
 8004ef6:	d000      	beq.n	8004efa <_strtol_l.isra.0+0xe2>
 8004ef8:	426d      	negs	r5, r5
 8004efa:	2a00      	cmp	r2, #0
 8004efc:	d0f7      	beq.n	8004eee <_strtol_l.isra.0+0xd6>
 8004efe:	b10e      	cbz	r6, 8004f04 <_strtol_l.isra.0+0xec>
 8004f00:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004f04:	6011      	str	r1, [r2, #0]
 8004f06:	e7f2      	b.n	8004eee <_strtol_l.isra.0+0xd6>
 8004f08:	2430      	movs	r4, #48	; 0x30
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1b3      	bne.n	8004e76 <_strtol_l.isra.0+0x5e>
 8004f0e:	2308      	movs	r3, #8
 8004f10:	e7b1      	b.n	8004e76 <_strtol_l.isra.0+0x5e>
 8004f12:	2c30      	cmp	r4, #48	; 0x30
 8004f14:	d0a4      	beq.n	8004e60 <_strtol_l.isra.0+0x48>
 8004f16:	230a      	movs	r3, #10
 8004f18:	e7ad      	b.n	8004e76 <_strtol_l.isra.0+0x5e>
 8004f1a:	bf00      	nop
 8004f1c:	0800545f 	.word	0x0800545f

08004f20 <_strtol_r>:
 8004f20:	f7ff bf7a 	b.w	8004e18 <_strtol_l.isra.0>

08004f24 <_strtoul_l.isra.0>:
 8004f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f28:	4e3b      	ldr	r6, [pc, #236]	; (8005018 <_strtoul_l.isra.0+0xf4>)
 8004f2a:	4686      	mov	lr, r0
 8004f2c:	468c      	mov	ip, r1
 8004f2e:	4660      	mov	r0, ip
 8004f30:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004f34:	5da5      	ldrb	r5, [r4, r6]
 8004f36:	f015 0508 	ands.w	r5, r5, #8
 8004f3a:	d1f8      	bne.n	8004f2e <_strtoul_l.isra.0+0xa>
 8004f3c:	2c2d      	cmp	r4, #45	; 0x2d
 8004f3e:	d134      	bne.n	8004faa <_strtoul_l.isra.0+0x86>
 8004f40:	f89c 4000 	ldrb.w	r4, [ip]
 8004f44:	f04f 0801 	mov.w	r8, #1
 8004f48:	f100 0c02 	add.w	ip, r0, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d05e      	beq.n	800500e <_strtoul_l.isra.0+0xea>
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d10c      	bne.n	8004f6e <_strtoul_l.isra.0+0x4a>
 8004f54:	2c30      	cmp	r4, #48	; 0x30
 8004f56:	d10a      	bne.n	8004f6e <_strtoul_l.isra.0+0x4a>
 8004f58:	f89c 0000 	ldrb.w	r0, [ip]
 8004f5c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004f60:	2858      	cmp	r0, #88	; 0x58
 8004f62:	d14f      	bne.n	8005004 <_strtoul_l.isra.0+0xe0>
 8004f64:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004f68:	2310      	movs	r3, #16
 8004f6a:	f10c 0c02 	add.w	ip, ip, #2
 8004f6e:	f04f 37ff 	mov.w	r7, #4294967295
 8004f72:	2500      	movs	r5, #0
 8004f74:	fbb7 f7f3 	udiv	r7, r7, r3
 8004f78:	fb03 f907 	mul.w	r9, r3, r7
 8004f7c:	ea6f 0909 	mvn.w	r9, r9
 8004f80:	4628      	mov	r0, r5
 8004f82:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004f86:	2e09      	cmp	r6, #9
 8004f88:	d818      	bhi.n	8004fbc <_strtoul_l.isra.0+0x98>
 8004f8a:	4634      	mov	r4, r6
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	dd24      	ble.n	8004fda <_strtoul_l.isra.0+0xb6>
 8004f90:	2d00      	cmp	r5, #0
 8004f92:	db1f      	blt.n	8004fd4 <_strtoul_l.isra.0+0xb0>
 8004f94:	4287      	cmp	r7, r0
 8004f96:	d31d      	bcc.n	8004fd4 <_strtoul_l.isra.0+0xb0>
 8004f98:	d101      	bne.n	8004f9e <_strtoul_l.isra.0+0x7a>
 8004f9a:	45a1      	cmp	r9, r4
 8004f9c:	db1a      	blt.n	8004fd4 <_strtoul_l.isra.0+0xb0>
 8004f9e:	fb00 4003 	mla	r0, r0, r3, r4
 8004fa2:	2501      	movs	r5, #1
 8004fa4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004fa8:	e7eb      	b.n	8004f82 <_strtoul_l.isra.0+0x5e>
 8004faa:	2c2b      	cmp	r4, #43	; 0x2b
 8004fac:	bf08      	it	eq
 8004fae:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004fb2:	46a8      	mov	r8, r5
 8004fb4:	bf08      	it	eq
 8004fb6:	f100 0c02 	addeq.w	ip, r0, #2
 8004fba:	e7c7      	b.n	8004f4c <_strtoul_l.isra.0+0x28>
 8004fbc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004fc0:	2e19      	cmp	r6, #25
 8004fc2:	d801      	bhi.n	8004fc8 <_strtoul_l.isra.0+0xa4>
 8004fc4:	3c37      	subs	r4, #55	; 0x37
 8004fc6:	e7e1      	b.n	8004f8c <_strtoul_l.isra.0+0x68>
 8004fc8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004fcc:	2e19      	cmp	r6, #25
 8004fce:	d804      	bhi.n	8004fda <_strtoul_l.isra.0+0xb6>
 8004fd0:	3c57      	subs	r4, #87	; 0x57
 8004fd2:	e7db      	b.n	8004f8c <_strtoul_l.isra.0+0x68>
 8004fd4:	f04f 35ff 	mov.w	r5, #4294967295
 8004fd8:	e7e4      	b.n	8004fa4 <_strtoul_l.isra.0+0x80>
 8004fda:	2d00      	cmp	r5, #0
 8004fdc:	da07      	bge.n	8004fee <_strtoul_l.isra.0+0xca>
 8004fde:	2322      	movs	r3, #34	; 0x22
 8004fe0:	f8ce 3000 	str.w	r3, [lr]
 8004fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe8:	b942      	cbnz	r2, 8004ffc <_strtoul_l.isra.0+0xd8>
 8004fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fee:	f1b8 0f00 	cmp.w	r8, #0
 8004ff2:	d000      	beq.n	8004ff6 <_strtoul_l.isra.0+0xd2>
 8004ff4:	4240      	negs	r0, r0
 8004ff6:	2a00      	cmp	r2, #0
 8004ff8:	d0f7      	beq.n	8004fea <_strtoul_l.isra.0+0xc6>
 8004ffa:	b10d      	cbz	r5, 8005000 <_strtoul_l.isra.0+0xdc>
 8004ffc:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005000:	6011      	str	r1, [r2, #0]
 8005002:	e7f2      	b.n	8004fea <_strtoul_l.isra.0+0xc6>
 8005004:	2430      	movs	r4, #48	; 0x30
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1b1      	bne.n	8004f6e <_strtoul_l.isra.0+0x4a>
 800500a:	2308      	movs	r3, #8
 800500c:	e7af      	b.n	8004f6e <_strtoul_l.isra.0+0x4a>
 800500e:	2c30      	cmp	r4, #48	; 0x30
 8005010:	d0a2      	beq.n	8004f58 <_strtoul_l.isra.0+0x34>
 8005012:	230a      	movs	r3, #10
 8005014:	e7ab      	b.n	8004f6e <_strtoul_l.isra.0+0x4a>
 8005016:	bf00      	nop
 8005018:	0800545f 	.word	0x0800545f

0800501c <_strtoul_r>:
 800501c:	f7ff bf82 	b.w	8004f24 <_strtoul_l.isra.0>

08005020 <__submore>:
 8005020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005024:	460c      	mov	r4, r1
 8005026:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800502c:	4299      	cmp	r1, r3
 800502e:	d11d      	bne.n	800506c <__submore+0x4c>
 8005030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005034:	f000 f8a8 	bl	8005188 <_malloc_r>
 8005038:	b918      	cbnz	r0, 8005042 <__submore+0x22>
 800503a:	f04f 30ff 	mov.w	r0, #4294967295
 800503e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005046:	63a3      	str	r3, [r4, #56]	; 0x38
 8005048:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800504c:	6360      	str	r0, [r4, #52]	; 0x34
 800504e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005052:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005056:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800505a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800505e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005062:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005066:	6020      	str	r0, [r4, #0]
 8005068:	2000      	movs	r0, #0
 800506a:	e7e8      	b.n	800503e <__submore+0x1e>
 800506c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800506e:	0077      	lsls	r7, r6, #1
 8005070:	463a      	mov	r2, r7
 8005072:	f000 f8e3 	bl	800523c <_realloc_r>
 8005076:	4605      	mov	r5, r0
 8005078:	2800      	cmp	r0, #0
 800507a:	d0de      	beq.n	800503a <__submore+0x1a>
 800507c:	eb00 0806 	add.w	r8, r0, r6
 8005080:	4601      	mov	r1, r0
 8005082:	4632      	mov	r2, r6
 8005084:	4640      	mov	r0, r8
 8005086:	f000 f807 	bl	8005098 <memcpy>
 800508a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800508e:	f8c4 8000 	str.w	r8, [r4]
 8005092:	e7e9      	b.n	8005068 <__submore+0x48>

08005094 <__retarget_lock_acquire_recursive>:
 8005094:	4770      	bx	lr

08005096 <__retarget_lock_release_recursive>:
 8005096:	4770      	bx	lr

08005098 <memcpy>:
 8005098:	440a      	add	r2, r1
 800509a:	4291      	cmp	r1, r2
 800509c:	f100 33ff 	add.w	r3, r0, #4294967295
 80050a0:	d100      	bne.n	80050a4 <memcpy+0xc>
 80050a2:	4770      	bx	lr
 80050a4:	b510      	push	{r4, lr}
 80050a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050ae:	4291      	cmp	r1, r2
 80050b0:	d1f9      	bne.n	80050a6 <memcpy+0xe>
 80050b2:	bd10      	pop	{r4, pc}

080050b4 <memmove>:
 80050b4:	4288      	cmp	r0, r1
 80050b6:	b510      	push	{r4, lr}
 80050b8:	eb01 0402 	add.w	r4, r1, r2
 80050bc:	d902      	bls.n	80050c4 <memmove+0x10>
 80050be:	4284      	cmp	r4, r0
 80050c0:	4623      	mov	r3, r4
 80050c2:	d807      	bhi.n	80050d4 <memmove+0x20>
 80050c4:	1e43      	subs	r3, r0, #1
 80050c6:	42a1      	cmp	r1, r4
 80050c8:	d008      	beq.n	80050dc <memmove+0x28>
 80050ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050d2:	e7f8      	b.n	80050c6 <memmove+0x12>
 80050d4:	4402      	add	r2, r0
 80050d6:	4601      	mov	r1, r0
 80050d8:	428a      	cmp	r2, r1
 80050da:	d100      	bne.n	80050de <memmove+0x2a>
 80050dc:	bd10      	pop	{r4, pc}
 80050de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050e6:	e7f7      	b.n	80050d8 <memmove+0x24>

080050e8 <_free_r>:
 80050e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ea:	2900      	cmp	r1, #0
 80050ec:	d048      	beq.n	8005180 <_free_r+0x98>
 80050ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f2:	9001      	str	r0, [sp, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f1a1 0404 	sub.w	r4, r1, #4
 80050fa:	bfb8      	it	lt
 80050fc:	18e4      	addlt	r4, r4, r3
 80050fe:	f000 f8d3 	bl	80052a8 <__malloc_lock>
 8005102:	4a20      	ldr	r2, [pc, #128]	; (8005184 <_free_r+0x9c>)
 8005104:	9801      	ldr	r0, [sp, #4]
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	4615      	mov	r5, r2
 800510a:	b933      	cbnz	r3, 800511a <_free_r+0x32>
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	6014      	str	r4, [r2, #0]
 8005110:	b003      	add	sp, #12
 8005112:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005116:	f000 b8cd 	b.w	80052b4 <__malloc_unlock>
 800511a:	42a3      	cmp	r3, r4
 800511c:	d90b      	bls.n	8005136 <_free_r+0x4e>
 800511e:	6821      	ldr	r1, [r4, #0]
 8005120:	1862      	adds	r2, r4, r1
 8005122:	4293      	cmp	r3, r2
 8005124:	bf04      	itt	eq
 8005126:	681a      	ldreq	r2, [r3, #0]
 8005128:	685b      	ldreq	r3, [r3, #4]
 800512a:	6063      	str	r3, [r4, #4]
 800512c:	bf04      	itt	eq
 800512e:	1852      	addeq	r2, r2, r1
 8005130:	6022      	streq	r2, [r4, #0]
 8005132:	602c      	str	r4, [r5, #0]
 8005134:	e7ec      	b.n	8005110 <_free_r+0x28>
 8005136:	461a      	mov	r2, r3
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	b10b      	cbz	r3, 8005140 <_free_r+0x58>
 800513c:	42a3      	cmp	r3, r4
 800513e:	d9fa      	bls.n	8005136 <_free_r+0x4e>
 8005140:	6811      	ldr	r1, [r2, #0]
 8005142:	1855      	adds	r5, r2, r1
 8005144:	42a5      	cmp	r5, r4
 8005146:	d10b      	bne.n	8005160 <_free_r+0x78>
 8005148:	6824      	ldr	r4, [r4, #0]
 800514a:	4421      	add	r1, r4
 800514c:	1854      	adds	r4, r2, r1
 800514e:	42a3      	cmp	r3, r4
 8005150:	6011      	str	r1, [r2, #0]
 8005152:	d1dd      	bne.n	8005110 <_free_r+0x28>
 8005154:	681c      	ldr	r4, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	6053      	str	r3, [r2, #4]
 800515a:	4421      	add	r1, r4
 800515c:	6011      	str	r1, [r2, #0]
 800515e:	e7d7      	b.n	8005110 <_free_r+0x28>
 8005160:	d902      	bls.n	8005168 <_free_r+0x80>
 8005162:	230c      	movs	r3, #12
 8005164:	6003      	str	r3, [r0, #0]
 8005166:	e7d3      	b.n	8005110 <_free_r+0x28>
 8005168:	6825      	ldr	r5, [r4, #0]
 800516a:	1961      	adds	r1, r4, r5
 800516c:	428b      	cmp	r3, r1
 800516e:	bf04      	itt	eq
 8005170:	6819      	ldreq	r1, [r3, #0]
 8005172:	685b      	ldreq	r3, [r3, #4]
 8005174:	6063      	str	r3, [r4, #4]
 8005176:	bf04      	itt	eq
 8005178:	1949      	addeq	r1, r1, r5
 800517a:	6021      	streq	r1, [r4, #0]
 800517c:	6054      	str	r4, [r2, #4]
 800517e:	e7c7      	b.n	8005110 <_free_r+0x28>
 8005180:	b003      	add	sp, #12
 8005182:	bd30      	pop	{r4, r5, pc}
 8005184:	200000dc 	.word	0x200000dc

08005188 <_malloc_r>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	1ccd      	adds	r5, r1, #3
 800518c:	f025 0503 	bic.w	r5, r5, #3
 8005190:	3508      	adds	r5, #8
 8005192:	2d0c      	cmp	r5, #12
 8005194:	bf38      	it	cc
 8005196:	250c      	movcc	r5, #12
 8005198:	2d00      	cmp	r5, #0
 800519a:	4606      	mov	r6, r0
 800519c:	db01      	blt.n	80051a2 <_malloc_r+0x1a>
 800519e:	42a9      	cmp	r1, r5
 80051a0:	d903      	bls.n	80051aa <_malloc_r+0x22>
 80051a2:	230c      	movs	r3, #12
 80051a4:	6033      	str	r3, [r6, #0]
 80051a6:	2000      	movs	r0, #0
 80051a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051aa:	f000 f87d 	bl	80052a8 <__malloc_lock>
 80051ae:	4921      	ldr	r1, [pc, #132]	; (8005234 <_malloc_r+0xac>)
 80051b0:	680a      	ldr	r2, [r1, #0]
 80051b2:	4614      	mov	r4, r2
 80051b4:	b99c      	cbnz	r4, 80051de <_malloc_r+0x56>
 80051b6:	4f20      	ldr	r7, [pc, #128]	; (8005238 <_malloc_r+0xb0>)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	b923      	cbnz	r3, 80051c6 <_malloc_r+0x3e>
 80051bc:	4621      	mov	r1, r4
 80051be:	4630      	mov	r0, r6
 80051c0:	f000 f862 	bl	8005288 <_sbrk_r>
 80051c4:	6038      	str	r0, [r7, #0]
 80051c6:	4629      	mov	r1, r5
 80051c8:	4630      	mov	r0, r6
 80051ca:	f000 f85d 	bl	8005288 <_sbrk_r>
 80051ce:	1c43      	adds	r3, r0, #1
 80051d0:	d123      	bne.n	800521a <_malloc_r+0x92>
 80051d2:	230c      	movs	r3, #12
 80051d4:	6033      	str	r3, [r6, #0]
 80051d6:	4630      	mov	r0, r6
 80051d8:	f000 f86c 	bl	80052b4 <__malloc_unlock>
 80051dc:	e7e3      	b.n	80051a6 <_malloc_r+0x1e>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	1b5b      	subs	r3, r3, r5
 80051e2:	d417      	bmi.n	8005214 <_malloc_r+0x8c>
 80051e4:	2b0b      	cmp	r3, #11
 80051e6:	d903      	bls.n	80051f0 <_malloc_r+0x68>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	441c      	add	r4, r3
 80051ec:	6025      	str	r5, [r4, #0]
 80051ee:	e004      	b.n	80051fa <_malloc_r+0x72>
 80051f0:	6863      	ldr	r3, [r4, #4]
 80051f2:	42a2      	cmp	r2, r4
 80051f4:	bf0c      	ite	eq
 80051f6:	600b      	streq	r3, [r1, #0]
 80051f8:	6053      	strne	r3, [r2, #4]
 80051fa:	4630      	mov	r0, r6
 80051fc:	f000 f85a 	bl	80052b4 <__malloc_unlock>
 8005200:	f104 000b 	add.w	r0, r4, #11
 8005204:	1d23      	adds	r3, r4, #4
 8005206:	f020 0007 	bic.w	r0, r0, #7
 800520a:	1ac2      	subs	r2, r0, r3
 800520c:	d0cc      	beq.n	80051a8 <_malloc_r+0x20>
 800520e:	1a1b      	subs	r3, r3, r0
 8005210:	50a3      	str	r3, [r4, r2]
 8005212:	e7c9      	b.n	80051a8 <_malloc_r+0x20>
 8005214:	4622      	mov	r2, r4
 8005216:	6864      	ldr	r4, [r4, #4]
 8005218:	e7cc      	b.n	80051b4 <_malloc_r+0x2c>
 800521a:	1cc4      	adds	r4, r0, #3
 800521c:	f024 0403 	bic.w	r4, r4, #3
 8005220:	42a0      	cmp	r0, r4
 8005222:	d0e3      	beq.n	80051ec <_malloc_r+0x64>
 8005224:	1a21      	subs	r1, r4, r0
 8005226:	4630      	mov	r0, r6
 8005228:	f000 f82e 	bl	8005288 <_sbrk_r>
 800522c:	3001      	adds	r0, #1
 800522e:	d1dd      	bne.n	80051ec <_malloc_r+0x64>
 8005230:	e7cf      	b.n	80051d2 <_malloc_r+0x4a>
 8005232:	bf00      	nop
 8005234:	200000dc 	.word	0x200000dc
 8005238:	200000e0 	.word	0x200000e0

0800523c <_realloc_r>:
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523e:	4607      	mov	r7, r0
 8005240:	4614      	mov	r4, r2
 8005242:	460e      	mov	r6, r1
 8005244:	b921      	cbnz	r1, 8005250 <_realloc_r+0x14>
 8005246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800524a:	4611      	mov	r1, r2
 800524c:	f7ff bf9c 	b.w	8005188 <_malloc_r>
 8005250:	b922      	cbnz	r2, 800525c <_realloc_r+0x20>
 8005252:	f7ff ff49 	bl	80050e8 <_free_r>
 8005256:	4625      	mov	r5, r4
 8005258:	4628      	mov	r0, r5
 800525a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800525c:	f000 f830 	bl	80052c0 <_malloc_usable_size_r>
 8005260:	42a0      	cmp	r0, r4
 8005262:	d20f      	bcs.n	8005284 <_realloc_r+0x48>
 8005264:	4621      	mov	r1, r4
 8005266:	4638      	mov	r0, r7
 8005268:	f7ff ff8e 	bl	8005188 <_malloc_r>
 800526c:	4605      	mov	r5, r0
 800526e:	2800      	cmp	r0, #0
 8005270:	d0f2      	beq.n	8005258 <_realloc_r+0x1c>
 8005272:	4631      	mov	r1, r6
 8005274:	4622      	mov	r2, r4
 8005276:	f7ff ff0f 	bl	8005098 <memcpy>
 800527a:	4631      	mov	r1, r6
 800527c:	4638      	mov	r0, r7
 800527e:	f7ff ff33 	bl	80050e8 <_free_r>
 8005282:	e7e9      	b.n	8005258 <_realloc_r+0x1c>
 8005284:	4635      	mov	r5, r6
 8005286:	e7e7      	b.n	8005258 <_realloc_r+0x1c>

08005288 <_sbrk_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	4d06      	ldr	r5, [pc, #24]	; (80052a4 <_sbrk_r+0x1c>)
 800528c:	2300      	movs	r3, #0
 800528e:	4604      	mov	r4, r0
 8005290:	4608      	mov	r0, r1
 8005292:	602b      	str	r3, [r5, #0]
 8005294:	f7fb ff8e 	bl	80011b4 <_sbrk>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_sbrk_r+0x1a>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_sbrk_r+0x1a>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	20000194 	.word	0x20000194

080052a8 <__malloc_lock>:
 80052a8:	4801      	ldr	r0, [pc, #4]	; (80052b0 <__malloc_lock+0x8>)
 80052aa:	f7ff bef3 	b.w	8005094 <__retarget_lock_acquire_recursive>
 80052ae:	bf00      	nop
 80052b0:	2000019c 	.word	0x2000019c

080052b4 <__malloc_unlock>:
 80052b4:	4801      	ldr	r0, [pc, #4]	; (80052bc <__malloc_unlock+0x8>)
 80052b6:	f7ff beee 	b.w	8005096 <__retarget_lock_release_recursive>
 80052ba:	bf00      	nop
 80052bc:	2000019c 	.word	0x2000019c

080052c0 <_malloc_usable_size_r>:
 80052c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c4:	1f18      	subs	r0, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bfbc      	itt	lt
 80052ca:	580b      	ldrlt	r3, [r1, r0]
 80052cc:	18c0      	addlt	r0, r0, r3
 80052ce:	4770      	bx	lr

080052d0 <_init>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	bf00      	nop
 80052d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d6:	bc08      	pop	{r3}
 80052d8:	469e      	mov	lr, r3
 80052da:	4770      	bx	lr

080052dc <_fini>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	bf00      	nop
 80052e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e2:	bc08      	pop	{r3}
 80052e4:	469e      	mov	lr, r3
 80052e6:	4770      	bx	lr
